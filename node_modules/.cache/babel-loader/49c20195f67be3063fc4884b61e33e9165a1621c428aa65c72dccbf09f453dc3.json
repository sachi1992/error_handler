{"ast":null,"code":"import { uuid4 } from '../misc.js';\nimport { fill, addNonEnumerableProperty } from '../object.js';\nimport { GLOBAL_OBJ } from '../worldwide.js';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers.js';\nconst WINDOW = GLOBAL_OBJ;\nconst DEBOUNCE_DURATION = 1000;\nlet debounceTimerID;\nlet lastCapturedEventType;\nlet lastCapturedEventTargetId;\n\n/**\n * Add an instrumentation handler for when a click or a keypress happens.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addClickKeypressInstrumentationHandler(handler) {\n  const type = 'dom';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentDOM);\n}\n\n/** Exported for tests only. */\nfunction instrumentDOM() {\n  if (!WINDOW.document) {\n    return;\n  }\n\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  const triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  WINDOW.document.addEventListener('click', globalDOMEventHandler, false);\n  WINDOW.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach(target => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = WINDOW[target] && WINDOW[target].prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n    fill(proto, 'addEventListener', function (originalAddEventListener) {\n      return function (type, listener, options) {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this;\n            const handlers = el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {};\n            const handlerForType = handlers[type] = handlers[type] || {\n              refCount: 0\n            };\n            if (!handlerForType.handler) {\n              const handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n            handlerForType.refCount++;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n    fill(proto, 'removeEventListener', function (originalRemoveEventListener) {\n      return function (type, listener, options) {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this;\n            const handlers = el.__sentry_instrumentation_handlers__ || {};\n            const handlerForType = handlers[type];\n            if (handlerForType) {\n              handlerForType.refCount--;\n              // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n              if (handlerForType.refCount <= 0) {\n                originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                handlerForType.handler = undefined;\n                delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n              }\n\n              // If there are no longer any custom handlers of any type on this element, cleanup everything.\n              if (Object.keys(handlers).length === 0) {\n                delete el.__sentry_instrumentation_handlers__;\n              }\n            }\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n        return originalRemoveEventListener.call(this, type, listener, options);\n      };\n    });\n  });\n}\n\n/**\n * Check whether the event is similar to the last captured one. For example, two click events on the same button.\n */\nfunction isSimilarToLastCapturedEvent(event) {\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (event.type !== lastCapturedEventType) {\n    return false;\n  }\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (!event.target || event.target._sentryId !== lastCapturedEventTargetId) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return true;\n}\n\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(eventType, target) {\n  // We are only interested in filtering `keypress` events for now.\n  if (eventType !== 'keypress') {\n    return false;\n  }\n  if (!target || !target.tagName) {\n    return true;\n  }\n\n  // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n  // e.g.tabbing through elements, hotkeys, etc.\n  if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n */\nfunction makeDOMEventHandler(handler, globalListener = false) {\n  return event => {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || event['_sentryCaptured']) {\n      return;\n    }\n    const target = getEventTarget(event);\n\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event.type, target)) {\n      return;\n    }\n\n    // Mark event as \"seen\"\n    addNonEnumerableProperty(event, '_sentryCaptured', true);\n    if (target && !target._sentryId) {\n      // Add UUID to event target so we can identify if\n      addNonEnumerableProperty(target, '_sentryId', uuid4());\n    }\n    const name = event.type === 'keypress' ? 'input' : event.type;\n\n    // If there is no last captured event, it means that we can safely capture the new event and store it for future comparisons.\n    // If there is a last captured event, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    if (!isSimilarToLastCapturedEvent(event)) {\n      const handlerData = {\n        event,\n        name,\n        global: globalListener\n      };\n      handler(handlerData);\n      lastCapturedEventType = event.type;\n      lastCapturedEventTargetId = target ? target._sentryId : undefined;\n    }\n\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = WINDOW.setTimeout(() => {\n      lastCapturedEventTargetId = undefined;\n      lastCapturedEventType = undefined;\n    }, DEBOUNCE_DURATION);\n  };\n}\nfunction getEventTarget(event) {\n  try {\n    return event.target;\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n    return null;\n  }\n}\nexport { addClickKeypressInstrumentationHandler, instrumentDOM };","map":{"version":3,"names":["WINDOW","GLOBAL_OBJ","DEBOUNCE_DURATION","debounceTimerID","lastCapturedEventType","lastCapturedEventTargetId","addClickKeypressInstrumentationHandler","handler","type","addHandler","maybeInstrument","instrumentDOM","document","triggerDOMHandler","triggerHandlers","bind","globalDOMEventHandler","makeDOMEventHandler","addEventListener","forEach","target","proto","prototype","hasOwnProperty","fill","originalAddEventListener","listener","options","el","handlers","__sentry_instrumentation_handlers__","handlerForType","refCount","call","e","originalRemoveEventListener","undefined","Object","keys","length","isSimilarToLastCapturedEvent","event","_sentryId","shouldSkipDOMEvent","eventType","tagName","isContentEditable","globalListener","getEventTarget","addNonEnumerableProperty","uuid4","name","handlerData","global","clearTimeout","setTimeout"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/instrument/dom.ts"],"sourcesContent":["// TODO(v8): Move everything in this file into the browser package. Nothing here is generic and we run risk of leaking browser types into non-browser packages.\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport type { HandlerDataDom } from '@sentry/types';\n\nimport { uuid4 } from '../misc';\nimport { addNonEnumerableProperty, fill } from '../object';\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers';\n\ntype SentryWrappedTarget = HTMLElement & { _sentryId?: string };\n\ntype AddEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions,\n) => void;\ntype RemoveEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | EventListenerOptions,\n) => void;\n\ntype InstrumentedElement = Element & {\n  __sentry_instrumentation_handlers__?: {\n    [key in 'click' | 'keypress']?: {\n      handler?: Function;\n      /** The number of custom listeners attached to this element */\n      refCount: number;\n    };\n  };\n};\n\nconst WINDOW = GLOBAL_OBJ as unknown as Window;\nconst DEBOUNCE_DURATION = 1000;\n\nlet debounceTimerID: number | undefined;\nlet lastCapturedEventType: string | undefined;\nlet lastCapturedEventTargetId: string | undefined;\n\n/**\n * Add an instrumentation handler for when a click or a keypress happens.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addClickKeypressInstrumentationHandler(handler: (data: HandlerDataDom) => void): void {\n  const type = 'dom';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentDOM);\n}\n\n/** Exported for tests only. */\nexport function instrumentDOM(): void {\n  if (!WINDOW.document) {\n    return;\n  }\n\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  const triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  WINDOW.document.addEventListener('click', globalDOMEventHandler, false);\n  WINDOW.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = (WINDOW as any)[target] && (WINDOW as any)[target].prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function (originalAddEventListener: AddEventListener): AddEventListener {\n      return function (\n        this: Element,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): AddEventListener {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this as InstrumentedElement;\n            const handlers = (el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {});\n            const handlerForType = (handlers[type] = handlers[type] || { refCount: 0 });\n\n            if (!handlerForType.handler) {\n              const handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n\n            handlerForType.refCount++;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n\n    fill(\n      proto,\n      'removeEventListener',\n      function (originalRemoveEventListener: RemoveEventListener): RemoveEventListener {\n        return function (\n          this: Element,\n          type: string,\n          listener: EventListenerOrEventListenerObject,\n          options?: boolean | EventListenerOptions,\n        ): () => void {\n          if (type === 'click' || type == 'keypress') {\n            try {\n              const el = this as InstrumentedElement;\n              const handlers = el.__sentry_instrumentation_handlers__ || {};\n              const handlerForType = handlers[type];\n\n              if (handlerForType) {\n                handlerForType.refCount--;\n                // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n                if (handlerForType.refCount <= 0) {\n                  originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                  handlerForType.handler = undefined;\n                  delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n                }\n\n                // If there are no longer any custom handlers of any type on this element, cleanup everything.\n                if (Object.keys(handlers).length === 0) {\n                  delete el.__sentry_instrumentation_handlers__;\n                }\n              }\n            } catch (e) {\n              // Accessing dom properties is always fragile.\n              // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n            }\n          }\n\n          return originalRemoveEventListener.call(this, type, listener, options);\n        };\n      },\n    );\n  });\n}\n\n/**\n * Check whether the event is similar to the last captured one. For example, two click events on the same button.\n */\nfunction isSimilarToLastCapturedEvent(event: Event): boolean {\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (event.type !== lastCapturedEventType) {\n    return false;\n  }\n\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (!event.target || (event.target as SentryWrappedTarget)._sentryId !== lastCapturedEventTargetId) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return true;\n}\n\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(eventType: string, target: SentryWrappedTarget | null): boolean {\n  // We are only interested in filtering `keypress` events for now.\n  if (eventType !== 'keypress') {\n    return false;\n  }\n\n  if (!target || !target.tagName) {\n    return true;\n  }\n\n  // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n  // e.g.tabbing through elements, hotkeys, etc.\n  if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n */\nfunction makeDOMEventHandler(\n  handler: (data: HandlerDataDom) => void,\n  globalListener: boolean = false,\n): (event: Event) => void {\n  return (event: Event & { _sentryCaptured?: true }): void => {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || event['_sentryCaptured']) {\n      return;\n    }\n\n    const target = getEventTarget(event);\n\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event.type, target)) {\n      return;\n    }\n\n    // Mark event as \"seen\"\n    addNonEnumerableProperty(event, '_sentryCaptured', true);\n\n    if (target && !target._sentryId) {\n      // Add UUID to event target so we can identify if\n      addNonEnumerableProperty(target, '_sentryId', uuid4());\n    }\n\n    const name = event.type === 'keypress' ? 'input' : event.type;\n\n    // If there is no last captured event, it means that we can safely capture the new event and store it for future comparisons.\n    // If there is a last captured event, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    if (!isSimilarToLastCapturedEvent(event)) {\n      const handlerData: HandlerDataDom = { event, name, global: globalListener };\n      handler(handlerData);\n      lastCapturedEventType = event.type;\n      lastCapturedEventTargetId = target ? target._sentryId : undefined;\n    }\n\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = WINDOW.setTimeout(() => {\n      lastCapturedEventTargetId = undefined;\n      lastCapturedEventType = undefined;\n    }, DEBOUNCE_DURATION);\n  };\n}\n\nfunction getEventTarget(event: Event): SentryWrappedTarget | null {\n  try {\n    return event.target as SentryWrappedTarget | null;\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n    return null;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}