{"ast":null,"code":"import { timestampInSeconds } from '@sentry/utils';\nimport { DEFAULT_FLUSH_INTERVAL, NAME_AND_TAG_KEY_NORMALIZATION_REGEX, SET_METRIC_TYPE, MAX_WEIGHT } from './constants.js';\nimport { METRIC_MAP } from './instance.js';\nimport { updateMetricSummaryOnActiveSpan } from './metric-summary.js';\nimport { sanitizeTags, getBucketKey } from './utils.js';\n\n/**\n * A metrics aggregator that aggregates metrics in memory and flushes them periodically.\n */\nclass MetricsAggregator {\n  // TODO(@anonrig): Use FinalizationRegistry to have a proper way of flushing the buckets\n  // when the aggregator is garbage collected.\n  // Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n\n  // Different metrics have different weights. We use this to limit the number of metrics\n  // that we store in memory.\n\n  // SDKs are required to shift the flush interval by random() * rollup_in_seconds.\n  // That shift is determined once per startup to create jittering.\n\n  // An SDK is required to perform force flushing ahead of scheduled time if the memory\n  // pressure is too high. There is no rule for this other than that SDKs should be tracking\n  // abstract aggregation complexity (eg: a counter only carries a single float, whereas a\n  // distribution is a float per emission).\n  //\n  // Force flush is used on either shutdown, flush() or when we exceed the max weight.\n\n  constructor(_client) {\n    this._client = _client;\n    this._buckets = new Map();\n    this._bucketsTotalWeight = 0;\n    this._interval = setInterval(() => this._flush(), DEFAULT_FLUSH_INTERVAL);\n    this._flushShift = Math.floor(Math.random() * DEFAULT_FLUSH_INTERVAL / 1000);\n    this._forceFlush = false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  add(metricType, unsanitizedName, value, unit = 'none', unsanitizedTags = {}, maybeFloatTimestamp = timestampInSeconds()) {\n    const timestamp = Math.floor(maybeFloatTimestamp);\n    const name = unsanitizedName.replace(NAME_AND_TAG_KEY_NORMALIZATION_REGEX, '_');\n    const tags = sanitizeTags(unsanitizedTags);\n    const bucketKey = getBucketKey(metricType, name, unit, tags);\n    let bucketItem = this._buckets.get(bucketKey);\n    // If this is a set metric, we need to calculate the delta from the previous weight.\n    const previousWeight = bucketItem && metricType === SET_METRIC_TYPE ? bucketItem.metric.weight : 0;\n    if (bucketItem) {\n      bucketItem.metric.add(value);\n      // TODO(abhi): Do we need this check?\n      if (bucketItem.timestamp < timestamp) {\n        bucketItem.timestamp = timestamp;\n      }\n    } else {\n      bucketItem = {\n        // @ts-expect-error we don't need to narrow down the type of value here, saves bundle size.\n        metric: new METRIC_MAP[metricType](value),\n        timestamp,\n        metricType,\n        name,\n        unit,\n        tags\n      };\n      this._buckets.set(bucketKey, bucketItem);\n    }\n\n    // If value is a string, it's a set metric so calculate the delta from the previous weight.\n    const val = typeof value === 'string' ? bucketItem.metric.weight - previousWeight : value;\n    updateMetricSummaryOnActiveSpan(metricType, name, val, unit, unsanitizedTags, bucketKey);\n\n    // We need to keep track of the total weight of the buckets so that we can\n    // flush them when we exceed the max weight.\n    this._bucketsTotalWeight += bucketItem.metric.weight;\n    if (this._bucketsTotalWeight >= MAX_WEIGHT) {\n      this.flush();\n    }\n  }\n\n  /**\n   * Flushes the current metrics to the transport via the transport.\n   */\n  flush() {\n    this._forceFlush = true;\n    this._flush();\n  }\n\n  /**\n   * Shuts down metrics aggregator and clears all metrics.\n   */\n  close() {\n    this._forceFlush = true;\n    clearInterval(this._interval);\n    this._flush();\n  }\n\n  /**\n   * Flushes the buckets according to the internal state of the aggregator.\n   * If it is a force flush, which happens on shutdown, it will flush all buckets.\n   * Otherwise, it will only flush buckets that are older than the flush interval,\n   * and according to the flush shift.\n   *\n   * This function mutates `_forceFlush` and `_bucketsTotalWeight` properties.\n   */\n  _flush() {\n    // TODO(@anonrig): Add Atomics for locking to avoid having force flush and regular flush\n    // running at the same time.\n    // Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics\n\n    // This path eliminates the need for checking for timestamps since we're forcing a flush.\n    // Remember to reset the flag, or it will always flush all metrics.\n    if (this._forceFlush) {\n      this._forceFlush = false;\n      this._bucketsTotalWeight = 0;\n      this._captureMetrics(this._buckets);\n      this._buckets.clear();\n      return;\n    }\n    const cutoffSeconds = Math.floor(timestampInSeconds()) - DEFAULT_FLUSH_INTERVAL / 1000 - this._flushShift;\n    // TODO(@anonrig): Optimization opportunity.\n    // Convert this map to an array and store key in the bucketItem.\n    const flushedBuckets = new Map();\n    for (const [key, bucket] of this._buckets) {\n      if (bucket.timestamp <= cutoffSeconds) {\n        flushedBuckets.set(key, bucket);\n        this._bucketsTotalWeight -= bucket.metric.weight;\n      }\n    }\n    for (const [key] of flushedBuckets) {\n      this._buckets.delete(key);\n    }\n    this._captureMetrics(flushedBuckets);\n  }\n\n  /**\n   * Only captures a subset of the buckets passed to this function.\n   * @param flushedBuckets\n   */\n  _captureMetrics(flushedBuckets) {\n    if (flushedBuckets.size > 0 && this._client.captureAggregateMetrics) {\n      // TODO(@anonrig): Optimization opportunity.\n      // This copy operation can be avoided if we store the key in the bucketItem.\n      const buckets = Array.from(flushedBuckets).map(([, bucketItem]) => bucketItem);\n      this._client.captureAggregateMetrics(buckets);\n    }\n  }\n}\nexport { MetricsAggregator };","map":{"version":3,"names":["MetricsAggregator","constructor","_client","_buckets","Map","_bucketsTotalWeight","_interval","setInterval","_flush","DEFAULT_FLUSH_INTERVAL","_flushShift","Math","floor","random","_forceFlush","add","metricType","unsanitizedName","value","unit","unsanitizedTags","maybeFloatTimestamp","timestampInSeconds","timestamp","name","replace","NAME_AND_TAG_KEY_NORMALIZATION_REGEX","tags","sanitizeTags","bucketKey","getBucketKey","bucketItem","get","previousWeight","SET_METRIC_TYPE","metric","weight","METRIC_MAP","set","val","updateMetricSummaryOnActiveSpan","MAX_WEIGHT","flush","close","clearInterval","_captureMetrics","clear","cutoffSeconds","flushedBuckets","key","bucket","delete","size","captureAggregateMetrics","buckets","Array","from","map"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/metrics/aggregator.ts"],"sourcesContent":["import type {\n  Client,\n  ClientOptions,\n  MeasurementUnit,\n  MetricsAggregator as MetricsAggregatorBase,\n  Primitive,\n} from '@sentry/types';\nimport { timestampInSeconds } from '@sentry/utils';\nimport { DEFAULT_FLUSH_INTERVAL, MAX_WEIGHT, NAME_AND_TAG_KEY_NORMALIZATION_REGEX, SET_METRIC_TYPE } from './constants';\nimport { METRIC_MAP } from './instance';\nimport { updateMetricSummaryOnActiveSpan } from './metric-summary';\nimport type { MetricBucket, MetricType } from './types';\nimport { getBucketKey, sanitizeTags } from './utils';\n\n/**\n * A metrics aggregator that aggregates metrics in memory and flushes them periodically.\n */\nexport class MetricsAggregator implements MetricsAggregatorBase {\n  // TODO(@anonrig): Use FinalizationRegistry to have a proper way of flushing the buckets\n  // when the aggregator is garbage collected.\n  // Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n  private _buckets: MetricBucket;\n\n  // Different metrics have different weights. We use this to limit the number of metrics\n  // that we store in memory.\n  private _bucketsTotalWeight;\n\n  private readonly _interval: ReturnType<typeof setInterval>;\n\n  // SDKs are required to shift the flush interval by random() * rollup_in_seconds.\n  // That shift is determined once per startup to create jittering.\n  private readonly _flushShift: number;\n\n  // An SDK is required to perform force flushing ahead of scheduled time if the memory\n  // pressure is too high. There is no rule for this other than that SDKs should be tracking\n  // abstract aggregation complexity (eg: a counter only carries a single float, whereas a\n  // distribution is a float per emission).\n  //\n  // Force flush is used on either shutdown, flush() or when we exceed the max weight.\n  private _forceFlush: boolean;\n\n  public constructor(private readonly _client: Client<ClientOptions>) {\n    this._buckets = new Map();\n    this._bucketsTotalWeight = 0;\n    this._interval = setInterval(() => this._flush(), DEFAULT_FLUSH_INTERVAL);\n    this._flushShift = Math.floor((Math.random() * DEFAULT_FLUSH_INTERVAL) / 1000);\n    this._forceFlush = false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public add(\n    metricType: MetricType,\n    unsanitizedName: string,\n    value: number | string,\n    unit: MeasurementUnit = 'none',\n    unsanitizedTags: Record<string, Primitive> = {},\n    maybeFloatTimestamp = timestampInSeconds(),\n  ): void {\n    const timestamp = Math.floor(maybeFloatTimestamp);\n    const name = unsanitizedName.replace(NAME_AND_TAG_KEY_NORMALIZATION_REGEX, '_');\n    const tags = sanitizeTags(unsanitizedTags);\n\n    const bucketKey = getBucketKey(metricType, name, unit, tags);\n\n    let bucketItem = this._buckets.get(bucketKey);\n    // If this is a set metric, we need to calculate the delta from the previous weight.\n    const previousWeight = bucketItem && metricType === SET_METRIC_TYPE ? bucketItem.metric.weight : 0;\n\n    if (bucketItem) {\n      bucketItem.metric.add(value);\n      // TODO(abhi): Do we need this check?\n      if (bucketItem.timestamp < timestamp) {\n        bucketItem.timestamp = timestamp;\n      }\n    } else {\n      bucketItem = {\n        // @ts-expect-error we don't need to narrow down the type of value here, saves bundle size.\n        metric: new METRIC_MAP[metricType](value),\n        timestamp,\n        metricType,\n        name,\n        unit,\n        tags,\n      };\n      this._buckets.set(bucketKey, bucketItem);\n    }\n\n    // If value is a string, it's a set metric so calculate the delta from the previous weight.\n    const val = typeof value === 'string' ? bucketItem.metric.weight - previousWeight : value;\n    updateMetricSummaryOnActiveSpan(metricType, name, val, unit, unsanitizedTags, bucketKey);\n\n    // We need to keep track of the total weight of the buckets so that we can\n    // flush them when we exceed the max weight.\n    this._bucketsTotalWeight += bucketItem.metric.weight;\n\n    if (this._bucketsTotalWeight >= MAX_WEIGHT) {\n      this.flush();\n    }\n  }\n\n  /**\n   * Flushes the current metrics to the transport via the transport.\n   */\n  public flush(): void {\n    this._forceFlush = true;\n    this._flush();\n  }\n\n  /**\n   * Shuts down metrics aggregator and clears all metrics.\n   */\n  public close(): void {\n    this._forceFlush = true;\n    clearInterval(this._interval);\n    this._flush();\n  }\n\n  /**\n   * Flushes the buckets according to the internal state of the aggregator.\n   * If it is a force flush, which happens on shutdown, it will flush all buckets.\n   * Otherwise, it will only flush buckets that are older than the flush interval,\n   * and according to the flush shift.\n   *\n   * This function mutates `_forceFlush` and `_bucketsTotalWeight` properties.\n   */\n  private _flush(): void {\n    // TODO(@anonrig): Add Atomics for locking to avoid having force flush and regular flush\n    // running at the same time.\n    // Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics\n\n    // This path eliminates the need for checking for timestamps since we're forcing a flush.\n    // Remember to reset the flag, or it will always flush all metrics.\n    if (this._forceFlush) {\n      this._forceFlush = false;\n      this._bucketsTotalWeight = 0;\n      this._captureMetrics(this._buckets);\n      this._buckets.clear();\n      return;\n    }\n    const cutoffSeconds = Math.floor(timestampInSeconds()) - DEFAULT_FLUSH_INTERVAL / 1000 - this._flushShift;\n    // TODO(@anonrig): Optimization opportunity.\n    // Convert this map to an array and store key in the bucketItem.\n    const flushedBuckets: MetricBucket = new Map();\n    for (const [key, bucket] of this._buckets) {\n      if (bucket.timestamp <= cutoffSeconds) {\n        flushedBuckets.set(key, bucket);\n        this._bucketsTotalWeight -= bucket.metric.weight;\n      }\n    }\n\n    for (const [key] of flushedBuckets) {\n      this._buckets.delete(key);\n    }\n\n    this._captureMetrics(flushedBuckets);\n  }\n\n  /**\n   * Only captures a subset of the buckets passed to this function.\n   * @param flushedBuckets\n   */\n  private _captureMetrics(flushedBuckets: MetricBucket): void {\n    if (flushedBuckets.size > 0 && this._client.captureAggregateMetrics) {\n      // TODO(@anonrig): Optimization opportunity.\n      // This copy operation can be avoided if we store the key in the bucketItem.\n      const buckets = Array.from(flushedBuckets).map(([, bucketItem]) => bucketItem);\n      this._client.captureAggregateMetrics(buckets);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}