{"ast":null,"code":"import { WINDOW } from '../../types.js';\nimport { onHidden } from './onHidden.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nlet firstHiddenTime = -1;\nconst initHiddenTime = () => {\n  // If the document is hidden and not prerendering, assume it was always\n  // hidden and the page was loaded in the background.\n  return WINDOW.document.visibilityState === 'hidden' && !WINDOW.document.prerendering ? 0 : Infinity;\n};\nconst trackChanges = () => {\n  // Update the time if/when the document becomes hidden.\n  onHidden(({\n    timeStamp\n  }) => {\n    firstHiddenTime = timeStamp;\n  }, true);\n};\nconst getVisibilityWatcher = () => {\n  if (firstHiddenTime < 0) {\n    // If the document is hidden when this code runs, assume it was hidden\n    // since navigation start. This isn't a perfect heuristic, but it's the\n    // best we can do until an API is available to support querying past\n    // visibilityState.\n    firstHiddenTime = initHiddenTime();\n    trackChanges();\n  }\n  return {\n    get firstHiddenTime() {\n      return firstHiddenTime;\n    }\n  };\n};\nexport { getVisibilityWatcher };","map":{"version":3,"names":["firstHiddenTime","initHiddenTime","WINDOW","document","visibilityState","prerendering","Infinity","trackChanges","onHidden","timeStamp","getVisibilityWatcher"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry-internal/src/browser/web-vitals/lib/getVisibilityWatcher.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\nimport { onHidden } from './onHidden';\n\nlet firstHiddenTime = -1;\n\nconst initHiddenTime = (): number => {\n  // If the document is hidden and not prerendering, assume it was always\n  // hidden and the page was loaded in the background.\n  return WINDOW.document.visibilityState === 'hidden' && !WINDOW.document.prerendering ? 0 : Infinity;\n};\n\nconst trackChanges = (): void => {\n  // Update the time if/when the document becomes hidden.\n  onHidden(({ timeStamp }) => {\n    firstHiddenTime = timeStamp;\n  }, true);\n};\n\nexport const getVisibilityWatcher = (): {\n  readonly firstHiddenTime: number;\n} => {\n  if (firstHiddenTime < 0) {\n    // If the document is hidden when this code runs, assume it was hidden\n    // since navigation start. This isn't a perfect heuristic, but it's the\n    // best we can do until an API is available to support querying past\n    // visibilityState.\n    firstHiddenTime = initHiddenTime();\n    trackChanges();\n  }\n  return {\n    get firstHiddenTime() {\n      return firstHiddenTime;\n    },\n  };\n};\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA,IAAIA,eAAA,GAAkB,CAAC,CAAC;AAExB,MAAMC,cAAA,GAAiBA,CAAA,KAAc;EACrC;EACA;EACE,OAAOC,MAAM,CAACC,QAAQ,CAACC,eAAA,KAAoB,QAAS,IAAG,CAACF,MAAM,CAACC,QAAQ,CAACE,YAAA,GAAe,IAAIC,QAAQ;AACrG,CAAC;AAED,MAAMC,YAAA,GAAeA,CAAA,KAAY;EACjC;EACEC,QAAQ,CAAC,CAAC;IAAEC;EAAU,CAAC,KAAK;IAC1BT,eAAA,GAAkBS,SAAS;EAC/B,CAAG,EAAE,IAAI,CAAC;AACV,CAAC;AAEM,MAAMC,oBAAqB,GAAEA,CAAA,KAE/B;EACH,IAAIV,eAAgB,GAAE,CAAC,EAAE;IAC3B;IACA;IACA;IACA;IACIA,eAAgB,GAAEC,cAAc,EAAE;IAClCM,YAAY,EAAE;EAClB;EACE,OAAO;IACL,IAAIP,eAAeA,CAAA,EAAG;MACpB,OAAOA,eAAe;IAC5B;EACA,CAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}