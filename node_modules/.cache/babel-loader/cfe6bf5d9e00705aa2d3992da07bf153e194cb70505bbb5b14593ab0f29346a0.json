{"ast":null,"code":"import { fill } from '../object.js';\nimport { supportsNativeFetch } from '../supports.js';\nimport { GLOBAL_OBJ } from '../worldwide.js';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers.js';\n\n/**\n * Add an instrumentation handler for when a fetch request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addFetchInstrumentationHandler(handler) {\n  const type = 'fetch';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentFetch);\n}\nfunction instrumentFetch() {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n  fill(GLOBAL_OBJ, 'fetch', function (originalFetch) {\n    return function (...args) {\n      const {\n        method,\n        url\n      } = parseFetchArgs(args);\n      const handlerData = {\n        args,\n        fetchData: {\n          method,\n          url\n        },\n        startTimestamp: Date.now()\n      };\n      triggerHandlers('fetch', {\n        ...handlerData\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(GLOBAL_OBJ, args).then(response => {\n        const finishedHandlerData = {\n          ...handlerData,\n          endTimestamp: Date.now(),\n          response\n        };\n        triggerHandlers('fetch', finishedHandlerData);\n        return response;\n      }, error => {\n        const erroredHandlerData = {\n          ...handlerData,\n          endTimestamp: Date.now(),\n          error\n        };\n        triggerHandlers('fetch', erroredHandlerData);\n        // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n        //       it means the sentry.javascript SDK caught an error invoking your application code.\n        //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n        throw error;\n      });\n    };\n  });\n}\nfunction hasProp(obj, prop) {\n  return !!obj && typeof obj === 'object' && !!obj[prop];\n}\nfunction getUrlFromResource(resource) {\n  if (typeof resource === 'string') {\n    return resource;\n  }\n  if (!resource) {\n    return '';\n  }\n  if (hasProp(resource, 'url')) {\n    return resource.url;\n  }\n  if (resource.toString) {\n    return resource.toString();\n  }\n  return '';\n}\n\n/**\n * Parses the fetch arguments to find the used Http method and the url of the request.\n * Exported for tests only.\n */\nfunction parseFetchArgs(fetchArgs) {\n  if (fetchArgs.length === 0) {\n    return {\n      method: 'GET',\n      url: ''\n    };\n  }\n  if (fetchArgs.length === 2) {\n    const [url, options] = fetchArgs;\n    return {\n      url: getUrlFromResource(url),\n      method: hasProp(options, 'method') ? String(options.method).toUpperCase() : 'GET'\n    };\n  }\n  const arg = fetchArgs[0];\n  return {\n    url: getUrlFromResource(arg),\n    method: hasProp(arg, 'method') ? String(arg.method).toUpperCase() : 'GET'\n  };\n}\nexport { addFetchInstrumentationHandler, parseFetchArgs };","map":{"version":3,"names":["addFetchInstrumentationHandler","handler","type","addHandler","maybeInstrument","instrumentFetch","supportsNativeFetch","fill","GLOBAL_OBJ","originalFetch","args","method","url","parseFetchArgs","handlerData","fetchData","startTimestamp","Date","now","triggerHandlers","apply","then","response","finishedHandlerData","endTimestamp","error","erroredHandlerData","hasProp","obj","prop","getUrlFromResource","resource","toString","fetchArgs","length","options","String","toUpperCase","arg"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/instrument/fetch.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport type { HandlerDataFetch } from '@sentry/types';\n\nimport { fill } from '../object';\nimport { supportsNativeFetch } from '../supports';\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers';\n\ntype FetchResource = string | { toString(): string } | { url: string };\n\n/**\n * Add an instrumentation handler for when a fetch request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addFetchInstrumentationHandler(handler: (data: HandlerDataFetch) => void): void {\n  const type = 'fetch';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentFetch);\n}\n\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(GLOBAL_OBJ, 'fetch', function (originalFetch: () => void): () => void {\n    return function (...args: any[]): void {\n      const { method, url } = parseFetchArgs(args);\n\n      const handlerData: HandlerDataFetch = {\n        args,\n        fetchData: {\n          method,\n          url,\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...handlerData,\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(GLOBAL_OBJ, args).then(\n        (response: Response) => {\n          const finishedHandlerData: HandlerDataFetch = {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            response,\n          };\n\n          triggerHandlers('fetch', finishedHandlerData);\n          return response;\n        },\n        (error: Error) => {\n          const erroredHandlerData: HandlerDataFetch = {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            error,\n          };\n\n          triggerHandlers('fetch', erroredHandlerData);\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\nfunction hasProp<T extends string>(obj: unknown, prop: T): obj is Record<string, string> {\n  return !!obj && typeof obj === 'object' && !!(obj as Record<string, string>)[prop];\n}\n\nfunction getUrlFromResource(resource: FetchResource): string {\n  if (typeof resource === 'string') {\n    return resource;\n  }\n\n  if (!resource) {\n    return '';\n  }\n\n  if (hasProp(resource, 'url')) {\n    return resource.url;\n  }\n\n  if (resource.toString) {\n    return resource.toString();\n  }\n\n  return '';\n}\n\n/**\n * Parses the fetch arguments to find the used Http method and the url of the request.\n * Exported for tests only.\n */\nexport function parseFetchArgs(fetchArgs: unknown[]): { method: string; url: string } {\n  if (fetchArgs.length === 0) {\n    return { method: 'GET', url: '' };\n  }\n\n  if (fetchArgs.length === 2) {\n    const [url, options] = fetchArgs as [FetchResource, object];\n\n    return {\n      url: getUrlFromResource(url),\n      method: hasProp(options, 'method') ? String(options.method).toUpperCase() : 'GET',\n    };\n  }\n\n  const arg = fetchArgs[0];\n  return {\n    url: getUrlFromResource(arg as FetchResource),\n    method: hasProp(arg, 'method') ? String(arg.method).toUpperCase() : 'GET',\n  };\n}\n"],"mappings":";;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,8BAA8BA,CAACC,OAAO,EAA0C;EAC9F,MAAMC,IAAK,GAAE,OAAO;EACpBC,UAAU,CAACD,IAAI,EAAED,OAAO,CAAC;EACzBG,eAAe,CAACF,IAAI,EAAEG,eAAe,CAAC;AACxC;AAEA,SAASA,eAAeA,CAAA,EAAS;EAC/B,IAAI,CAACC,mBAAmB,EAAE,EAAE;IAC1B;EACJ;EAEEC,IAAI,CAACC,UAAU,EAAE,OAAO,EAAE,UAAUC,aAAa,EAA0B;IACzE,OAAO,UAAU,GAAGC,IAAI,EAAe;MACrC,MAAM;QAAEC,MAAM;QAAEC;MAAA,IAAQC,cAAc,CAACH,IAAI,CAAC;MAE5C,MAAMI,WAAW,GAAqB;QACpCJ,IAAI;QACJK,SAAS,EAAE;UACTJ,MAAM;UACNC;QACV,CAAS;QACDI,cAAc,EAAEC,IAAI,CAACC,GAAG;MAChC,CAAO;MAEDC,eAAe,CAAC,OAAO,EAAE;QACvB,GAAGL;MACX,CAAO,CAAC;;MAER;MACM,OAAOL,aAAa,CAACW,KAAK,CAACZ,UAAU,EAAEE,IAAI,CAAC,CAACW,IAAI,CAC9CC,QAAQ,IAAe;QACtB,MAAMC,mBAAmB,GAAqB;UAC5C,GAAGT,WAAW;UACdU,YAAY,EAAEP,IAAI,CAACC,GAAG,EAAE;UACxBI;QACZ,CAAW;QAEDH,eAAe,CAAC,OAAO,EAAEI,mBAAmB,CAAC;QAC7C,OAAOD,QAAQ;MACzB,CAAS,EACAG,KAAK,IAAY;QAChB,MAAMC,kBAAkB,GAAqB;UAC3C,GAAGZ,WAAW;UACdU,YAAY,EAAEP,IAAI,CAACC,GAAG,EAAE;UACxBO;QACZ,CAAW;QAEDN,eAAe,CAAC,OAAO,EAAEO,kBAAkB,CAAC;QACtD;QACA;QACA;QACU,MAAMD,KAAK;MACrB,CACA,CAAO;IACP,CAAK;EACL,CAAG,CAAC;AACJ;AAEA,SAASE,OAAOA,CAAmBC,GAAG,EAAWC,IAAI,EAAoC;EACvF,OAAO,CAAC,CAACD,GAAI,IAAG,OAAOA,GAAI,KAAI,QAAS,IAAG,CAAC,CAAEA,GAAA,CAA+BC,IAAI,CAAC;AACpF;AAEA,SAASC,kBAAkBA,CAACC,QAAQ,EAAyB;EAC3D,IAAI,OAAOA,QAAS,KAAI,QAAQ,EAAE;IAChC,OAAOA,QAAQ;EACnB;EAEE,IAAI,CAACA,QAAQ,EAAE;IACb,OAAO,EAAE;EACb;EAEE,IAAIJ,OAAO,CAACI,QAAQ,EAAE,KAAK,CAAC,EAAE;IAC5B,OAAOA,QAAQ,CAACnB,GAAG;EACvB;EAEE,IAAImB,QAAQ,CAACC,QAAQ,EAAE;IACrB,OAAOD,QAAQ,CAACC,QAAQ,EAAE;EAC9B;EAEE,OAAO,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACO,SAASnB,cAAcA,CAACoB,SAAS,EAA8C;EACpF,IAAIA,SAAS,CAACC,MAAO,KAAI,CAAC,EAAE;IAC1B,OAAO;MAAEvB,MAAM,EAAE,KAAK;MAAEC,GAAG,EAAE;IAAA,CAAI;EACrC;EAEE,IAAIqB,SAAS,CAACC,MAAO,KAAI,CAAC,EAAE;IAC1B,MAAM,CAACtB,GAAG,EAAEuB,OAAO,IAAIF,SAAU;IAEjC,OAAO;MACLrB,GAAG,EAAEkB,kBAAkB,CAAClB,GAAG,CAAC;MAC5BD,MAAM,EAAEgB,OAAO,CAACQ,OAAO,EAAE,QAAQ,IAAIC,MAAM,CAACD,OAAO,CAACxB,MAAM,CAAC,CAAC0B,WAAW,EAAC,GAAI;IAClF,CAAK;EACL;EAEE,MAAMC,GAAI,GAAEL,SAAS,CAAC,CAAC,CAAC;EACxB,OAAO;IACLrB,GAAG,EAAEkB,kBAAkB,CAACQ,GAAA,CAAqB;IAC7C3B,MAAM,EAAEgB,OAAO,CAACW,GAAG,EAAE,QAAQ,IAAIF,MAAM,CAACE,GAAG,CAAC3B,MAAM,CAAC,CAAC0B,WAAW,EAAC,GAAI;EACxE,CAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}