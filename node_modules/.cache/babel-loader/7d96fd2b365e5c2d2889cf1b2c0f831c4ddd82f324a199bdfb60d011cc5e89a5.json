{"ast":null,"code":"import { getActiveTransaction, spanToJSON } from '@sentry/core';\nimport { logger } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../common/debug-build.js';\nimport { WINDOW } from './types.js';\n\n/**\n * Add a listener that cancels and finishes a transaction when the global\n * document is hidden.\n */\nfunction registerBackgroundTabDetection() {\n  if (WINDOW && WINDOW.document) {\n    WINDOW.document.addEventListener('visibilitychange', () => {\n      // eslint-disable-next-line deprecation/deprecation\n      const activeTransaction = getActiveTransaction();\n      if (WINDOW.document.hidden && activeTransaction) {\n        const statusType = 'cancelled';\n        const {\n          op,\n          status\n        } = spanToJSON(activeTransaction);\n        DEBUG_BUILD && logger.log(`[Tracing] Transaction: ${statusType} -> since tab moved to the background, op: ${op}`);\n        // We should not set status if it is already set, this prevent important statuses like\n        // error or data loss from being overwritten on transaction.\n        if (!status) {\n          activeTransaction.setStatus(statusType);\n        }\n        // TODO: Can we rewrite this to an attribute?\n        // eslint-disable-next-line deprecation/deprecation\n        activeTransaction.setTag('visibilitychange', 'document.hidden');\n        activeTransaction.end();\n      }\n    });\n  } else {\n    DEBUG_BUILD && logger.warn('[Tracing] Could not set up background tab detection due to lack of global document');\n  }\n}\nexport { registerBackgroundTabDetection };","map":{"version":3,"names":["registerBackgroundTabDetection","WINDOW","document","addEventListener","activeTransaction","getActiveTransaction","hidden","statusType","op","status","spanToJSON","DEBUG_BUILD","logger","log","setStatus","setTag","end","warn"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry-internal/src/browser/backgroundtab.ts"],"sourcesContent":["import type { IdleTransaction, SpanStatusType } from '@sentry/core';\nimport { getActiveTransaction, spanToJSON } from '@sentry/core';\nimport { logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../common/debug-build';\nimport { WINDOW } from './types';\n\n/**\n * Add a listener that cancels and finishes a transaction when the global\n * document is hidden.\n */\nexport function registerBackgroundTabDetection(): void {\n  if (WINDOW && WINDOW.document) {\n    WINDOW.document.addEventListener('visibilitychange', () => {\n      // eslint-disable-next-line deprecation/deprecation\n      const activeTransaction = getActiveTransaction() as IdleTransaction;\n      if (WINDOW.document.hidden && activeTransaction) {\n        const statusType: SpanStatusType = 'cancelled';\n\n        const { op, status } = spanToJSON(activeTransaction);\n\n        DEBUG_BUILD &&\n          logger.log(`[Tracing] Transaction: ${statusType} -> since tab moved to the background, op: ${op}`);\n        // We should not set status if it is already set, this prevent important statuses like\n        // error or data loss from being overwritten on transaction.\n        if (!status) {\n          activeTransaction.setStatus(statusType);\n        }\n        // TODO: Can we rewrite this to an attribute?\n        // eslint-disable-next-line deprecation/deprecation\n        activeTransaction.setTag('visibilitychange', 'document.hidden');\n        activeTransaction.end();\n      }\n    });\n  } else {\n    DEBUG_BUILD && logger.warn('[Tracing] Could not set up background tab detection due to lack of global document');\n  }\n}\n"],"mappings":";;;;;AAOA;AACA;AACA;AACA;AACO,SAASA,8BAA8BA,CAAA,EAAS;EACrD,IAAIC,MAAA,IAAUA,MAAM,CAACC,QAAQ,EAAE;IAC7BD,MAAM,CAACC,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,MAAM;MAC/D;MACM,MAAMC,iBAAA,GAAoBC,oBAAoB,EAAG;MACjD,IAAIJ,MAAM,CAACC,QAAQ,CAACI,MAAA,IAAUF,iBAAiB,EAAE;QAC/C,MAAMG,UAAU,GAAmB,WAAW;QAE9C,MAAM;UAAEC,EAAE;UAAEC;QAAA,IAAWC,UAAU,CAACN,iBAAiB,CAAC;QAEpDO,WAAY,IACVC,MAAM,CAACC,GAAG,CAAE,0BAAyBN,UAAW,8CAA6CC,EAAG;QACA;QACA;QACA,KAAAC,MAAA;UACAL,iBAAA,CAAAU,SAAA,CAAAP,UAAA;QACA;QACA;QACA;QACAH,iBAAA,CAAAW,MAAA;QACAX,iBAAA,CAAAY,GAAA;MACA;IACA;EACA;IACAL,WAAA,IAAAC,MAAA,CAAAK,IAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}