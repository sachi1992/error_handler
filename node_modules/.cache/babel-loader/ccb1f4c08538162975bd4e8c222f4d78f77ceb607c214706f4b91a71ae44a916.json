{"ast":null,"code":"/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nfunction parseUrl(url) {\n  if (!url) {\n    return {};\n  }\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    search: query,\n    hash: fragment,\n    relative: match[5] + query + fragment // everything minus origin\n  };\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nfunction stripUrlQueryAndFragment(urlPath) {\n  // eslint-disable-next-line no-useless-escape\n  return urlPath.split(/[\\?#]/, 1)[0];\n}\n\n/**\n * Returns number of URL segments of a passed string URL.\n */\nfunction getNumberOfUrlSegments(url) {\n  // split at '/' or at '\\/' to split regex urls correctly\n  return url.split(/\\\\?\\//).filter(s => s.length > 0 && s !== ',').length;\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span description\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nfunction getSanitizedUrlString(url) {\n  const {\n    protocol,\n    host,\n    path\n  } = url;\n  const filteredHost = host && host\n  // Always filter out authority\n  .replace(/^.*@/, '[filtered]:[filtered]@')\n  // Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n  // TODO: Use new URL global if it exists\n  .replace(/(:80)$/, '').replace(/(:443)$/, '') || '';\n  return `${protocol ? `${protocol}://` : ''}${filteredHost}${path}`;\n}\nexport { getNumberOfUrlSegments, getSanitizedUrlString, parseUrl, stripUrlQueryAndFragment };","map":{"version":3,"names":["parseUrl","url","match","query","fragment","host","path","protocol","search","hash","relative","stripUrlQueryAndFragment","urlPath","split","getNumberOfUrlSegments","filter","s","length","getSanitizedUrlString","filteredHost","replace"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/url.ts"],"sourcesContent":["type PartialURL = {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n  search?: string;\n  hash?: string;\n};\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(url: string): PartialURL {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    search: query,\n    hash: fragment,\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nexport function stripUrlQueryAndFragment(urlPath: string): string {\n  // eslint-disable-next-line no-useless-escape\n  return urlPath.split(/[\\?#]/, 1)[0];\n}\n\n/**\n * Returns number of URL segments of a passed string URL.\n */\nexport function getNumberOfUrlSegments(url: string): number {\n  // split at '/' or at '\\/' to split regex urls correctly\n  return url.split(/\\\\?\\//).filter(s => s.length > 0 && s !== ',').length;\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span description\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nexport function getSanitizedUrlString(url: PartialURL): string {\n  const { protocol, host, path } = url;\n\n  const filteredHost =\n    (host &&\n      host\n        // Always filter out authority\n        .replace(/^.*@/, '[filtered]:[filtered]@')\n        // Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n        // TODO: Use new URL global if it exists\n        .replace(/(:80)$/, '')\n        .replace(/(:443)$/, '')) ||\n    '';\n\n  return `${protocol ? `${protocol}://` : ''}${filteredHost}${path}`;\n}\n"],"mappings":"AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,QAAQA,CAACC,GAAG,EAAsB;EAChD,IAAI,CAACA,GAAG,EAAE;IACR,OAAO,EAAE;EACb;EAEE,MAAMC,KAAA,GAAQD,GAAG,CAACC,KAAK,CAAC,8DAA8D,CAAC;EAEvF,IAAI,CAACA,KAAK,EAAE;IACV,OAAO,EAAE;EACb;;EAEA;EACE,MAAMC,KAAA,GAAQD,KAAK,CAAC,CAAC,KAAK,EAAE;EAC5B,MAAME,QAAA,GAAWF,KAAK,CAAC,CAAC,KAAK,EAAE;EAC/B,OAAO;IACLG,IAAI,EAAEH,KAAK,CAAC,CAAC,CAAC;IACdI,IAAI,EAAEJ,KAAK,CAAC,CAAC,CAAC;IACdK,QAAQ,EAAEL,KAAK,CAAC,CAAC,CAAC;IAClBM,MAAM,EAAEL,KAAK;IACbM,IAAI,EAAEL,QAAQ;IACdM,QAAQ,EAAER,KAAK,CAAC,CAAC,CAAE,GAAEC,KAAM,GAAEC,QAAQ;EACzC,CAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASO,wBAAwBA,CAACC,OAAO,EAAkB;EAClE;EACE,OAAOA,OAAO,CAACC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC;;AAEA;AACA;AACA;AACO,SAASC,sBAAsBA,CAACb,GAAG,EAAkB;EAC5D;EACE,OAAOA,GAAG,CAACY,KAAK,CAAC,OAAO,CAAC,CAACE,MAAM,CAACC,CAAA,IAAKA,CAAC,CAACC,MAAO,GAAE,CAAE,IAAGD,CAAA,KAAM,GAAG,CAAC,CAACC,MAAM;AACzE;;AAEA;AACA;AACA;AACA;AACO,SAASC,qBAAqBA,CAACjB,GAAG,EAAsB;EAC7D,MAAM;IAAEM,QAAQ;IAAEF,IAAI;IAAEC;EAAA,CAAO,GAAEL,GAAG;EAEpC,MAAMkB,YAAa,GAChBd,IAAK,IACJA;EACN;EAAA,CACSe,OAAO,CAAC,MAAM,EAAE,wBAAwB;EACjD;EACA;EAAA,CACSA,OAAO,CAAC,QAAQ,EAAE,EAAE,EACpBA,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,IAC3B,EAAE;EAEJ,OAAQ,GAAAb,QAAA,MAAAA,QAAA,aAAAY,YAAA,GAAAb,IAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}