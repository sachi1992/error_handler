{"ast":null,"code":"import { DEBUG_BUILD } from '../debug-build.js';\nimport { logger } from '../logger.js';\nimport { getFunctionName } from '../stacktrace.js';\n\n// We keep the handlers globally\nconst handlers = {};\nconst instrumented = {};\n\n/** Add a handler function. */\nfunction addHandler(type, handler) {\n  handlers[type] = handlers[type] || [];\n  handlers[type].push(handler);\n}\n\n/**\n * Reset all instrumentation handlers.\n * This can be used by tests to ensure we have a clean slate of instrumentation handlers.\n */\nfunction resetInstrumentationHandlers() {\n  Object.keys(handlers).forEach(key => {\n    handlers[key] = undefined;\n  });\n}\n\n/** Maybe run an instrumentation function, unless it was already called. */\nfunction maybeInstrument(type, instrumentFn) {\n  if (!instrumented[type]) {\n    instrumentFn();\n    instrumented[type] = true;\n  }\n}\n\n/** Trigger handlers for a given instrumentation type. */\nfunction triggerHandlers(type, data) {\n  const typeHandlers = type && handlers[type];\n  if (!typeHandlers) {\n    return;\n  }\n  for (const handler of typeHandlers) {\n    try {\n      handler(data);\n    } catch (e) {\n      DEBUG_BUILD && logger.error(`Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`, e);\n    }\n  }\n}\nexport { addHandler, maybeInstrument, resetInstrumentationHandlers, triggerHandlers };","map":{"version":3,"names":["handlers","instrumented","addHandler","type","handler","push","resetInstrumentationHandlers","Object","keys","forEach","key","undefined","maybeInstrument","instrumentFn","triggerHandlers","data","typeHandlers","e","DEBUG_BUILD","logger","error","getFunctionName"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/instrument/_handlers.ts"],"sourcesContent":["import { DEBUG_BUILD } from '../debug-build';\nimport { logger } from '../logger';\nimport { getFunctionName } from '../stacktrace';\n\nexport type InstrumentHandlerType = 'console' | 'dom' | 'fetch' | 'history' | 'xhr' | 'error' | 'unhandledrejection';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type InstrumentHandlerCallback = (data: any) => void;\n\n// We keep the handlers globally\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Add a handler function. */\nexport function addHandler(type: InstrumentHandlerType, handler: InstrumentHandlerCallback): void {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] as InstrumentHandlerCallback[]).push(handler);\n}\n\n/**\n * Reset all instrumentation handlers.\n * This can be used by tests to ensure we have a clean slate of instrumentation handlers.\n */\nexport function resetInstrumentationHandlers(): void {\n  Object.keys(handlers).forEach(key => {\n    handlers[key as InstrumentHandlerType] = undefined;\n  });\n}\n\n/** Maybe run an instrumentation function, unless it was already called. */\nexport function maybeInstrument(type: InstrumentHandlerType, instrumentFn: () => void): void {\n  if (!instrumented[type]) {\n    instrumentFn();\n    instrumented[type] = true;\n  }\n}\n\n/** Trigger handlers for a given instrumentation type. */\nexport function triggerHandlers(type: InstrumentHandlerType, data: unknown): void {\n  const typeHandlers = type && handlers[type];\n  if (!typeHandlers) {\n    return;\n  }\n\n  for (const handler of typeHandlers) {\n    try {\n      handler(data);\n    } catch (e) {\n      DEBUG_BUILD &&\n        logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n"],"mappings":";;;;AAQA;AACA,MAAMA,QAAQ,GAAqE,EAAE;AACrF,MAAMC,YAAY,GAAiD,EAAE;;AAErE;AACO,SAASC,UAAUA,CAACC,IAAI,EAAyBC,OAAO,EAAmC;EAChGJ,QAAQ,CAACG,IAAI,CAAE,GAAEH,QAAQ,CAACG,IAAI,KAAK,EAAE;EACpCH,QAAQ,CAACG,IAAI,EAAkCE,IAAI,CAACD,OAAO,CAAC;AAC/D;;AAEA;AACA;AACA;AACA;AACO,SAASE,4BAA4BA,CAAA,EAAS;EACnDC,MAAM,CAACC,IAAI,CAACR,QAAQ,CAAC,CAACS,OAAO,CAACC,GAAA,IAAO;IACnCV,QAAQ,CAACU,GAAI,IAA4BC,SAAS;EACtD,CAAG,CAAC;AACJ;;AAEA;AACO,SAASC,eAAeA,CAACT,IAAI,EAAyBU,YAAY,EAAoB;EAC3F,IAAI,CAACZ,YAAY,CAACE,IAAI,CAAC,EAAE;IACvBU,YAAY,EAAE;IACdZ,YAAY,CAACE,IAAI,IAAI,IAAI;EAC7B;AACA;;AAEA;AACO,SAASW,eAAeA,CAACX,IAAI,EAAyBY,IAAI,EAAiB;EAChF,MAAMC,YAAA,GAAeb,IAAA,IAAQH,QAAQ,CAACG,IAAI,CAAC;EAC3C,IAAI,CAACa,YAAY,EAAE;IACjB;EACJ;EAEE,KAAK,MAAMZ,OAAQ,IAAGY,YAAY,EAAE;IAClC,IAAI;MACFZ,OAAO,CAACW,IAAI,CAAC;IACnB,CAAM,QAAOE,CAAC,EAAE;MACVC,WAAY,IACVC,MAAM,CAACC,KAAK,CACT,0DAAyDjB,IAAK,WAAUkB,eAAe,CAACjB,OAAO,CAAE,UAAS,EAC3Ga,CACV,CAAS;IACT;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}