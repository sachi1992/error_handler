{"ast":null,"code":"import { dsnFromString, forEachEnvelopeItem } from '@sentry/utils';\nimport { getEnvelopeEndpointWithUrlEncodedAuth } from '../api.js';\n\n/**\n * Gets an event from an envelope.\n *\n * This is only exported for use in the tests\n */\nfunction eventFromEnvelope(env, types) {\n  let event;\n  forEachEnvelopeItem(env, (item, type) => {\n    if (types.includes(type)) {\n      event = Array.isArray(item) ? item[1] : undefined;\n    }\n    // bail out if we found an event\n    return !!event;\n  });\n  return event;\n}\n\n/**\n * Creates a transport that overrides the release on all events.\n */\nfunction makeOverrideReleaseTransport(createTransport, release) {\n  return options => {\n    const transport = createTransport(options);\n    return {\n      send: async envelope => {\n        const event = eventFromEnvelope(envelope, ['event', 'transaction', 'profile', 'replay_event']);\n        if (event) {\n          event.release = release;\n        }\n        return transport.send(envelope);\n      },\n      flush: timeout => transport.flush(timeout)\n    };\n  };\n}\n\n/**\n * Creates a transport that can send events to different DSNs depending on the envelope contents.\n */\nfunction makeMultiplexedTransport(createTransport, matcher) {\n  return options => {\n    const fallbackTransport = createTransport(options);\n    const otherTransports = {};\n    function getTransport(dsn, release) {\n      // We create a transport for every unique dsn/release combination as there may be code from multiple releases in\n      // use at the same time\n      const key = release ? `${dsn}:${release}` : dsn;\n      if (!otherTransports[key]) {\n        const validatedDsn = dsnFromString(dsn);\n        if (!validatedDsn) {\n          return undefined;\n        }\n        const url = getEnvelopeEndpointWithUrlEncodedAuth(validatedDsn);\n        otherTransports[key] = release ? makeOverrideReleaseTransport(createTransport, release)({\n          ...options,\n          url\n        }) : createTransport({\n          ...options,\n          url\n        });\n      }\n      return otherTransports[key];\n    }\n    async function send(envelope) {\n      function getEvent(types) {\n        const eventTypes = types && types.length ? types : ['event'];\n        return eventFromEnvelope(envelope, eventTypes);\n      }\n      const transports = matcher({\n        envelope,\n        getEvent\n      }).map(result => {\n        if (typeof result === 'string') {\n          return getTransport(result, undefined);\n        } else {\n          return getTransport(result.dsn, result.release);\n        }\n      }).filter(t => !!t);\n\n      // If we have no transports to send to, use the fallback transport\n      if (transports.length === 0) {\n        transports.push(fallbackTransport);\n      }\n      const results = await Promise.all(transports.map(transport => transport.send(envelope)));\n      return results[0];\n    }\n    async function flush(timeout) {\n      const allTransports = [...Object.keys(otherTransports).map(dsn => otherTransports[dsn]), fallbackTransport];\n      const results = await Promise.all(allTransports.map(transport => transport.flush(timeout)));\n      return results.every(r => r);\n    }\n    return {\n      send,\n      flush\n    };\n  };\n}\nexport { eventFromEnvelope, makeMultiplexedTransport };","map":{"version":3,"names":["eventFromEnvelope","env","types","event","forEachEnvelopeItem","item","type","includes","Array","isArray","undefined","makeOverrideReleaseTransport","createTransport","release","options","transport","send","envelope","flush","timeout","makeMultiplexedTransport","matcher","fallbackTransport","otherTransports","getTransport","dsn","key","validatedDsn","dsnFromString","url","getEnvelopeEndpointWithUrlEncodedAuth","getEvent","eventTypes","length","transports","map","result","filter","t","push","results","Promise","all","allTransports","Object","keys","every","r"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/transports/multiplexed.ts"],"sourcesContent":["import type {\n  BaseTransportOptions,\n  Envelope,\n  EnvelopeItemType,\n  Event,\n  EventItem,\n  Transport,\n  TransportMakeRequestResponse,\n} from '@sentry/types';\nimport { dsnFromString, forEachEnvelopeItem } from '@sentry/utils';\n\nimport { getEnvelopeEndpointWithUrlEncodedAuth } from '../api';\n\ninterface MatchParam {\n  /** The envelope to be sent */\n  envelope: Envelope;\n  /**\n   * A function that returns an event from the envelope if one exists. You can optionally pass an array of envelope item\n   * types to filter by - only envelopes matching the given types will be multiplexed.\n   * Allowed values are: 'event', 'transaction', 'profile', 'replay_event'\n   *\n   * @param types Defaults to ['event']\n   */\n  getEvent(types?: EnvelopeItemType[]): Event | undefined;\n}\n\ntype RouteTo = { dsn: string; release: string };\ntype Matcher = (param: MatchParam) => (string | RouteTo)[];\n\n/**\n * Gets an event from an envelope.\n *\n * This is only exported for use in the tests\n */\nexport function eventFromEnvelope(env: Envelope, types: EnvelopeItemType[]): Event | undefined {\n  let event: Event | undefined;\n\n  forEachEnvelopeItem(env, (item, type) => {\n    if (types.includes(type)) {\n      event = Array.isArray(item) ? (item as EventItem)[1] : undefined;\n    }\n    // bail out if we found an event\n    return !!event;\n  });\n\n  return event;\n}\n\n/**\n * Creates a transport that overrides the release on all events.\n */\nfunction makeOverrideReleaseTransport<TO extends BaseTransportOptions>(\n  createTransport: (options: TO) => Transport,\n  release: string,\n): (options: TO) => Transport {\n  return options => {\n    const transport = createTransport(options);\n\n    return {\n      send: async (envelope: Envelope): Promise<void | TransportMakeRequestResponse> => {\n        const event = eventFromEnvelope(envelope, ['event', 'transaction', 'profile', 'replay_event']);\n\n        if (event) {\n          event.release = release;\n        }\n        return transport.send(envelope);\n      },\n      flush: timeout => transport.flush(timeout),\n    };\n  };\n}\n\n/**\n * Creates a transport that can send events to different DSNs depending on the envelope contents.\n */\nexport function makeMultiplexedTransport<TO extends BaseTransportOptions>(\n  createTransport: (options: TO) => Transport,\n  matcher: Matcher,\n): (options: TO) => Transport {\n  return options => {\n    const fallbackTransport = createTransport(options);\n    const otherTransports: Record<string, Transport> = {};\n\n    function getTransport(dsn: string, release: string | undefined): Transport | undefined {\n      // We create a transport for every unique dsn/release combination as there may be code from multiple releases in\n      // use at the same time\n      const key = release ? `${dsn}:${release}` : dsn;\n\n      if (!otherTransports[key]) {\n        const validatedDsn = dsnFromString(dsn);\n        if (!validatedDsn) {\n          return undefined;\n        }\n        const url = getEnvelopeEndpointWithUrlEncodedAuth(validatedDsn);\n\n        otherTransports[key] = release\n          ? makeOverrideReleaseTransport(createTransport, release)({ ...options, url })\n          : createTransport({ ...options, url });\n      }\n\n      return otherTransports[key];\n    }\n\n    async function send(envelope: Envelope): Promise<void | TransportMakeRequestResponse> {\n      function getEvent(types?: EnvelopeItemType[]): Event | undefined {\n        const eventTypes: EnvelopeItemType[] = types && types.length ? types : ['event'];\n        return eventFromEnvelope(envelope, eventTypes);\n      }\n\n      const transports = matcher({ envelope, getEvent })\n        .map(result => {\n          if (typeof result === 'string') {\n            return getTransport(result, undefined);\n          } else {\n            return getTransport(result.dsn, result.release);\n          }\n        })\n        .filter((t): t is Transport => !!t);\n\n      // If we have no transports to send to, use the fallback transport\n      if (transports.length === 0) {\n        transports.push(fallbackTransport);\n      }\n\n      const results = await Promise.all(transports.map(transport => transport.send(envelope)));\n\n      return results[0];\n    }\n\n    async function flush(timeout: number | undefined): Promise<boolean> {\n      const allTransports = [...Object.keys(otherTransports).map(dsn => otherTransports[dsn]), fallbackTransport];\n      const results = await Promise.all(allTransports.map(transport => transport.flush(timeout)));\n      return results.every(r => r);\n    }\n\n    return {\n      send,\n      flush,\n    };\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}