{"ast":null,"code":"import { getClient } from '@sentry/core';\nimport { addExceptionMechanism, resolvedSyncPromise, isErrorEvent, isDOMError, isDOMException, addExceptionTypeValue, isError, isPlainObject, isEvent, isParameterizedString, normalizeToSize, extractExceptionKeysForMessage } from '@sentry/utils';\n\n/**\n * This function creates an exception from a JavaScript Error\n */\nfunction exceptionFromError(stackParser, ex) {\n  // Get the frames first since Opera can lose the stack if we touch anything else first\n  const frames = parseStackFrames(stackParser, ex);\n  const exception = {\n    type: ex && ex.name,\n    value: extractMessage(ex)\n  };\n  if (frames.length) {\n    exception.stacktrace = {\n      frames\n    };\n  }\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n  return exception;\n}\n\n/**\n * @hidden\n */\nfunction eventFromPlainObject(stackParser, exception, syntheticException, isUnhandledRejection) {\n  const client = getClient();\n  const normalizeDepth = client && client.getOptions().normalizeDepth;\n  const event = {\n    exception: {\n      values: [{\n        type: isEvent(exception) ? exception.constructor.name : isUnhandledRejection ? 'UnhandledRejection' : 'Error',\n        value: getNonErrorObjectExceptionValue(exception, {\n          isUnhandledRejection\n        })\n      }]\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception, normalizeDepth)\n    }\n  };\n  if (syntheticException) {\n    const frames = parseStackFrames(stackParser, syntheticException);\n    if (frames.length) {\n      // event.exception.values[0] has been set above\n      event.exception.values[0].stacktrace = {\n        frames\n      };\n    }\n  }\n  return event;\n}\n\n/**\n * @hidden\n */\nfunction eventFromError(stackParser, ex) {\n  return {\n    exception: {\n      values: [exceptionFromError(stackParser, ex)]\n    }\n  };\n}\n\n/** Parses stack frames from an error */\nfunction parseStackFrames(stackParser, ex) {\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  const stacktrace = ex.stacktrace || ex.stack || '';\n  const popSize = getPopSize(ex);\n  try {\n    return stackParser(stacktrace, popSize);\n  } catch (e) {\n    // no-empty\n  }\n  return [];\n}\n\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i;\nfunction getPopSize(ex) {\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      return ex.framesToPop;\n    }\n    if (reactMinifiedRegexp.test(ex.message)) {\n      return 1;\n    }\n  }\n  return 0;\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\nfunction extractMessage(ex) {\n  const message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n\n/**\n * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n * @hidden\n */\nfunction eventFromException(stackParser, exception, hint, attachStacktrace) {\n  const syntheticException = hint && hint.syntheticException || undefined;\n  const event = eventFromUnknownInput(stackParser, exception, syntheticException, attachStacktrace);\n  addExceptionMechanism(event); // defaults to { type: 'generic', handled: true }\n  event.level = 'error';\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nfunction eventFromMessage(stackParser, message,\n// eslint-disable-next-line deprecation/deprecation\nlevel = 'info', hint, attachStacktrace) {\n  const syntheticException = hint && hint.syntheticException || undefined;\n  const event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n  event.level = level;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * @hidden\n */\nfunction eventFromUnknownInput(stackParser, exception, syntheticException, attachStacktrace, isUnhandledRejection) {\n  let event;\n  if (isErrorEvent(exception) && exception.error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    const errorEvent = exception;\n    return eventFromError(stackParser, errorEvent.error);\n  }\n\n  // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name\n  // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be\n  // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.\n  //\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n  // https://webidl.spec.whatwg.org/#es-DOMException-specialness\n  if (isDOMError(exception) || isDOMException(exception)) {\n    const domException = exception;\n    if ('stack' in exception) {\n      event = eventFromError(stackParser, exception);\n    } else {\n      const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n      const message = domException.message ? `${name}: ${domException.message}` : name;\n      event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n      addExceptionTypeValue(event, message);\n    }\n    if ('code' in domException) {\n      // eslint-disable-next-line deprecation/deprecation\n      event.tags = {\n        ...event.tags,\n        'DOMException.code': `${domException.code}`\n      };\n    }\n    return event;\n  }\n  if (isError(exception)) {\n    // we have a real Error object, do nothing\n    return eventFromError(stackParser, exception);\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it's a plain object or an instance of `Event` (the built-in JS kind, not this SDK's `Event` type), serialize\n    // it manually. This will allow us to group events based on top-level keys which is much better than creating a new\n    // group on any key/value change.\n    const objectException = exception;\n    event = eventFromPlainObject(stackParser, objectException, syntheticException, isUnhandledRejection);\n    addExceptionMechanism(event, {\n      synthetic: true\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(stackParser, exception, syntheticException, attachStacktrace);\n  addExceptionTypeValue(event, `${exception}`, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true\n  });\n  return event;\n}\n\n/**\n * @hidden\n */\nfunction eventFromString(stackParser, message, syntheticException, attachStacktrace) {\n  const event = {};\n  if (attachStacktrace && syntheticException) {\n    const frames = parseStackFrames(stackParser, syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [{\n          value: message,\n          stacktrace: {\n            frames\n          }\n        }]\n      };\n    }\n  }\n  if (isParameterizedString(message)) {\n    const {\n      __sentry_template_string__,\n      __sentry_template_values__\n    } = message;\n    event.logentry = {\n      message: __sentry_template_string__,\n      params: __sentry_template_values__\n    };\n    return event;\n  }\n  event.message = message;\n  return event;\n}\nfunction getNonErrorObjectExceptionValue(exception, {\n  isUnhandledRejection\n}) {\n  const keys = extractExceptionKeysForMessage(exception);\n  const captureType = isUnhandledRejection ? 'promise rejection' : 'exception';\n\n  // Some ErrorEvent instances do not have an `error` property, which is why they are not handled before\n  // We still want to try to get a decent message for these cases\n  if (isErrorEvent(exception)) {\n    return `Event \\`ErrorEvent\\` captured as ${captureType} with message \\`${exception.message}\\``;\n  }\n  if (isEvent(exception)) {\n    const className = getObjectClassName(exception);\n    return `Event \\`${className}\\` (type=${exception.type}) captured as ${captureType}`;\n  }\n  return `Object captured as ${captureType} with keys: ${keys}`;\n}\nfunction getObjectClassName(obj) {\n  try {\n    const prototype = Object.getPrototypeOf(obj);\n    return prototype ? prototype.constructor.name : undefined;\n  } catch (e) {\n    // ignore errors here\n  }\n}\nexport { eventFromError, eventFromException, eventFromMessage, eventFromPlainObject, eventFromString, eventFromUnknownInput, exceptionFromError, parseStackFrames };","map":{"version":3,"names":["exceptionFromError","stackParser","ex","frames","parseStackFrames","exception","type","name","value","extractMessage","length","stacktrace","undefined","eventFromPlainObject","syntheticException","isUnhandledRejection","client","getClient","normalizeDepth","getOptions","event","values","isEvent","constructor","getNonErrorObjectExceptionValue","extra","__serialized__","normalizeToSize","eventFromError","stack","popSize","getPopSize","e","reactMinifiedRegexp","framesToPop","test","message","error","eventFromException","hint","attachStacktrace","eventFromUnknownInput","addExceptionMechanism","level","event_id","resolvedSyncPromise","eventFromMessage","eventFromString","isErrorEvent","errorEvent","isDOMError","isDOMException","domException","addExceptionTypeValue","tags","code","isError","isPlainObject","objectException","synthetic","isParameterizedString","__sentry_template_string__","__sentry_template_values__","logentry","params","keys","extractExceptionKeysForMessage","captureType","className","getObjectClassName","obj","prototype","Object","getPrototypeOf"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/src/eventbuilder.ts"],"sourcesContent":["import { getClient } from '@sentry/core';\nimport type {\n  Event,\n  EventHint,\n  Exception,\n  ParameterizedString,\n  Severity,\n  SeverityLevel,\n  StackFrame,\n  StackParser,\n} from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  extractExceptionKeysForMessage,\n  isDOMError,\n  isDOMException,\n  isError,\n  isErrorEvent,\n  isEvent,\n  isParameterizedString,\n  isPlainObject,\n  normalizeToSize,\n  resolvedSyncPromise,\n} from '@sentry/utils';\n\ntype Prototype = { constructor: (...args: unknown[]) => unknown };\n\n/**\n * This function creates an exception from a JavaScript Error\n */\nexport function exceptionFromError(stackParser: StackParser, ex: Error): Exception {\n  // Get the frames first since Opera can lose the stack if we touch anything else first\n  const frames = parseStackFrames(stackParser, ex);\n\n  const exception: Exception = {\n    type: ex && ex.name,\n    value: extractMessage(ex),\n  };\n\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\n/**\n * @hidden\n */\nexport function eventFromPlainObject(\n  stackParser: StackParser,\n  exception: Record<string, unknown>,\n  syntheticException?: Error,\n  isUnhandledRejection?: boolean,\n): Event {\n  const client = getClient();\n  const normalizeDepth = client && client.getOptions().normalizeDepth;\n\n  const event: Event = {\n    exception: {\n      values: [\n        {\n          type: isEvent(exception) ? exception.constructor.name : isUnhandledRejection ? 'UnhandledRejection' : 'Error',\n          value: getNonErrorObjectExceptionValue(exception, { isUnhandledRejection }),\n        },\n      ],\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception, normalizeDepth),\n    },\n  };\n\n  if (syntheticException) {\n    const frames = parseStackFrames(stackParser, syntheticException);\n    if (frames.length) {\n      // event.exception.values[0] has been set above\n      (event.exception as { values: Exception[] }).values[0].stacktrace = { frames };\n    }\n  }\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromError(stackParser: StackParser, ex: Error): Event {\n  return {\n    exception: {\n      values: [exceptionFromError(stackParser, ex)],\n    },\n  };\n}\n\n/** Parses stack frames from an error */\nexport function parseStackFrames(\n  stackParser: StackParser,\n  ex: Error & { framesToPop?: number; stacktrace?: string },\n): StackFrame[] {\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  const stacktrace = ex.stacktrace || ex.stack || '';\n\n  const popSize = getPopSize(ex);\n\n  try {\n    return stackParser(stacktrace, popSize);\n  } catch (e) {\n    // no-empty\n  }\n\n  return [];\n}\n\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i;\n\nfunction getPopSize(ex: Error & { framesToPop?: number }): number {\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      return ex.framesToPop;\n    }\n\n    if (reactMinifiedRegexp.test(ex.message)) {\n      return 1;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\nfunction extractMessage(ex: Error & { message: { error?: Error } }): string {\n  const message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n\n/**\n * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n * @hidden\n */\nexport function eventFromException(\n  stackParser: StackParser,\n  exception: unknown,\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromUnknownInput(stackParser, exception, syntheticException, attachStacktrace);\n  addExceptionMechanism(event); // defaults to { type: 'generic', handled: true }\n  event.level = 'error';\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  stackParser: StackParser,\n  message: ParameterizedString,\n  // eslint-disable-next-line deprecation/deprecation\n  level: Severity | SeverityLevel = 'info',\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n  event.level = level;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * @hidden\n */\nexport function eventFromUnknownInput(\n  stackParser: StackParser,\n  exception: unknown,\n  syntheticException?: Error,\n  attachStacktrace?: boolean,\n  isUnhandledRejection?: boolean,\n): Event {\n  let event: Event;\n\n  if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    const errorEvent = exception as ErrorEvent;\n    return eventFromError(stackParser, errorEvent.error as Error);\n  }\n\n  // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name\n  // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be\n  // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.\n  //\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n  // https://webidl.spec.whatwg.org/#es-DOMException-specialness\n  if (isDOMError(exception) || isDOMException(exception as DOMException)) {\n    const domException = exception as DOMException;\n\n    if ('stack' in (exception as Error)) {\n      event = eventFromError(stackParser, exception as Error);\n    } else {\n      const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n      const message = domException.message ? `${name}: ${domException.message}` : name;\n      event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n      addExceptionTypeValue(event, message);\n    }\n    if ('code' in domException) {\n      // eslint-disable-next-line deprecation/deprecation\n      event.tags = { ...event.tags, 'DOMException.code': `${domException.code}` };\n    }\n\n    return event;\n  }\n  if (isError(exception)) {\n    // we have a real Error object, do nothing\n    return eventFromError(stackParser, exception);\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it's a plain object or an instance of `Event` (the built-in JS kind, not this SDK's `Event` type), serialize\n    // it manually. This will allow us to group events based on top-level keys which is much better than creating a new\n    // group on any key/value change.\n    const objectException = exception as Record<string, unknown>;\n    event = eventFromPlainObject(stackParser, objectException, syntheticException, isUnhandledRejection);\n    addExceptionMechanism(event, {\n      synthetic: true,\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(stackParser, exception as string, syntheticException, attachStacktrace);\n  addExceptionTypeValue(event, `${exception}`, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true,\n  });\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromString(\n  stackParser: StackParser,\n  message: ParameterizedString,\n  syntheticException?: Error,\n  attachStacktrace?: boolean,\n): Event {\n  const event: Event = {};\n\n  if (attachStacktrace && syntheticException) {\n    const frames = parseStackFrames(stackParser, syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [{ value: message, stacktrace: { frames } }],\n      };\n    }\n  }\n\n  if (isParameterizedString(message)) {\n    const { __sentry_template_string__, __sentry_template_values__ } = message;\n\n    event.logentry = {\n      message: __sentry_template_string__,\n      params: __sentry_template_values__,\n    };\n    return event;\n  }\n\n  event.message = message;\n  return event;\n}\n\nfunction getNonErrorObjectExceptionValue(\n  exception: Record<string, unknown>,\n  { isUnhandledRejection }: { isUnhandledRejection?: boolean },\n): string {\n  const keys = extractExceptionKeysForMessage(exception);\n  const captureType = isUnhandledRejection ? 'promise rejection' : 'exception';\n\n  // Some ErrorEvent instances do not have an `error` property, which is why they are not handled before\n  // We still want to try to get a decent message for these cases\n  if (isErrorEvent(exception)) {\n    return `Event \\`ErrorEvent\\` captured as ${captureType} with message \\`${exception.message}\\``;\n  }\n\n  if (isEvent(exception)) {\n    const className = getObjectClassName(exception);\n    return `Event \\`${className}\\` (type=${exception.type}) captured as ${captureType}`;\n  }\n\n  return `Object captured as ${captureType} with keys: ${keys}`;\n}\n\nfunction getObjectClassName(obj: unknown): string | undefined | void {\n  try {\n    const prototype: Prototype | null = Object.getPrototypeOf(obj);\n    return prototype ? prototype.constructor.name : undefined;\n  } catch (e) {\n    // ignore errors here\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}