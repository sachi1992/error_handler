{"ast":null,"code":"import { bindReporter } from './lib/bindReporter.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\nimport { initInteractionCountPolyfill, getInteractionCount } from './lib/polyfills/interactionCountPolyfill.js';\n\n/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns the interaction count since the last bfcache restore (or for the\n * full page lifecycle if there were no bfcache restores).\n */\nconst getInteractionCountForNavigation = () => {\n  return getInteractionCount();\n};\n\n// To prevent unnecessary memory usage on pages with lots of interactions,\n// store at most 10 of the longest interactions to consider as INP candidates.\nconst MAX_INTERACTIONS_TO_CONSIDER = 10;\n\n// A list of longest interactions on the page (by latency) sorted so the\n// longest one is first. The list is as most MAX_INTERACTIONS_TO_CONSIDER long.\nconst longestInteractionList = [];\n\n// A mapping of longest interactions by their interaction ID.\n// This is used for faster lookup.\nconst longestInteractionMap = {};\n\n/**\n * Takes a performance entry and adds it to the list of worst interactions\n * if its duration is long enough to make it among the worst. If the\n * entry is part of an existing interaction, it is merged and the latency\n * and entries list is updated as needed.\n */\nconst processEntry = entry => {\n  // The least-long of the 10 longest interactions.\n  const minLongestInteraction = longestInteractionList[longestInteractionList.length - 1];\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const existingInteraction = longestInteractionMap[entry.interactionId];\n\n  // Only process the entry if it's possibly one of the ten longest,\n  // or if it's part of an existing interaction.\n  if (existingInteraction || longestInteractionList.length < MAX_INTERACTIONS_TO_CONSIDER || entry.duration > minLongestInteraction.latency) {\n    // If the interaction already exists, update it. Otherwise create one.\n    if (existingInteraction) {\n      existingInteraction.entries.push(entry);\n      existingInteraction.latency = Math.max(existingInteraction.latency, entry.duration);\n    } else {\n      const interaction = {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        id: entry.interactionId,\n        latency: entry.duration,\n        entries: [entry]\n      };\n      longestInteractionMap[interaction.id] = interaction;\n      longestInteractionList.push(interaction);\n    }\n\n    // Sort the entries by latency (descending) and keep only the top ten.\n    longestInteractionList.sort((a, b) => b.latency - a.latency);\n    longestInteractionList.splice(MAX_INTERACTIONS_TO_CONSIDER).forEach(i => {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete longestInteractionMap[i.id];\n    });\n  }\n};\n\n/**\n * Returns the estimated p98 longest interaction based on the stored\n * interaction candidates and the interaction count for the current page.\n */\nconst estimateP98LongestInteraction = () => {\n  const candidateInteractionIndex = Math.min(longestInteractionList.length - 1, Math.floor(getInteractionCountForNavigation() / 50));\n  return longestInteractionList[candidateInteractionIndex];\n};\n\n/**\n * Calculates the [INP](https://web.dev/responsiveness/) value for the current\n * page and calls the `callback` function once the value is ready, along with\n * the `event` performance entries reported for that interaction. The reported\n * value is a `DOMHighResTimeStamp`.\n *\n * A custom `durationThreshold` configuration option can optionally be passed to\n * control what `event-timing` entries are considered for INP reporting. The\n * default threshold is `40`, which means INP scores of less than 40 are\n * reported as 0. Note that this will not affect your 75th percentile INP value\n * unless that value is also less than 40 (well below the recommended\n * [good](https://web.dev/inp/#what-is-a-good-inp-score) threshold).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** INP should be continually monitored for changes throughout\n * the entire lifespan of a pageâ€”including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nconst onINP = (onReport, opts) => {\n  // Set defaults\n  // eslint-disable-next-line no-param-reassign\n  opts = opts || {};\n\n  // https://web.dev/inp/#what's-a-%22good%22-inp-value\n  // const thresholds = [200, 500];\n\n  // TODO(philipwalton): remove once the polyfill is no longer needed.\n  initInteractionCountPolyfill();\n  const metric = initMetric('INP');\n  // eslint-disable-next-line prefer-const\n  let report;\n  const handleEntries = entries => {\n    entries.forEach(entry => {\n      if (entry.interactionId) {\n        processEntry(entry);\n      }\n\n      // Entries of type `first-input` don't currently have an `interactionId`,\n      // so to consider them in INP we have to first check that an existing\n      // entry doesn't match the `duration` and `startTime`.\n      // Note that this logic assumes that `event` entries are dispatched\n      // before `first-input` entries. This is true in Chrome but it is not\n      // true in Firefox; however, Firefox doesn't support interactionId, so\n      // it's not an issue at the moment.\n      // TODO(philipwalton): remove once crbug.com/1325826 is fixed.\n      if (entry.entryType === 'first-input') {\n        const noMatchingEntry = !longestInteractionList.some(interaction => {\n          return interaction.entries.some(prevEntry => {\n            return entry.duration === prevEntry.duration && entry.startTime === prevEntry.startTime;\n          });\n        });\n        if (noMatchingEntry) {\n          processEntry(entry);\n        }\n      }\n    });\n    const inp = estimateP98LongestInteraction();\n    if (inp && inp.latency !== metric.value) {\n      metric.value = inp.latency;\n      metric.entries = inp.entries;\n      report();\n    }\n  };\n  const po = observe('event', handleEntries, {\n    // Event Timing entries have their durations rounded to the nearest 8ms,\n    // so a duration of 40ms would be any event that spans 2.5 or more frames\n    // at 60Hz. This threshold is chosen to strike a balance between usefulness\n    // and performance. Running this callback for any interaction that spans\n    // just one or two frames is likely not worth the insight that could be\n    // gained.\n    durationThreshold: opts.durationThreshold || 40\n  });\n  report = bindReporter(onReport, metric, opts.reportAllChanges);\n  if (po) {\n    // Also observe entries of type `first-input`. This is useful in cases\n    // where the first interaction is less than the `durationThreshold`.\n    po.observe({\n      type: 'first-input',\n      buffered: true\n    });\n    onHidden(() => {\n      handleEntries(po.takeRecords());\n\n      // If the interaction count shows that there were interactions but\n      // none were captured by the PerformanceObserver, report a latency of 0.\n      if (metric.value < 0 && getInteractionCountForNavigation() > 0) {\n        metric.value = 0;\n        metric.entries = [];\n      }\n      report(true);\n    });\n  }\n};\nexport { onINP };","map":{"version":3,"names":["getInteractionCountForNavigation","getInteractionCount","MAX_INTERACTIONS_TO_CONSIDER","longestInteractionList","longestInteractionMap","processEntry","entry","minLongestInteraction","length","existingInteraction","interactionId","duration","latency","entries","push","Math","max","interaction","id","sort","a","b","splice","forEach","i","estimateP98LongestInteraction","candidateInteractionIndex","min","floor","onINP","onReport","opts","initInteractionCountPolyfill","metric","initMetric","report","handleEntries","entryType","noMatchingEntry","some","prevEntry","startTime","inp","value","po","observe","durationThreshold","bindReporter","reportAllChanges","type","buffered","onHidden","takeRecords"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry-internal/src/browser/web-vitals/getINP.ts"],"sourcesContent":["/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { getInteractionCount, initInteractionCountPolyfill } from './lib/polyfills/interactionCountPolyfill';\nimport type { ReportCallback, ReportOpts } from './types';\nimport type { INPMetric } from './types/inp';\n\ninterface Interaction {\n  id: number;\n  latency: number;\n  entries: PerformanceEventTiming[];\n}\n\n/**\n * Returns the interaction count since the last bfcache restore (or for the\n * full page lifecycle if there were no bfcache restores).\n */\nconst getInteractionCountForNavigation = (): number => {\n  return getInteractionCount();\n};\n\n// To prevent unnecessary memory usage on pages with lots of interactions,\n// store at most 10 of the longest interactions to consider as INP candidates.\nconst MAX_INTERACTIONS_TO_CONSIDER = 10;\n\n// A list of longest interactions on the page (by latency) sorted so the\n// longest one is first. The list is as most MAX_INTERACTIONS_TO_CONSIDER long.\nconst longestInteractionList: Interaction[] = [];\n\n// A mapping of longest interactions by their interaction ID.\n// This is used for faster lookup.\nconst longestInteractionMap: { [interactionId: string]: Interaction } = {};\n\n/**\n * Takes a performance entry and adds it to the list of worst interactions\n * if its duration is long enough to make it among the worst. If the\n * entry is part of an existing interaction, it is merged and the latency\n * and entries list is updated as needed.\n */\nconst processEntry = (entry: PerformanceEventTiming): void => {\n  // The least-long of the 10 longest interactions.\n  const minLongestInteraction = longestInteractionList[longestInteractionList.length - 1];\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const existingInteraction = longestInteractionMap[entry.interactionId!];\n\n  // Only process the entry if it's possibly one of the ten longest,\n  // or if it's part of an existing interaction.\n  if (\n    existingInteraction ||\n    longestInteractionList.length < MAX_INTERACTIONS_TO_CONSIDER ||\n    entry.duration > minLongestInteraction.latency\n  ) {\n    // If the interaction already exists, update it. Otherwise create one.\n    if (existingInteraction) {\n      existingInteraction.entries.push(entry);\n      existingInteraction.latency = Math.max(existingInteraction.latency, entry.duration);\n    } else {\n      const interaction = {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        id: entry.interactionId!,\n        latency: entry.duration,\n        entries: [entry],\n      };\n      longestInteractionMap[interaction.id] = interaction;\n      longestInteractionList.push(interaction);\n    }\n\n    // Sort the entries by latency (descending) and keep only the top ten.\n    longestInteractionList.sort((a, b) => b.latency - a.latency);\n    longestInteractionList.splice(MAX_INTERACTIONS_TO_CONSIDER).forEach(i => {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete longestInteractionMap[i.id];\n    });\n  }\n};\n\n/**\n * Returns the estimated p98 longest interaction based on the stored\n * interaction candidates and the interaction count for the current page.\n */\nconst estimateP98LongestInteraction = (): Interaction => {\n  const candidateInteractionIndex = Math.min(\n    longestInteractionList.length - 1,\n    Math.floor(getInteractionCountForNavigation() / 50),\n  );\n\n  return longestInteractionList[candidateInteractionIndex];\n};\n\n/**\n * Calculates the [INP](https://web.dev/responsiveness/) value for the current\n * page and calls the `callback` function once the value is ready, along with\n * the `event` performance entries reported for that interaction. The reported\n * value is a `DOMHighResTimeStamp`.\n *\n * A custom `durationThreshold` configuration option can optionally be passed to\n * control what `event-timing` entries are considered for INP reporting. The\n * default threshold is `40`, which means INP scores of less than 40 are\n * reported as 0. Note that this will not affect your 75th percentile INP value\n * unless that value is also less than 40 (well below the recommended\n * [good](https://web.dev/inp/#what-is-a-good-inp-score) threshold).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** INP should be continually monitored for changes throughout\n * the entire lifespan of a pageâ€”including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nexport const onINP = (onReport: ReportCallback, opts?: ReportOpts): void => {\n  // Set defaults\n  // eslint-disable-next-line no-param-reassign\n  opts = opts || {};\n\n  // https://web.dev/inp/#what's-a-%22good%22-inp-value\n  // const thresholds = [200, 500];\n\n  // TODO(philipwalton): remove once the polyfill is no longer needed.\n  initInteractionCountPolyfill();\n\n  const metric = initMetric('INP');\n  // eslint-disable-next-line prefer-const\n  let report: ReturnType<typeof bindReporter>;\n\n  const handleEntries = (entries: INPMetric['entries']): void => {\n    entries.forEach(entry => {\n      if (entry.interactionId) {\n        processEntry(entry);\n      }\n\n      // Entries of type `first-input` don't currently have an `interactionId`,\n      // so to consider them in INP we have to first check that an existing\n      // entry doesn't match the `duration` and `startTime`.\n      // Note that this logic assumes that `event` entries are dispatched\n      // before `first-input` entries. This is true in Chrome but it is not\n      // true in Firefox; however, Firefox doesn't support interactionId, so\n      // it's not an issue at the moment.\n      // TODO(philipwalton): remove once crbug.com/1325826 is fixed.\n      if (entry.entryType === 'first-input') {\n        const noMatchingEntry = !longestInteractionList.some(interaction => {\n          return interaction.entries.some(prevEntry => {\n            return entry.duration === prevEntry.duration && entry.startTime === prevEntry.startTime;\n          });\n        });\n        if (noMatchingEntry) {\n          processEntry(entry);\n        }\n      }\n    });\n\n    const inp = estimateP98LongestInteraction();\n\n    if (inp && inp.latency !== metric.value) {\n      metric.value = inp.latency;\n      metric.entries = inp.entries;\n      report();\n    }\n  };\n\n  const po = observe('event', handleEntries, {\n    // Event Timing entries have their durations rounded to the nearest 8ms,\n    // so a duration of 40ms would be any event that spans 2.5 or more frames\n    // at 60Hz. This threshold is chosen to strike a balance between usefulness\n    // and performance. Running this callback for any interaction that spans\n    // just one or two frames is likely not worth the insight that could be\n    // gained.\n    durationThreshold: opts.durationThreshold || 40,\n  } as PerformanceObserverInit);\n\n  report = bindReporter(onReport, metric, opts.reportAllChanges);\n\n  if (po) {\n    // Also observe entries of type `first-input`. This is useful in cases\n    // where the first interaction is less than the `durationThreshold`.\n    po.observe({ type: 'first-input', buffered: true });\n\n    onHidden(() => {\n      handleEntries(po.takeRecords() as INPMetric['entries']);\n\n      // If the interaction count shows that there were interactions but\n      // none were captured by the PerformanceObserver, report a latency of 0.\n      if (metric.value < 0 && getInteractionCountForNavigation() > 0) {\n        metric.value = 0;\n        metric.entries = [];\n      }\n\n      report(true);\n    });\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}