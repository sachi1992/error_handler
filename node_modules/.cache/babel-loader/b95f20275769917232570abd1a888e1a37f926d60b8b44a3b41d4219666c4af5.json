{"ast":null,"code":"import { isInstanceOf } from './is.js';\nimport { truncate } from './string.js';\n\n/**\n * Creates exceptions inside `event.exception.values` for errors that are nested on properties based on the `key` parameter.\n */\nfunction applyAggregateErrorsToEvent(exceptionFromErrorImplementation, parser, maxValueLimit = 250, key, limit, event, hint) {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return;\n  }\n\n  // Generally speaking the last item in `event.exception.values` is the exception originating from the original Error\n  const originalException = event.exception.values.length > 0 ? event.exception.values[event.exception.values.length - 1] : undefined;\n\n  // We only create exception grouping if there is an exception in the event.\n  if (originalException) {\n    event.exception.values = truncateAggregateExceptions(aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, hint.originalException, key, event.exception.values, originalException, 0), maxValueLimit);\n  }\n}\nfunction aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, error, key, prevExceptions, exception, exceptionId) {\n  if (prevExceptions.length >= limit + 1) {\n    return prevExceptions;\n  }\n  let newExceptions = [...prevExceptions];\n\n  // Recursively call this function in order to walk down a chain of errors\n  if (isInstanceOf(error[key], Error)) {\n    applyExceptionGroupFieldsForParentException(exception, exceptionId);\n    const newException = exceptionFromErrorImplementation(parser, error[key]);\n    const newExceptionId = newExceptions.length;\n    applyExceptionGroupFieldsForChildException(newException, key, newExceptionId, exceptionId);\n    newExceptions = aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, error[key], key, [newException, ...newExceptions], newException, newExceptionId);\n  }\n\n  // This will create exception grouping for AggregateErrors\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\n  if (Array.isArray(error.errors)) {\n    error.errors.forEach((childError, i) => {\n      if (isInstanceOf(childError, Error)) {\n        applyExceptionGroupFieldsForParentException(exception, exceptionId);\n        const newException = exceptionFromErrorImplementation(parser, childError);\n        const newExceptionId = newExceptions.length;\n        applyExceptionGroupFieldsForChildException(newException, `errors[${i}]`, newExceptionId, exceptionId);\n        newExceptions = aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, childError, key, [newException, ...newExceptions], newException, newExceptionId);\n      }\n    });\n  }\n  return newExceptions;\n}\nfunction applyExceptionGroupFieldsForParentException(exception, exceptionId) {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || {\n    type: 'generic',\n    handled: true\n  };\n  exception.mechanism = {\n    ...exception.mechanism,\n    ...(exception.type === 'AggregateError' && {\n      is_exception_group: true\n    }),\n    exception_id: exceptionId\n  };\n}\nfunction applyExceptionGroupFieldsForChildException(exception, source, exceptionId, parentId) {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || {\n    type: 'generic',\n    handled: true\n  };\n  exception.mechanism = {\n    ...exception.mechanism,\n    type: 'chained',\n    source,\n    exception_id: exceptionId,\n    parent_id: parentId\n  };\n}\n\n/**\n * Truncate the message (exception.value) of all exceptions in the event.\n * Because this event processor is ran after `applyClientOptions`,\n * we need to truncate the message of the added exceptions here.\n */\nfunction truncateAggregateExceptions(exceptions, maxValueLength) {\n  return exceptions.map(exception => {\n    if (exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n    return exception;\n  });\n}\nexport { applyAggregateErrorsToEvent };","map":{"version":3,"names":["applyAggregateErrorsToEvent","exceptionFromErrorImplementation","parser","maxValueLimit","key","limit","event","hint","exception","values","isInstanceOf","originalException","Error","length","undefined","truncateAggregateExceptions","aggregateExceptionsFromError","error","prevExceptions","exceptionId","newExceptions","applyExceptionGroupFieldsForParentException","newException","newExceptionId","applyExceptionGroupFieldsForChildException","Array","isArray","errors","forEach","childError","i","mechanism","type","handled","is_exception_group","exception_id","source","parentId","parent_id","exceptions","maxValueLength","map","value","truncate"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/aggregate-errors.ts"],"sourcesContent":["import type { Event, EventHint, Exception, ExtendedError, StackParser } from '@sentry/types';\n\nimport { isInstanceOf } from './is';\nimport { truncate } from './string';\n\n/**\n * Creates exceptions inside `event.exception.values` for errors that are nested on properties based on the `key` parameter.\n */\nexport function applyAggregateErrorsToEvent(\n  exceptionFromErrorImplementation: (stackParser: StackParser, ex: Error) => Exception,\n  parser: StackParser,\n  maxValueLimit: number = 250,\n  key: string,\n  limit: number,\n  event: Event,\n  hint?: EventHint,\n): void {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return;\n  }\n\n  // Generally speaking the last item in `event.exception.values` is the exception originating from the original Error\n  const originalException: Exception | undefined =\n    event.exception.values.length > 0 ? event.exception.values[event.exception.values.length - 1] : undefined;\n\n  // We only create exception grouping if there is an exception in the event.\n  if (originalException) {\n    event.exception.values = truncateAggregateExceptions(\n      aggregateExceptionsFromError(\n        exceptionFromErrorImplementation,\n        parser,\n        limit,\n        hint.originalException as ExtendedError,\n        key,\n        event.exception.values,\n        originalException,\n        0,\n      ),\n      maxValueLimit,\n    );\n  }\n}\n\nfunction aggregateExceptionsFromError(\n  exceptionFromErrorImplementation: (stackParser: StackParser, ex: Error) => Exception,\n  parser: StackParser,\n  limit: number,\n  error: ExtendedError,\n  key: string,\n  prevExceptions: Exception[],\n  exception: Exception,\n  exceptionId: number,\n): Exception[] {\n  if (prevExceptions.length >= limit + 1) {\n    return prevExceptions;\n  }\n\n  let newExceptions = [...prevExceptions];\n\n  // Recursively call this function in order to walk down a chain of errors\n  if (isInstanceOf(error[key], Error)) {\n    applyExceptionGroupFieldsForParentException(exception, exceptionId);\n    const newException = exceptionFromErrorImplementation(parser, error[key]);\n    const newExceptionId = newExceptions.length;\n    applyExceptionGroupFieldsForChildException(newException, key, newExceptionId, exceptionId);\n    newExceptions = aggregateExceptionsFromError(\n      exceptionFromErrorImplementation,\n      parser,\n      limit,\n      error[key],\n      key,\n      [newException, ...newExceptions],\n      newException,\n      newExceptionId,\n    );\n  }\n\n  // This will create exception grouping for AggregateErrors\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\n  if (Array.isArray(error.errors)) {\n    error.errors.forEach((childError, i) => {\n      if (isInstanceOf(childError, Error)) {\n        applyExceptionGroupFieldsForParentException(exception, exceptionId);\n        const newException = exceptionFromErrorImplementation(parser, childError);\n        const newExceptionId = newExceptions.length;\n        applyExceptionGroupFieldsForChildException(newException, `errors[${i}]`, newExceptionId, exceptionId);\n        newExceptions = aggregateExceptionsFromError(\n          exceptionFromErrorImplementation,\n          parser,\n          limit,\n          childError,\n          key,\n          [newException, ...newExceptions],\n          newException,\n          newExceptionId,\n        );\n      }\n    });\n  }\n\n  return newExceptions;\n}\n\nfunction applyExceptionGroupFieldsForParentException(exception: Exception, exceptionId: number): void {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    ...(exception.type === 'AggregateError' && { is_exception_group: true }),\n    exception_id: exceptionId,\n  };\n}\n\nfunction applyExceptionGroupFieldsForChildException(\n  exception: Exception,\n  source: string,\n  exceptionId: number,\n  parentId: number | undefined,\n): void {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    type: 'chained',\n    source,\n    exception_id: exceptionId,\n    parent_id: parentId,\n  };\n}\n\n/**\n * Truncate the message (exception.value) of all exceptions in the event.\n * Because this event processor is ran after `applyClientOptions`,\n * we need to truncate the message of the added exceptions here.\n */\nfunction truncateAggregateExceptions(exceptions: Exception[], maxValueLength: number): Exception[] {\n  return exceptions.map(exception => {\n    if (exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n    return exception;\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}