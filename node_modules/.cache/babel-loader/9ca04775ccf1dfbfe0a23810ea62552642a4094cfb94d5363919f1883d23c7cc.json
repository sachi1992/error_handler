{"ast":null,"code":"import { BaseClient, applySdkMetadata } from '@sentry/core';\nimport { getSDKSource, logger, createClientReportEnvelope, dsnToString } from '@sentry/utils';\nimport { DEBUG_BUILD } from './debug-build.js';\nimport { eventFromException, eventFromMessage } from './eventbuilder.js';\nimport { WINDOW } from './helpers.js';\nimport { createUserFeedbackEnvelope } from './userfeedback.js';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see @sentry/types Options for more information.\n */\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nclass BrowserClient extends BaseClient {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  constructor(options) {\n    const sdkSource = WINDOW.SENTRY_SDK_SOURCE || getSDKSource();\n    applySdkMetadata(options, 'browser', ['browser'], sdkSource);\n    super(options);\n    if (options.sendClientReports && WINDOW.document) {\n      WINDOW.document.addEventListener('visibilitychange', () => {\n        if (WINDOW.document.visibilityState === 'hidden') {\n          this._flushOutcomes();\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  eventFromException(exception, hint) {\n    return eventFromException(this._options.stackParser, exception, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  eventFromMessage(message,\n  // eslint-disable-next-line deprecation/deprecation\n  level = 'info', hint) {\n    return eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * Sends user feedback to Sentry.\n   */\n  captureUserFeedback(feedback) {\n    if (!this._isEnabled()) {\n      DEBUG_BUILD && logger.warn('SDK not enabled, will not capture user feedback.');\n      return;\n    }\n    const envelope = createUserFeedbackEnvelope(feedback, {\n      metadata: this.getSdkMetadata(),\n      dsn: this.getDsn(),\n      tunnel: this.getOptions().tunnel\n    });\n\n    // _sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._sendEnvelope(envelope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _prepareEvent(event, hint, scope) {\n    event.platform = event.platform || 'javascript';\n    return super._prepareEvent(event, hint, scope);\n  }\n\n  /**\n   * Sends client reports as an envelope.\n   */\n  _flushOutcomes() {\n    const outcomes = this._clearOutcomes();\n    if (outcomes.length === 0) {\n      DEBUG_BUILD && logger.log('No outcomes to send');\n      return;\n    }\n\n    // This is really the only place where we want to check for a DSN and only send outcomes then\n    if (!this._dsn) {\n      DEBUG_BUILD && logger.log('No dsn provided, will not send outcomes');\n      return;\n    }\n    DEBUG_BUILD && logger.log('Sending outcomes:', outcomes);\n    const envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));\n\n    // _sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._sendEnvelope(envelope);\n  }\n}\nexport { BrowserClient };","map":{"version":3,"names":["BrowserClient","BaseClient","constructor","options","sdkSource","WINDOW","SENTRY_SDK_SOURCE","getSDKSource","applySdkMetadata","sendClientReports","document","addEventListener","visibilityState","_flushOutcomes","eventFromException","exception","hint","_options","stackParser","attachStacktrace","eventFromMessage","message","level","captureUserFeedback","feedback","_isEnabled","DEBUG_BUILD","logger","warn","envelope","createUserFeedbackEnvelope","metadata","getSdkMetadata","dsn","getDsn","tunnel","getOptions","_sendEnvelope","_prepareEvent","event","scope","platform","outcomes","_clearOutcomes","length","log","_dsn","createClientReportEnvelope","dsnToString"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/src/client.ts"],"sourcesContent":["import type { Scope } from '@sentry/core';\nimport { applySdkMetadata } from '@sentry/core';\nimport { BaseClient } from '@sentry/core';\nimport type {\n  BrowserClientProfilingOptions,\n  BrowserClientReplayOptions,\n  ClientOptions,\n  Event,\n  EventHint,\n  Options,\n  ParameterizedString,\n  Severity,\n  SeverityLevel,\n  UserFeedback,\n} from '@sentry/types';\nimport { createClientReportEnvelope, dsnToString, getSDKSource, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from './debug-build';\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { WINDOW } from './helpers';\nimport type { BrowserTransportOptions } from './transports/types';\nimport { createUserFeedbackEnvelope } from './userfeedback';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see @sentry/types Options for more information.\n */\nexport type BrowserOptions = Options<BrowserTransportOptions> &\n  BrowserClientReplayOptions &\n  BrowserClientProfilingOptions;\n\n/**\n * Configuration options for the Sentry Browser SDK Client class\n * @see BrowserClient for more information.\n */\nexport type BrowserClientOptions = ClientOptions<BrowserTransportOptions> &\n  BrowserClientReplayOptions &\n  BrowserClientProfilingOptions;\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserClientOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserClientOptions) {\n    const sdkSource = WINDOW.SENTRY_SDK_SOURCE || getSDKSource();\n    applySdkMetadata(options, 'browser', ['browser'], sdkSource);\n\n    super(options);\n\n    if (options.sendClientReports && WINDOW.document) {\n      WINDOW.document.addEventListener('visibilitychange', () => {\n        if (WINDOW.document.visibilityState === 'hidden') {\n          this._flushOutcomes();\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(this._options.stackParser, exception, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(\n    message: ParameterizedString,\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel = 'info',\n    hint?: EventHint,\n  ): PromiseLike<Event> {\n    return eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * Sends user feedback to Sentry.\n   */\n  public captureUserFeedback(feedback: UserFeedback): void {\n    if (!this._isEnabled()) {\n      DEBUG_BUILD && logger.warn('SDK not enabled, will not capture user feedback.');\n      return;\n    }\n\n    const envelope = createUserFeedbackEnvelope(feedback, {\n      metadata: this.getSdkMetadata(),\n      dsn: this.getDsn(),\n      tunnel: this.getOptions().tunnel,\n    });\n\n    // _sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._sendEnvelope(envelope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    return super._prepareEvent(event, hint, scope);\n  }\n\n  /**\n   * Sends client reports as an envelope.\n   */\n  private _flushOutcomes(): void {\n    const outcomes = this._clearOutcomes();\n\n    if (outcomes.length === 0) {\n      DEBUG_BUILD && logger.log('No outcomes to send');\n      return;\n    }\n\n    // This is really the only place where we want to check for a DSN and only send outcomes then\n    if (!this._dsn) {\n      DEBUG_BUILD && logger.log('No dsn provided, will not send outcomes');\n      return;\n    }\n\n    DEBUG_BUILD && logger.log('Sending outcomes:', outcomes);\n\n    const envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));\n\n    // _sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._sendEnvelope(envelope);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}