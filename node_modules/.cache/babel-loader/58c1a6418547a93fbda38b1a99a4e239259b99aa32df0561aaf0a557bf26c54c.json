{"ast":null,"code":"import { logger } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { getMainCarrier } from '../hub.js';\nimport { spanToTraceHeader } from '../utils/spanUtils.js';\nimport { registerErrorInstrumentation } from './errors.js';\nimport { IdleTransaction } from './idletransaction.js';\nimport { sampleTransaction } from './sampling.js';\nimport { Transaction } from './transaction.js';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders() {\n  // eslint-disable-next-line deprecation/deprecation\n  const scope = this.getScope();\n  // eslint-disable-next-line deprecation/deprecation\n  const span = scope.getSpan();\n  return span ? {\n    'sentry-trace': spanToTraceHeader(span)\n  } : {};\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(transactionContext, customSamplingContext) {\n  // eslint-disable-next-line deprecation/deprecation\n  const client = this.getClient();\n  const options = client && client.getOptions() || {};\n  const configInstrumenter = options.instrumenter || 'sentry';\n  const transactionInstrumenter = transactionContext.instrumenter || 'sentry';\n  if (configInstrumenter !== transactionInstrumenter) {\n    DEBUG_BUILD && logger.error(`A transaction was started with instrumenter=\\`${transactionInstrumenter}\\`, but the SDK is configured with the \\`${configInstrumenter}\\` instrumenter.\nThe transaction will not be sampled. Please use the ${configInstrumenter} instrumentation to start transactions.`);\n\n    // eslint-disable-next-line deprecation/deprecation\n    transactionContext.sampled = false;\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  let transaction = new Transaction(transactionContext, this);\n  transaction = sampleTransaction(transaction, options, {\n    name: transactionContext.name,\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    attributes: {\n      // eslint-disable-next-line deprecation/deprecation\n      ...transactionContext.data,\n      ...transactionContext.attributes\n    },\n    ...customSamplingContext\n  });\n  if (transaction.isRecording()) {\n    transaction.initSpanRecorder(options._experiments && options._experiments.maxSpans);\n  }\n  if (client && client.emit) {\n    client.emit('startTransaction', transaction);\n  }\n  return transaction;\n}\n\n/**\n * Create new idle transaction.\n */\nfunction startIdleTransaction(hub, transactionContext, idleTimeout, finalTimeout, onScope, customSamplingContext, heartbeatInterval, delayAutoFinishUntilSignal = false) {\n  // eslint-disable-next-line deprecation/deprecation\n  const client = hub.getClient();\n  const options = client && client.getOptions() || {};\n\n  // eslint-disable-next-line deprecation/deprecation\n  let transaction = new IdleTransaction(transactionContext, hub, idleTimeout, finalTimeout, heartbeatInterval, onScope, delayAutoFinishUntilSignal);\n  transaction = sampleTransaction(transaction, options, {\n    name: transactionContext.name,\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    attributes: {\n      // eslint-disable-next-line deprecation/deprecation\n      ...transactionContext.data,\n      ...transactionContext.attributes\n    },\n    ...customSamplingContext\n  });\n  if (transaction.isRecording()) {\n    transaction.initSpanRecorder(options._experiments && options._experiments.maxSpans);\n  }\n  if (client && client.emit) {\n    client.emit('startTransaction', transaction);\n  }\n  return transaction;\n}\n\n/**\n * Adds tracing extensions to the global hub.\n */\nfunction addTracingExtensions() {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n  registerErrorInstrumentation();\n}\nexport { addTracingExtensions, startIdleTransaction };","map":{"version":3,"names":["traceHeaders","scope","getScope","span","getSpan","spanToTraceHeader","_startTransaction","transactionContext","customSamplingContext","client","getClient","options","getOptions","configInstrumenter","instrumenter","transactionInstrumenter","DEBUG_BUILD","logger","error","sampled","transaction","Transaction","sampleTransaction","name","parentSampled","attributes","data","isRecording","initSpanRecorder","_experiments","maxSpans","emit","startIdleTransaction","hub","idleTimeout","finalTimeout","onScope","heartbeatInterval","delayAutoFinishUntilSignal","IdleTransaction","addTracingExtensions","carrier","getMainCarrier","__SENTRY__","extensions","startTransaction","registerErrorInstrumentation"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/tracing/hubextensions.ts"],"sourcesContent":["import type { ClientOptions, CustomSamplingContext, TransactionContext } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { Hub } from '../hub';\nimport { getMainCarrier } from '../hub';\nimport { spanToTraceHeader } from '../utils/spanUtils';\nimport { registerErrorInstrumentation } from './errors';\nimport { IdleTransaction } from './idletransaction';\nimport { sampleTransaction } from './sampling';\nimport { Transaction } from './transaction';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  // eslint-disable-next-line deprecation/deprecation\n  const scope = this.getScope();\n  // eslint-disable-next-line deprecation/deprecation\n  const span = scope.getSpan();\n\n  return span\n    ? {\n        'sentry-trace': spanToTraceHeader(span),\n      }\n    : {};\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  // eslint-disable-next-line deprecation/deprecation\n  const client = this.getClient();\n  const options: Partial<ClientOptions> = (client && client.getOptions()) || {};\n\n  const configInstrumenter = options.instrumenter || 'sentry';\n  const transactionInstrumenter = transactionContext.instrumenter || 'sentry';\n\n  if (configInstrumenter !== transactionInstrumenter) {\n    DEBUG_BUILD &&\n      logger.error(\n        `A transaction was started with instrumenter=\\`${transactionInstrumenter}\\`, but the SDK is configured with the \\`${configInstrumenter}\\` instrumenter.\nThe transaction will not be sampled. Please use the ${configInstrumenter} instrumentation to start transactions.`,\n      );\n\n    // eslint-disable-next-line deprecation/deprecation\n    transactionContext.sampled = false;\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  let transaction = new Transaction(transactionContext, this);\n  transaction = sampleTransaction(transaction, options, {\n    name: transactionContext.name,\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    attributes: {\n      // eslint-disable-next-line deprecation/deprecation\n      ...transactionContext.data,\n      ...transactionContext.attributes,\n    },\n    ...customSamplingContext,\n  });\n  if (transaction.isRecording()) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  if (client && client.emit) {\n    client.emit('startTransaction', transaction);\n  }\n  return transaction;\n}\n\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(\n  hub: Hub,\n  transactionContext: TransactionContext,\n  idleTimeout: number,\n  finalTimeout: number,\n  onScope?: boolean,\n  customSamplingContext?: CustomSamplingContext,\n  heartbeatInterval?: number,\n  delayAutoFinishUntilSignal: boolean = false,\n): IdleTransaction {\n  // eslint-disable-next-line deprecation/deprecation\n  const client = hub.getClient();\n  const options: Partial<ClientOptions> = (client && client.getOptions()) || {};\n\n  // eslint-disable-next-line deprecation/deprecation\n  let transaction = new IdleTransaction(\n    transactionContext,\n    hub,\n    idleTimeout,\n    finalTimeout,\n    heartbeatInterval,\n    onScope,\n    delayAutoFinishUntilSignal,\n  );\n  transaction = sampleTransaction(transaction, options, {\n    name: transactionContext.name,\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    attributes: {\n      // eslint-disable-next-line deprecation/deprecation\n      ...transactionContext.data,\n      ...transactionContext.attributes,\n    },\n    ...customSamplingContext,\n  });\n  if (transaction.isRecording()) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  if (client && client.emit) {\n    client.emit('startTransaction', transaction);\n  }\n  return transaction;\n}\n\n/**\n * Adds tracing extensions to the global hub.\n */\nexport function addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n\n  registerErrorInstrumentation();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}