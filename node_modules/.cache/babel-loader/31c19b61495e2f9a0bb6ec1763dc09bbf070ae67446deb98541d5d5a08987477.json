{"ast":null,"code":"import { logger, consoleSandbox } from '@sentry/utils';\nimport { DEBUG_BUILD } from './debug-build.js';\nimport { getCurrentScope } from './exports.js';\nimport { getCurrentHub } from './hub.js';\n\n/** A class object that can instantiate Client objects. */\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nfunction initAndBind(clientClass, options) {\n  if (options.debug === true) {\n    if (DEBUG_BUILD) {\n      logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n      });\n    }\n  }\n  const scope = getCurrentScope();\n  scope.update(options.initialScope);\n  const client = new clientClass(options);\n  setCurrentClient(client);\n  initializeClient(client);\n}\n\n/**\n * Make the given client the current client.\n */\nfunction setCurrentClient(client) {\n  // eslint-disable-next-line deprecation/deprecation\n  const hub = getCurrentHub();\n  // eslint-disable-next-line deprecation/deprecation\n  const top = hub.getStackTop();\n  top.client = client;\n  top.scope.setClient(client);\n}\n\n/**\n * Initialize the client for the current scope.\n * Make sure to call this after `setCurrentClient()`.\n */\nfunction initializeClient(client) {\n  if (client.init) {\n    client.init();\n    // TODO v8: Remove this fallback\n    // eslint-disable-next-line deprecation/deprecation\n  } else if (client.setupIntegrations) {\n    // eslint-disable-next-line deprecation/deprecation\n    client.setupIntegrations();\n  }\n}\nexport { initAndBind, setCurrentClient };","map":{"version":3,"names":["initAndBind","clientClass","options","debug","DEBUG_BUILD","logger","enable","consoleSandbox","console","warn","scope","getCurrentScope","update","initialScope","client","setCurrentClient","initializeClient","hub","getCurrentHub","top","getStackTop","setClient","init","setupIntegrations"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/sdk.ts"],"sourcesContent":["import type { Client, ClientOptions } from '@sentry/types';\nimport { consoleSandbox, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from './debug-build';\nimport { getCurrentScope } from './exports';\nimport { getCurrentHub } from './hub';\n\n/** A class object that can instantiate Client objects. */\nexport type ClientClass<F extends Client, O extends ClientOptions> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends ClientOptions>(\n  clientClass: ClientClass<F, O>,\n  options: O,\n): void {\n  if (options.debug === true) {\n    if (DEBUG_BUILD) {\n      logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n      });\n    }\n  }\n  const scope = getCurrentScope();\n  scope.update(options.initialScope);\n\n  const client = new clientClass(options);\n  setCurrentClient(client);\n  initializeClient(client);\n}\n\n/**\n * Make the given client the current client.\n */\nexport function setCurrentClient(client: Client): void {\n  // eslint-disable-next-line deprecation/deprecation\n  const hub = getCurrentHub();\n  // eslint-disable-next-line deprecation/deprecation\n  const top = hub.getStackTop();\n  top.client = client;\n  top.scope.setClient(client);\n}\n\n/**\n * Initialize the client for the current scope.\n * Make sure to call this after `setCurrentClient()`.\n */\nfunction initializeClient(client: Client): void {\n  if (client.init) {\n    client.init();\n    // TODO v8: Remove this fallback\n    // eslint-disable-next-line deprecation/deprecation\n  } else if (client.setupIntegrations) {\n    // eslint-disable-next-line deprecation/deprecation\n    client.setupIntegrations();\n  }\n}\n"],"mappings":";;;;;AAOA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,WAAWA,CACzBC,WAAW,EACXC,OAAO,EACD;EACN,IAAIA,OAAO,CAACC,KAAM,KAAI,IAAI,EAAE;IAC1B,IAAIC,WAAW,EAAE;MACfC,MAAM,CAACC,MAAM,EAAE;IACrB,OAAW;MACX;MACMC,cAAc,CAAC,MAAM;QAC3B;QACQC,OAAO,CAACC,IAAI,CAAC,8EAA8E,CAAC;MACpG,CAAO,CAAC;IACR;EACA;EACE,MAAMC,KAAA,GAAQC,eAAe,EAAE;EAC/BD,KAAK,CAACE,MAAM,CAACV,OAAO,CAACW,YAAY,CAAC;EAElC,MAAMC,MAAO,GAAE,IAAIb,WAAW,CAACC,OAAO,CAAC;EACvCa,gBAAgB,CAACD,MAAM,CAAC;EACxBE,gBAAgB,CAACF,MAAM,CAAC;AAC1B;;AAEA;AACA;AACA;AACO,SAASC,gBAAgBA,CAACD,MAAM,EAAgB;EACvD;EACE,MAAMG,GAAA,GAAMC,aAAa,EAAE;EAC7B;EACE,MAAMC,GAAI,GAAEF,GAAG,CAACG,WAAW,EAAE;EAC7BD,GAAG,CAACL,MAAO,GAAEA,MAAM;EACnBK,GAAG,CAACT,KAAK,CAACW,SAAS,CAACP,MAAM,CAAC;AAC7B;;AAEA;AACA;AACA;AACA;AACA,SAASE,gBAAgBA,CAACF,MAAM,EAAgB;EAC9C,IAAIA,MAAM,CAACQ,IAAI,EAAE;IACfR,MAAM,CAACQ,IAAI,EAAE;IACjB;IACA;EACA,OAAS,IAAIR,MAAM,CAACS,iBAAiB,EAAE;IACvC;IACIT,MAAM,CAACS,iBAAiB,EAAE;EAC9B;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}