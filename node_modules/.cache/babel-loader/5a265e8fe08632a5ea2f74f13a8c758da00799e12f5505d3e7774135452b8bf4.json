{"ast":null,"code":"import { isPlainObject, dateTimestampInSeconds, uuid4, logger } from '@sentry/utils';\nimport { getGlobalEventProcessors, notifyEventProcessors } from './eventProcessors.js';\nimport { updateSession } from './session.js';\nimport { applyScopeDataToEvent } from './utils/applyScopeDataToEvent.js';\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nconst DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * The global scope is kept in this module.\n * When accessing this via `getGlobalScope()` we'll make sure to set one if none is currently present.\n */\nlet globalScope;\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nclass Scope {\n  /** Flag if notifying is happening. */\n\n  /** Callback for client to receive scope changes. */\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n\n  /** Array of breadcrumbs. */\n\n  /** User */\n\n  /** Tags */\n\n  /** Extra */\n\n  /** Contexts */\n\n  /** Attachments */\n\n  /** Propagation Context for distributed tracing */\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n\n  /** Fingerprint */\n\n  /** Severity */\n  // eslint-disable-next-line deprecation/deprecation\n\n  /**\n   * Transaction Name\n   */\n\n  /** Span */\n\n  /** Session */\n\n  /** Request Mode Session Status */\n\n  /** The client on this scope */\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n  constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n    this._propagationContext = generatePropagationContext();\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @deprecated Use `scope.clone()` and `new Scope()` instead.\n   */\n  static clone(scope) {\n    return scope ? scope.clone() : new Scope();\n  }\n\n  /**\n   * Clone this scope instance.\n   */\n  clone() {\n    const newScope = new Scope();\n    newScope._breadcrumbs = [...this._breadcrumbs];\n    newScope._tags = {\n      ...this._tags\n    };\n    newScope._extra = {\n      ...this._extra\n    };\n    newScope._contexts = {\n      ...this._contexts\n    };\n    newScope._user = this._user;\n    newScope._level = this._level;\n    newScope._span = this._span;\n    newScope._session = this._session;\n    newScope._transactionName = this._transactionName;\n    newScope._fingerprint = this._fingerprint;\n    newScope._eventProcessors = [...this._eventProcessors];\n    newScope._requestSession = this._requestSession;\n    newScope._attachments = [...this._attachments];\n    newScope._sdkProcessingMetadata = {\n      ...this._sdkProcessingMetadata\n    };\n    newScope._propagationContext = {\n      ...this._propagationContext\n    };\n    newScope._client = this._client;\n    return newScope;\n  }\n\n  /** Update the client on the scope. */\n  setClient(client) {\n    this._client = client;\n  }\n\n  /**\n   * Get the client assigned to this scope.\n   *\n   * It is generally recommended to use the global function `Sentry.getClient()` instead, unless you know what you are doing.\n   */\n  getClient() {\n    return this._client;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  addScopeListener(callback) {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  addEventProcessor(callback) {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setUser(user) {\n    // If null is passed we want to unset everything, but still define keys,\n    // so that later down in the pipeline any existing values are cleared.\n    this._user = user || {\n      email: undefined,\n      id: undefined,\n      ip_address: undefined,\n      segment: undefined,\n      username: undefined\n    };\n    if (this._session) {\n      updateSession(this._session, {\n        user\n      });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getUser() {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getRequestSession() {\n    return this._requestSession;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setRequestSession(requestSession) {\n    this._requestSession = requestSession;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setTags(tags) {\n    this._tags = {\n      ...this._tags,\n      ...tags\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setTag(key, value) {\n    this._tags = {\n      ...this._tags,\n      [key]: value\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setExtras(extras) {\n    this._extra = {\n      ...this._extra,\n      ...extras\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setExtra(key, extra) {\n    this._extra = {\n      ...this._extra,\n      [key]: extra\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setFingerprint(fingerprint) {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setLevel(\n  // eslint-disable-next-line deprecation/deprecation\n  level) {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the transaction name on the scope for future events.\n   */\n  setTransactionName(name) {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setContext(key, context) {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the Span on the scope.\n   * @param span Span\n   * @deprecated Instead of setting a span on a scope, use `startSpan()`/`startSpanManual()` instead.\n   */\n  setSpan(span) {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Returns the `Span` if there is one.\n   * @deprecated Use `getActiveSpan()` instead.\n   */\n  getSpan() {\n    return this._span;\n  }\n\n  /**\n   * Returns the `Transaction` attached to the scope (if there is one).\n   * @deprecated You should not rely on the transaction, but just use `startSpan()` APIs instead.\n   */\n  getTransaction() {\n    // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n    // have a pointer to the currently-active transaction.\n    const span = this._span;\n    // Cannot replace with getRootSpan because getRootSpan returns a span, not a transaction\n    // Also, this method will be removed anyway.\n    // eslint-disable-next-line deprecation/deprecation\n    return span && span.transaction;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setSession(session) {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getSession() {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  update(captureContext) {\n    if (!captureContext) {\n      return this;\n    }\n    const scopeToMerge = typeof captureContext === 'function' ? captureContext(this) : captureContext;\n    if (scopeToMerge instanceof Scope) {\n      const scopeData = scopeToMerge.getScopeData();\n      this._tags = {\n        ...this._tags,\n        ...scopeData.tags\n      };\n      this._extra = {\n        ...this._extra,\n        ...scopeData.extra\n      };\n      this._contexts = {\n        ...this._contexts,\n        ...scopeData.contexts\n      };\n      if (scopeData.user && Object.keys(scopeData.user).length) {\n        this._user = scopeData.user;\n      }\n      if (scopeData.level) {\n        this._level = scopeData.level;\n      }\n      if (scopeData.fingerprint.length) {\n        this._fingerprint = scopeData.fingerprint;\n      }\n      if (scopeToMerge.getRequestSession()) {\n        this._requestSession = scopeToMerge.getRequestSession();\n      }\n      if (scopeData.propagationContext) {\n        this._propagationContext = scopeData.propagationContext;\n      }\n    } else if (isPlainObject(scopeToMerge)) {\n      const scopeContext = captureContext;\n      this._tags = {\n        ...this._tags,\n        ...scopeContext.tags\n      };\n      this._extra = {\n        ...this._extra,\n        ...scopeContext.extra\n      };\n      this._contexts = {\n        ...this._contexts,\n        ...scopeContext.contexts\n      };\n      if (scopeContext.user) {\n        this._user = scopeContext.user;\n      }\n      if (scopeContext.level) {\n        this._level = scopeContext.level;\n      }\n      if (scopeContext.fingerprint) {\n        this._fingerprint = scopeContext.fingerprint;\n      }\n      if (scopeContext.requestSession) {\n        this._requestSession = scopeContext.requestSession;\n      }\n      if (scopeContext.propagationContext) {\n        this._propagationContext = scopeContext.propagationContext;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  clear() {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._requestSession = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    this._attachments = [];\n    this._propagationContext = generatePropagationContext();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  addBreadcrumb(breadcrumb, maxBreadcrumbs) {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb\n    };\n    const breadcrumbs = this._breadcrumbs;\n    breadcrumbs.push(mergedBreadcrumb);\n    this._breadcrumbs = breadcrumbs.length > maxCrumbs ? breadcrumbs.slice(-maxCrumbs) : breadcrumbs;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getLastBreadcrumb() {\n    return this._breadcrumbs[this._breadcrumbs.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  clearBreadcrumbs() {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  addAttachment(attachment) {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `getScopeData()` instead.\n   */\n  getAttachments() {\n    const data = this.getScopeData();\n    return data.attachments;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  clearAttachments() {\n    this._attachments = [];\n    return this;\n  }\n\n  /** @inheritDoc */\n  getScopeData() {\n    const {\n      _breadcrumbs,\n      _attachments,\n      _contexts,\n      _tags,\n      _extra,\n      _user,\n      _level,\n      _fingerprint,\n      _eventProcessors,\n      _propagationContext,\n      _sdkProcessingMetadata,\n      _transactionName,\n      _span\n    } = this;\n    return {\n      breadcrumbs: _breadcrumbs,\n      attachments: _attachments,\n      contexts: _contexts,\n      tags: _tags,\n      extra: _extra,\n      user: _user,\n      level: _level,\n      fingerprint: _fingerprint || [],\n      eventProcessors: _eventProcessors,\n      propagationContext: _propagationContext,\n      sdkProcessingMetadata: _sdkProcessingMetadata,\n      transactionName: _transactionName,\n      span: _span\n    };\n  }\n\n  /**\n   * Applies data from the scope to the event and runs all event processors on it.\n   *\n   * @param event Event\n   * @param hint Object containing additional information about the original exception, for use by the event processors.\n   * @hidden\n   * @deprecated Use `applyScopeDataToEvent()` directly\n   */\n  applyToEvent(event, hint = {}, additionalEventProcessors = []) {\n    applyScopeDataToEvent(event, this.getScopeData());\n\n    // TODO (v8): Update this order to be: Global > Client > Scope\n    const eventProcessors = [...additionalEventProcessors,\n    // eslint-disable-next-line deprecation/deprecation\n    ...getGlobalEventProcessors(), ...this._eventProcessors];\n    return notifyEventProcessors(eventProcessors, event, hint);\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry\n   */\n  setSDKProcessingMetadata(newData) {\n    this._sdkProcessingMetadata = {\n      ...this._sdkProcessingMetadata,\n      ...newData\n    };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setPropagationContext(context) {\n    this._propagationContext = context;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getPropagationContext() {\n    return this._propagationContext;\n  }\n\n  /**\n   * Capture an exception for this scope.\n   *\n   * @param exception The exception to capture.\n   * @param hint Optinal additional data to attach to the Sentry event.\n   * @returns the id of the captured Sentry event.\n   */\n  captureException(exception, hint) {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n    if (!this._client) {\n      logger.warn('No client configured on scope - will not capture exception!');\n      return eventId;\n    }\n    const syntheticException = new Error('Sentry syntheticException');\n    this._client.captureException(exception, {\n      originalException: exception,\n      syntheticException,\n      ...hint,\n      event_id: eventId\n    }, this);\n    return eventId;\n  }\n\n  /**\n   * Capture a message for this scope.\n   *\n   * @param message The message to capture.\n   * @param level An optional severity level to report the message with.\n   * @param hint Optional additional data to attach to the Sentry event.\n   * @returns the id of the captured message.\n   */\n  captureMessage(message, level, hint) {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n    if (!this._client) {\n      logger.warn('No client configured on scope - will not capture message!');\n      return eventId;\n    }\n    const syntheticException = new Error(message);\n    this._client.captureMessage(message, level, {\n      originalException: message,\n      syntheticException,\n      ...hint,\n      event_id: eventId\n    }, this);\n    return eventId;\n  }\n\n  /**\n   * Captures a manually created event for this scope and sends it to Sentry.\n   *\n   * @param exception The event to capture.\n   * @param hint Optional additional data to attach to the Sentry event.\n   * @returns the id of the captured event.\n   */\n  captureEvent(event, hint) {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n    if (!this._client) {\n      logger.warn('No client configured on scope - will not capture event!');\n      return eventId;\n    }\n    this._client.captureEvent(event, {\n      ...hint,\n      event_id: eventId\n    }, this);\n    return eventId;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  _notifyScopeListeners() {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n}\n\n/**\n * Get the global scope.\n * This scope is applied to _all_ events.\n */\nfunction getGlobalScope() {\n  if (!globalScope) {\n    globalScope = new Scope();\n  }\n  return globalScope;\n}\n\n/**\n * This is mainly needed for tests.\n * DO NOT USE this, as this is an internal API and subject to change.\n * @hidden\n */\nfunction setGlobalScope(scope) {\n  globalScope = scope;\n}\nfunction generatePropagationContext() {\n  return {\n    traceId: uuid4(),\n    spanId: uuid4().substring(16)\n  };\n}\nexport { Scope, getGlobalScope, setGlobalScope };","map":{"version":3,"names":["DEFAULT_MAX_BREADCRUMBS","globalScope","Scope","constructor","_notifyingListeners","_scopeListeners","_eventProcessors","_breadcrumbs","_attachments","_user","_tags","_extra","_contexts","_sdkProcessingMetadata","_propagationContext","generatePropagationContext","clone","scope","newScope","_level","_span","_session","_transactionName","_fingerprint","_requestSession","_client","setClient","client","getClient","addScopeListener","callback","push","addEventProcessor","setUser","user","email","undefined","id","ip_address","segment","username","updateSession","_notifyScopeListeners","getUser","getRequestSession","setRequestSession","requestSession","setTags","tags","setTag","key","value","setExtras","extras","setExtra","extra","setFingerprint","fingerprint","setLevel","level","setTransactionName","name","setContext","context","setSpan","span","getSpan","getTransaction","transaction","setSession","session","getSession","update","captureContext","scopeToMerge","scopeData","getScopeData","contexts","Object","keys","length","propagationContext","isPlainObject","scopeContext","clear","addBreadcrumb","breadcrumb","maxBreadcrumbs","maxCrumbs","mergedBreadcrumb","timestamp","dateTimestampInSeconds","breadcrumbs","slice","getLastBreadcrumb","clearBreadcrumbs","addAttachment","attachment","getAttachments","data","attachments","clearAttachments","eventProcessors","sdkProcessingMetadata","transactionName","applyToEvent","event","hint","additionalEventProcessors","applyScopeDataToEvent","getGlobalEventProcessors","notifyEventProcessors","setSDKProcessingMetadata","newData","setPropagationContext","getPropagationContext","captureException","exception","eventId","event_id","uuid4","logger","warn","syntheticException","Error","originalException","captureMessage","message","captureEvent","forEach","getGlobalScope","setGlobalScope","traceId","spanId","substring"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/scope.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type {\n  Attachment,\n  Breadcrumb,\n  CaptureContext,\n  Client,\n  Context,\n  Contexts,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Primitive,\n  PropagationContext,\n  RequestSession,\n  Scope as ScopeInterface,\n  ScopeContext,\n  ScopeData,\n  Session,\n  Severity,\n  SeverityLevel,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport { dateTimestampInSeconds, isPlainObject, logger, uuid4 } from '@sentry/utils';\n\nimport { getGlobalEventProcessors, notifyEventProcessors } from './eventProcessors';\nimport { updateSession } from './session';\nimport { applyScopeDataToEvent } from './utils/applyScopeDataToEvent';\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nconst DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * The global scope is kept in this module.\n * When accessing this via `getGlobalScope()` we'll make sure to set one if none is currently present.\n */\nlet globalScope: ScopeInterface | undefined;\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifying is happening. */\n  protected _notifyingListeners: boolean;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void>;\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[];\n\n  /** User */\n  protected _user: User;\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive };\n\n  /** Extra */\n  protected _extra: Extras;\n\n  /** Contexts */\n  protected _contexts: Contexts;\n\n  /** Attachments */\n  protected _attachments: Attachment[];\n\n  /** Propagation Context for distributed tracing */\n  protected _propagationContext: PropagationContext;\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n  protected _sdkProcessingMetadata: { [key: string]: unknown };\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  // eslint-disable-next-line deprecation/deprecation\n  protected _level?: Severity | SeverityLevel;\n\n  /**\n   * Transaction Name\n   */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /** Session */\n  protected _session?: Session;\n\n  /** Request Mode Session Status */\n  protected _requestSession?: RequestSession;\n\n  /** The client on this scope */\n  protected _client?: Client;\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n  public constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n    this._propagationContext = generatePropagationContext();\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @deprecated Use `scope.clone()` and `new Scope()` instead.\n   */\n  public static clone(scope?: Scope): Scope {\n    return scope ? scope.clone() : new Scope();\n  }\n\n  /**\n   * Clone this scope instance.\n   */\n  public clone(): Scope {\n    const newScope = new Scope();\n    newScope._breadcrumbs = [...this._breadcrumbs];\n    newScope._tags = { ...this._tags };\n    newScope._extra = { ...this._extra };\n    newScope._contexts = { ...this._contexts };\n    newScope._user = this._user;\n    newScope._level = this._level;\n    newScope._span = this._span;\n    newScope._session = this._session;\n    newScope._transactionName = this._transactionName;\n    newScope._fingerprint = this._fingerprint;\n    newScope._eventProcessors = [...this._eventProcessors];\n    newScope._requestSession = this._requestSession;\n    newScope._attachments = [...this._attachments];\n    newScope._sdkProcessingMetadata = { ...this._sdkProcessingMetadata };\n    newScope._propagationContext = { ...this._propagationContext };\n    newScope._client = this._client;\n\n    return newScope;\n  }\n\n  /** Update the client on the scope. */\n  public setClient(client: Client | undefined): void {\n    this._client = client;\n  }\n\n  /**\n   * Get the client assigned to this scope.\n   *\n   * It is generally recommended to use the global function `Sentry.getClient()` instead, unless you know what you are doing.\n   */\n  public getClient(): Client | undefined {\n    return this._client;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    // If null is passed we want to unset everything, but still define keys,\n    // so that later down in the pipeline any existing values are cleared.\n    this._user = user || {\n      email: undefined,\n      id: undefined,\n      ip_address: undefined,\n      segment: undefined,\n      username: undefined,\n    };\n\n    if (this._session) {\n      updateSession(this._session, { user });\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getRequestSession(): RequestSession | undefined {\n    return this._requestSession;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setRequestSession(requestSession?: RequestSession): this {\n    this._requestSession = requestSession;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel,\n  ): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the transaction name on the scope for future events.\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the Span on the scope.\n   * @param span Span\n   * @deprecated Instead of setting a span on a scope, use `startSpan()`/`startSpanManual()` instead.\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Returns the `Span` if there is one.\n   * @deprecated Use `getActiveSpan()` instead.\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * Returns the `Transaction` attached to the scope (if there is one).\n   * @deprecated You should not rely on the transaction, but just use `startSpan()` APIs instead.\n   */\n  public getTransaction(): Transaction | undefined {\n    // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n    // have a pointer to the currently-active transaction.\n    const span = this._span;\n    // Cannot replace with getRootSpan because getRootSpan returns a span, not a transaction\n    // Also, this method will be removed anyway.\n    // eslint-disable-next-line deprecation/deprecation\n    return span && span.transaction;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    const scopeToMerge = typeof captureContext === 'function' ? captureContext(this) : captureContext;\n\n    if (scopeToMerge instanceof Scope) {\n      const scopeData = scopeToMerge.getScopeData();\n\n      this._tags = { ...this._tags, ...scopeData.tags };\n      this._extra = { ...this._extra, ...scopeData.extra };\n      this._contexts = { ...this._contexts, ...scopeData.contexts };\n      if (scopeData.user && Object.keys(scopeData.user).length) {\n        this._user = scopeData.user;\n      }\n      if (scopeData.level) {\n        this._level = scopeData.level;\n      }\n      if (scopeData.fingerprint.length) {\n        this._fingerprint = scopeData.fingerprint;\n      }\n      if (scopeToMerge.getRequestSession()) {\n        this._requestSession = scopeToMerge.getRequestSession();\n      }\n      if (scopeData.propagationContext) {\n        this._propagationContext = scopeData.propagationContext;\n      }\n    } else if (isPlainObject(scopeToMerge)) {\n      const scopeContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...scopeContext.tags };\n      this._extra = { ...this._extra, ...scopeContext.extra };\n      this._contexts = { ...this._contexts, ...scopeContext.contexts };\n      if (scopeContext.user) {\n        this._user = scopeContext.user;\n      }\n      if (scopeContext.level) {\n        this._level = scopeContext.level;\n      }\n      if (scopeContext.fingerprint) {\n        this._fingerprint = scopeContext.fingerprint;\n      }\n      if (scopeContext.requestSession) {\n        this._requestSession = scopeContext.requestSession;\n      }\n      if (scopeContext.propagationContext) {\n        this._propagationContext = scopeContext.propagationContext;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._requestSession = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    this._attachments = [];\n    this._propagationContext = generatePropagationContext();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n    };\n\n    const breadcrumbs = this._breadcrumbs;\n    breadcrumbs.push(mergedBreadcrumb);\n    this._breadcrumbs = breadcrumbs.length > maxCrumbs ? breadcrumbs.slice(-maxCrumbs) : breadcrumbs;\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getLastBreadcrumb(): Breadcrumb | undefined {\n    return this._breadcrumbs[this._breadcrumbs.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addAttachment(attachment: Attachment): this {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `getScopeData()` instead.\n   */\n  public getAttachments(): Attachment[] {\n    const data = this.getScopeData();\n\n    return data.attachments;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearAttachments(): this {\n    this._attachments = [];\n    return this;\n  }\n\n  /** @inheritDoc */\n  public getScopeData(): ScopeData {\n    const {\n      _breadcrumbs,\n      _attachments,\n      _contexts,\n      _tags,\n      _extra,\n      _user,\n      _level,\n      _fingerprint,\n      _eventProcessors,\n      _propagationContext,\n      _sdkProcessingMetadata,\n      _transactionName,\n      _span,\n    } = this;\n\n    return {\n      breadcrumbs: _breadcrumbs,\n      attachments: _attachments,\n      contexts: _contexts,\n      tags: _tags,\n      extra: _extra,\n      user: _user,\n      level: _level,\n      fingerprint: _fingerprint || [],\n      eventProcessors: _eventProcessors,\n      propagationContext: _propagationContext,\n      sdkProcessingMetadata: _sdkProcessingMetadata,\n      transactionName: _transactionName,\n      span: _span,\n    };\n  }\n\n  /**\n   * Applies data from the scope to the event and runs all event processors on it.\n   *\n   * @param event Event\n   * @param hint Object containing additional information about the original exception, for use by the event processors.\n   * @hidden\n   * @deprecated Use `applyScopeDataToEvent()` directly\n   */\n  public applyToEvent(\n    event: Event,\n    hint: EventHint = {},\n    additionalEventProcessors: EventProcessor[] = [],\n  ): PromiseLike<Event | null> {\n    applyScopeDataToEvent(event, this.getScopeData());\n\n    // TODO (v8): Update this order to be: Global > Client > Scope\n    const eventProcessors: EventProcessor[] = [\n      ...additionalEventProcessors,\n      // eslint-disable-next-line deprecation/deprecation\n      ...getGlobalEventProcessors(),\n      ...this._eventProcessors,\n    ];\n\n    return notifyEventProcessors(eventProcessors, event, hint);\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry\n   */\n  public setSDKProcessingMetadata(newData: { [key: string]: unknown }): this {\n    this._sdkProcessingMetadata = { ...this._sdkProcessingMetadata, ...newData };\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setPropagationContext(context: PropagationContext): this {\n    this._propagationContext = context;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getPropagationContext(): PropagationContext {\n    return this._propagationContext;\n  }\n\n  /**\n   * Capture an exception for this scope.\n   *\n   * @param exception The exception to capture.\n   * @param hint Optinal additional data to attach to the Sentry event.\n   * @returns the id of the captured Sentry event.\n   */\n  public captureException(exception: unknown, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n\n    if (!this._client) {\n      logger.warn('No client configured on scope - will not capture exception!');\n      return eventId;\n    }\n\n    const syntheticException = new Error('Sentry syntheticException');\n\n    this._client.captureException(\n      exception,\n      {\n        originalException: exception,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Capture a message for this scope.\n   *\n   * @param message The message to capture.\n   * @param level An optional severity level to report the message with.\n   * @param hint Optional additional data to attach to the Sentry event.\n   * @returns the id of the captured message.\n   */\n  public captureMessage(message: string, level?: SeverityLevel, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n\n    if (!this._client) {\n      logger.warn('No client configured on scope - will not capture message!');\n      return eventId;\n    }\n\n    const syntheticException = new Error(message);\n\n    this._client.captureMessage(\n      message,\n      level,\n      {\n        originalException: message,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Captures a manually created event for this scope and sends it to Sentry.\n   *\n   * @param exception The event to capture.\n   * @param hint Optional additional data to attach to the Sentry event.\n   * @returns the id of the captured event.\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n\n    if (!this._client) {\n      logger.warn('No client configured on scope - will not capture event!');\n      return eventId;\n    }\n\n    this._client.captureEvent(event, { ...hint, event_id: eventId }, this);\n\n    return eventId;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n}\n\n/**\n * Get the global scope.\n * This scope is applied to _all_ events.\n */\nexport function getGlobalScope(): ScopeInterface {\n  if (!globalScope) {\n    globalScope = new Scope();\n  }\n\n  return globalScope;\n}\n\n/**\n * This is mainly needed for tests.\n * DO NOT USE this, as this is an internal API and subject to change.\n * @hidden\n */\nexport function setGlobalScope(scope: ScopeInterface | undefined): void {\n  globalScope = scope;\n}\n\nfunction generatePropagationContext(): PropagationContext {\n  return {\n    traceId: uuid4(),\n    spanId: uuid4().substring(16),\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}