{"ast":null,"code":"import { DEBUG_BUILD } from '../debug-build.js';\nimport { logger } from '../logger.js';\nimport { addConsoleInstrumentationHandler } from './console.js';\nexport { addConsoleInstrumentationHandler } from './console.js';\nimport { addClickKeypressInstrumentationHandler } from './dom.js';\nexport { addClickKeypressInstrumentationHandler } from './dom.js';\nimport { addFetchInstrumentationHandler } from './fetch.js';\nexport { addFetchInstrumentationHandler } from './fetch.js';\nimport { addGlobalErrorInstrumentationHandler } from './globalError.js';\nexport { addGlobalErrorInstrumentationHandler } from './globalError.js';\nimport { addGlobalUnhandledRejectionInstrumentationHandler } from './globalUnhandledRejection.js';\nexport { addGlobalUnhandledRejectionInstrumentationHandler } from './globalUnhandledRejection.js';\nimport { addHistoryInstrumentationHandler } from './history.js';\nexport { addHistoryInstrumentationHandler } from './history.js';\nimport { addXhrInstrumentationHandler } from './xhr.js';\nexport { SENTRY_XHR_DATA_KEY, addXhrInstrumentationHandler } from './xhr.js';\n\n// TODO(v8): Consider moving this file (or at least parts of it) into the browser package. The registered handlers are mostly non-generic and we risk leaking runtime specific code into generic packages.\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n * @deprecated Use the proper function per instrumentation type instead!\n */\nfunction addInstrumentationHandler(type, callback) {\n  switch (type) {\n    case 'console':\n      return addConsoleInstrumentationHandler(callback);\n    case 'dom':\n      return addClickKeypressInstrumentationHandler(callback);\n    case 'xhr':\n      return addXhrInstrumentationHandler(callback);\n    case 'fetch':\n      return addFetchInstrumentationHandler(callback);\n    case 'history':\n      return addHistoryInstrumentationHandler(callback);\n    case 'error':\n      return addGlobalErrorInstrumentationHandler(callback);\n    case 'unhandledrejection':\n      return addGlobalUnhandledRejectionInstrumentationHandler(callback);\n    default:\n      DEBUG_BUILD && logger.warn('unknown instrumentation type:', type);\n  }\n}\nexport { addInstrumentationHandler };","map":{"version":3,"names":["addInstrumentationHandler","type","callback","addConsoleInstrumentationHandler","addClickKeypressInstrumentationHandler","addXhrInstrumentationHandler","addFetchInstrumentationHandler","addHistoryInstrumentationHandler","addGlobalErrorInstrumentationHandler","addGlobalUnhandledRejectionInstrumentationHandler","DEBUG_BUILD","logger","warn"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/instrument/index.ts"],"sourcesContent":["// TODO(v8): Consider moving this file (or at least parts of it) into the browser package. The registered handlers are mostly non-generic and we risk leaking runtime specific code into generic packages.\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { logger } from './../logger';\nimport type {\n  InstrumentHandlerCallback as _InstrumentHandlerCallback,\n  InstrumentHandlerType as _InstrumentHandlerType,\n} from './_handlers';\nimport { resetInstrumentationHandlers } from './_handlers';\nimport { addConsoleInstrumentationHandler } from './console';\nimport { addClickKeypressInstrumentationHandler } from './dom';\nimport { addFetchInstrumentationHandler } from './fetch';\nimport { addGlobalErrorInstrumentationHandler } from './globalError';\nimport { addGlobalUnhandledRejectionInstrumentationHandler } from './globalUnhandledRejection';\nimport { addHistoryInstrumentationHandler } from './history';\nimport { SENTRY_XHR_DATA_KEY, addXhrInstrumentationHandler } from './xhr';\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n * @deprecated Use the proper function per instrumentation type instead!\n */\nexport function addInstrumentationHandler(type: _InstrumentHandlerType, callback: _InstrumentHandlerCallback): void {\n  switch (type) {\n    case 'console':\n      return addConsoleInstrumentationHandler(callback);\n    case 'dom':\n      return addClickKeypressInstrumentationHandler(callback);\n    case 'xhr':\n      return addXhrInstrumentationHandler(callback);\n    case 'fetch':\n      return addFetchInstrumentationHandler(callback);\n    case 'history':\n      return addHistoryInstrumentationHandler(callback);\n    case 'error':\n      return addGlobalErrorInstrumentationHandler(callback);\n    case 'unhandledrejection':\n      return addGlobalUnhandledRejectionInstrumentationHandler(callback);\n    default:\n      DEBUG_BUILD && logger.warn('unknown instrumentation type:', type);\n  }\n}\n\n/**\n * @deprecated Use the specific handler data types from @sentry/types instead, e.g. HandlerDataFetch, HandlerDataConsole, ...\n */\ntype InstrumentHandlerCallback = _InstrumentHandlerCallback;\n\n/**\n * @deprecated Use the specific handler functions instead, e.g. addConsoleInstrumentationHandler, ...\n */\ntype InstrumentHandlerType = _InstrumentHandlerType;\n\n// eslint-disable-next-line deprecation/deprecation\nexport type { InstrumentHandlerCallback, InstrumentHandlerType };\n\nexport {\n  addConsoleInstrumentationHandler,\n  addClickKeypressInstrumentationHandler,\n  addXhrInstrumentationHandler,\n  addFetchInstrumentationHandler,\n  addHistoryInstrumentationHandler,\n  addGlobalErrorInstrumentationHandler,\n  addGlobalUnhandledRejectionInstrumentationHandler,\n  SENTRY_XHR_DATA_KEY,\n  // Only exported for tests\n  resetInstrumentationHandlers,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,yBAAyBA,CAACC,IAAI,EAA0BC,QAAQ,EAAoC;EAClH,QAAQD,IAAI;IACV,KAAK,SAAS;MACZ,OAAOE,gCAAgC,CAACD,QAAQ,CAAC;IACnD,KAAK,KAAK;MACR,OAAOE,sCAAsC,CAACF,QAAQ,CAAC;IACzD,KAAK,KAAK;MACR,OAAOG,4BAA4B,CAACH,QAAQ,CAAC;IAC/C,KAAK,OAAO;MACV,OAAOI,8BAA8B,CAACJ,QAAQ,CAAC;IACjD,KAAK,SAAS;MACZ,OAAOK,gCAAgC,CAACL,QAAQ,CAAC;IACnD,KAAK,OAAO;MACV,OAAOM,oCAAoC,CAACN,QAAQ,CAAC;IACvD,KAAK,oBAAoB;MACvB,OAAOO,iDAAiD,CAACP,QAAQ,CAAC;IACpE;MACEQ,WAAA,IAAeC,MAAM,CAACC,IAAI,CAAC,+BAA+B,EAAEX,IAAI,CAAC;EACvE;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}