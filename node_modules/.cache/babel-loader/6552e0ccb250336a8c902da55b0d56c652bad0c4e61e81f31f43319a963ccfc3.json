{"ast":null,"code":"import { dsnToString, createEnvelope } from '@sentry/utils';\nimport { serializeMetricBuckets } from './utils.js';\n\n/**\n * Create envelope from a metric aggregate.\n */\nfunction createMetricEnvelope(metricBucketItems, dsn, metadata, tunnel) {\n  const headers = {\n    sent_at: new Date().toISOString()\n  };\n  if (metadata && metadata.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version\n    };\n  }\n  if (!!tunnel && dsn) {\n    headers.dsn = dsnToString(dsn);\n  }\n  const item = createMetricEnvelopeItem(metricBucketItems);\n  return createEnvelope(headers, [item]);\n}\nfunction createMetricEnvelopeItem(metricBucketItems) {\n  const payload = serializeMetricBuckets(metricBucketItems);\n  const metricHeaders = {\n    type: 'statsd',\n    length: payload.length\n  };\n  return [metricHeaders, payload];\n}\nexport { createMetricEnvelope };","map":{"version":3,"names":["createMetricEnvelope","metricBucketItems","dsn","metadata","tunnel","headers","sent_at","Date","toISOString","sdk","name","version","dsnToString","item","createMetricEnvelopeItem","createEnvelope","payload","serializeMetricBuckets","metricHeaders","type","length"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/metrics/envelope.ts"],"sourcesContent":["import type { DsnComponents, MetricBucketItem, SdkMetadata, StatsdEnvelope, StatsdItem } from '@sentry/types';\nimport { createEnvelope, dsnToString } from '@sentry/utils';\nimport { serializeMetricBuckets } from './utils';\n\n/**\n * Create envelope from a metric aggregate.\n */\nexport function createMetricEnvelope(\n  metricBucketItems: Array<MetricBucketItem>,\n  dsn?: DsnComponents,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n): StatsdEnvelope {\n  const headers: StatsdEnvelope[0] = {\n    sent_at: new Date().toISOString(),\n  };\n\n  if (metadata && metadata.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version,\n    };\n  }\n\n  if (!!tunnel && dsn) {\n    headers.dsn = dsnToString(dsn);\n  }\n\n  const item = createMetricEnvelopeItem(metricBucketItems);\n  return createEnvelope<StatsdEnvelope>(headers, [item]);\n}\n\nfunction createMetricEnvelopeItem(metricBucketItems: MetricBucketItem[]): StatsdItem {\n  const payload = serializeMetricBuckets(metricBucketItems);\n  const metricHeaders: StatsdItem[0] = {\n    type: 'statsd',\n    length: payload.length,\n  };\n  return [metricHeaders, payload];\n}\n"],"mappings":";;;AAIA;AACA;AACA;AACO,SAASA,oBAAoBA,CAClCC,iBAAiB,EACjBC,GAAG,EACHC,QAAQ,EACRC,MAAM,EACU;EAChB,MAAMC,OAAO,GAAsB;IACjCC,OAAO,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;EACnC,CAAG;EAED,IAAIL,QAAA,IAAYA,QAAQ,CAACM,GAAG,EAAE;IAC5BJ,OAAO,CAACI,GAAA,GAAM;MACZC,IAAI,EAAEP,QAAQ,CAACM,GAAG,CAACC,IAAI;MACvBC,OAAO,EAAER,QAAQ,CAACM,GAAG,CAACE;IAC5B,CAAK;EACL;EAEE,IAAI,CAAC,CAACP,MAAO,IAAGF,GAAG,EAAE;IACnBG,OAAO,CAACH,GAAA,GAAMU,WAAW,CAACV,GAAG,CAAC;EAClC;EAEE,MAAMW,IAAK,GAAEC,wBAAwB,CAACb,iBAAiB,CAAC;EACxD,OAAOc,cAAc,CAAiBV,OAAO,EAAE,CAACQ,IAAI,CAAC,CAAC;AACxD;AAEA,SAASC,wBAAwBA,CAACb,iBAAiB,EAAkC;EACnF,MAAMe,OAAQ,GAAEC,sBAAsB,CAAChB,iBAAiB,CAAC;EACzD,MAAMiB,aAAa,GAAkB;IACnCC,IAAI,EAAE,QAAQ;IACdC,MAAM,EAAEJ,OAAO,CAACI;EACpB,CAAG;EACD,OAAO,CAACF,aAAa,EAAEF,OAAO,CAAC;AACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}