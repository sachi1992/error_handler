{"ast":null,"code":"import { dropUndefinedKeys } from '@sentry/utils';\nimport { NAME_AND_TAG_KEY_NORMALIZATION_REGEX, TAG_VALUE_NORMALIZATION_REGEX } from './constants.js';\n\n/**\n * Generate bucket key from metric properties.\n */\nfunction getBucketKey(metricType, name, unit, tags) {\n  const stringifiedTags = Object.entries(dropUndefinedKeys(tags)).sort((a, b) => a[0].localeCompare(b[0]));\n  return `${metricType}${name}${unit}${stringifiedTags}`;\n}\n\n/* eslint-disable no-bitwise */\n/**\n * Simple hash function for strings.\n */\nfunction simpleHash(s) {\n  let rv = 0;\n  for (let i = 0; i < s.length; i++) {\n    const c = s.charCodeAt(i);\n    rv = (rv << 5) - rv + c;\n    rv &= rv;\n  }\n  return rv >>> 0;\n}\n/* eslint-enable no-bitwise */\n\n/**\n * Serialize metrics buckets into a string based on statsd format.\n *\n * Example of format:\n * metric.name@second:1:1.2|d|#a:value,b:anothervalue|T12345677\n * Segments:\n * name: metric.name\n * unit: second\n * value: [1, 1.2]\n * type of metric: d (distribution)\n * tags: { a: value, b: anothervalue }\n * timestamp: 12345677\n */\nfunction serializeMetricBuckets(metricBucketItems) {\n  let out = '';\n  for (const item of metricBucketItems) {\n    const tagEntries = Object.entries(item.tags);\n    const maybeTags = tagEntries.length > 0 ? `|#${tagEntries.map(([key, value]) => `${key}:${value}`).join(',')}` : '';\n    out += `${item.name}@${item.unit}:${item.metric}|${item.metricType}${maybeTags}|T${item.timestamp}\\n`;\n  }\n  return out;\n}\n\n/**\n * Sanitizes tags.\n */\nfunction sanitizeTags(unsanitizedTags) {\n  const tags = {};\n  for (const key in unsanitizedTags) {\n    if (Object.prototype.hasOwnProperty.call(unsanitizedTags, key)) {\n      const sanitizedKey = key.replace(NAME_AND_TAG_KEY_NORMALIZATION_REGEX, '_');\n      tags[sanitizedKey] = String(unsanitizedTags[key]).replace(TAG_VALUE_NORMALIZATION_REGEX, '');\n    }\n  }\n  return tags;\n}\nexport { getBucketKey, sanitizeTags, serializeMetricBuckets, simpleHash };","map":{"version":3,"names":["getBucketKey","metricType","name","unit","tags","stringifiedTags","Object","entries","dropUndefinedKeys","sort","a","b","localeCompare","simpleHash","s","rv","i","length","c","charCodeAt","serializeMetricBuckets","metricBucketItems","out","item","tagEntries","maybeTags","map","key","value","join","metric","timestamp","sanitizeTags","unsanitizedTags","prototype","hasOwnProperty","call","sanitizedKey","replace","NAME_AND_TAG_KEY_NORMALIZATION_REGEX","String","TAG_VALUE_NORMALIZATION_REGEX"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/metrics/utils.ts"],"sourcesContent":["import type { MeasurementUnit, MetricBucketItem, Primitive } from '@sentry/types';\nimport { dropUndefinedKeys } from '@sentry/utils';\nimport { NAME_AND_TAG_KEY_NORMALIZATION_REGEX, TAG_VALUE_NORMALIZATION_REGEX } from './constants';\nimport type { MetricType } from './types';\n\n/**\n * Generate bucket key from metric properties.\n */\nexport function getBucketKey(\n  metricType: MetricType,\n  name: string,\n  unit: MeasurementUnit,\n  tags: Record<string, string>,\n): string {\n  const stringifiedTags = Object.entries(dropUndefinedKeys(tags)).sort((a, b) => a[0].localeCompare(b[0]));\n  return `${metricType}${name}${unit}${stringifiedTags}`;\n}\n\n/* eslint-disable no-bitwise */\n/**\n * Simple hash function for strings.\n */\nexport function simpleHash(s: string): number {\n  let rv = 0;\n  for (let i = 0; i < s.length; i++) {\n    const c = s.charCodeAt(i);\n    rv = (rv << 5) - rv + c;\n    rv &= rv;\n  }\n  return rv >>> 0;\n}\n/* eslint-enable no-bitwise */\n\n/**\n * Serialize metrics buckets into a string based on statsd format.\n *\n * Example of format:\n * metric.name@second:1:1.2|d|#a:value,b:anothervalue|T12345677\n * Segments:\n * name: metric.name\n * unit: second\n * value: [1, 1.2]\n * type of metric: d (distribution)\n * tags: { a: value, b: anothervalue }\n * timestamp: 12345677\n */\nexport function serializeMetricBuckets(metricBucketItems: MetricBucketItem[]): string {\n  let out = '';\n  for (const item of metricBucketItems) {\n    const tagEntries = Object.entries(item.tags);\n    const maybeTags = tagEntries.length > 0 ? `|#${tagEntries.map(([key, value]) => `${key}:${value}`).join(',')}` : '';\n    out += `${item.name}@${item.unit}:${item.metric}|${item.metricType}${maybeTags}|T${item.timestamp}\\n`;\n  }\n  return out;\n}\n\n/**\n * Sanitizes tags.\n */\nexport function sanitizeTags(unsanitizedTags: Record<string, Primitive>): Record<string, string> {\n  const tags: Record<string, string> = {};\n  for (const key in unsanitizedTags) {\n    if (Object.prototype.hasOwnProperty.call(unsanitizedTags, key)) {\n      const sanitizedKey = key.replace(NAME_AND_TAG_KEY_NORMALIZATION_REGEX, '_');\n      tags[sanitizedKey] = String(unsanitizedTags[key]).replace(TAG_VALUE_NORMALIZATION_REGEX, '');\n    }\n  }\n  return tags;\n}\n"],"mappings":";;;AAKA;AACA;AACA;AACO,SAASA,YAAYA,CAC1BC,UAAU,EACVC,IAAI,EACJC,IAAI,EACJC,IAAI,EACI;EACR,MAAMC,eAAA,GAAkBC,MAAM,CAACC,OAAO,CAACC,iBAAiB,CAACJ,IAAI,CAAC,CAAC,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAC,CAAC,CAAC,CAACE,aAAa,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACxG,OAAQ,GAAAV,UAAA,GAAAC,IAAA,GAAAC,IAAA,GAAAE,eAAA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAAQ,WAAAC,CAAA;EACA,IAAAC,EAAA;EACA,SAAAC,CAAA,MAAAA,CAAA,GAAAF,CAAA,CAAAG,MAAA,EAAAD,CAAA;IACA,MAAAE,CAAA,GAAAJ,CAAA,CAAAK,UAAA,CAAAH,CAAA;IACAD,EAAA,IAAAA,EAAA,SAAAA,EAAA,GAAAG,CAAA;IACAH,EAAA,IAAAA,EAAA;EACA;EACA,OAAAA,EAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAAK,uBAAAC,iBAAA;EACA,IAAAC,GAAA;EACA,WAAAC,IAAA,IAAAF,iBAAA;IACA,MAAAG,UAAA,GAAAlB,MAAA,CAAAC,OAAA,CAAAgB,IAAA,CAAAnB,IAAA;IACA,MAAAqB,SAAA,GAAAD,UAAA,CAAAP,MAAA,YAAAO,UAAA,CAAAE,GAAA,GAAAC,GAAA,EAAAC,KAAA,SAAAD,GAAA,IAAAC,KAAA,IAAAC,IAAA;IACAP,GAAA,OAAAC,IAAA,CAAArB,IAAA,IAAAqB,IAAA,CAAApB,IAAA,IAAAoB,IAAA,CAAAO,MAAA,IAAAP,IAAA,CAAAtB,UAAA,GAAAwB,SAAA,KAAAF,IAAA,CAAAQ,SAAA;EACA;EACA,OAAAT,GAAA;AACA;;AAEA;AACA;AACA;AACA,SAAAU,aAAAC,eAAA;EACA,MAAA7B,IAAA;EACA,WAAAuB,GAAA,IAAAM,eAAA;IACA,IAAA3B,MAAA,CAAA4B,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAH,eAAA,EAAAN,GAAA;MACA,MAAAU,YAAA,GAAAV,GAAA,CAAAW,OAAA,CAAAC,oCAAA;MACAnC,IAAA,CAAAiC,YAAA,IAAAG,MAAA,CAAAP,eAAA,CAAAN,GAAA,GAAAW,OAAA,CAAAG,6BAAA;IACA;EACA;EACA,OAAArC,IAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}