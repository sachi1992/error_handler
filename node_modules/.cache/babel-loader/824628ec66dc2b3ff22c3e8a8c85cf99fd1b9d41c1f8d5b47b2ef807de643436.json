{"ast":null,"code":"import { _optionalChain } from '@sentry/utils';\nimport { loadModule, logger, fill, isThenable } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../../common/debug-build.js';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils.js';\n\n/** Tracing integration for node-postgres package */\nclass Postgres {\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = 'Postgres';\n  }\n\n  /**\n   * @inheritDoc\n   */\n\n  constructor(options = {}) {\n    this.name = Postgres.id;\n    this._usePgNative = !!options.usePgNative;\n    this._module = options.module;\n  }\n\n  /** @inheritdoc */\n  loadDependency() {\n    return this._module = this._module || loadModule('pg');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setupOnce(_, getCurrentHub) {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      DEBUG_BUILD && logger.log('Postgres Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n    const pkg = this.loadDependency();\n    if (!pkg) {\n      DEBUG_BUILD && logger.error('Postgres Integration was unable to require `pg` package.');\n      return;\n    }\n    const Client = this._usePgNative ? _optionalChain([pkg, 'access', _2 => _2.native, 'optionalAccess', _3 => _3.Client]) : pkg.Client;\n    if (!Client) {\n      DEBUG_BUILD && logger.error(\"Postgres Integration was unable to access 'pg-native' bindings.\");\n      return;\n    }\n\n    /**\n     * function (query, callback) => void\n     * function (query, params, callback) => void\n     * function (query) => Promise\n     * function (query, params) => Promise\n     * function (pg.Cursor) => pg.Cursor\n     */\n    fill(Client.prototype, 'query', function (orig) {\n      return function (config, values, callback) {\n        // eslint-disable-next-line deprecation/deprecation\n        const scope = getCurrentHub().getScope();\n        // eslint-disable-next-line deprecation/deprecation\n        const parentSpan = scope.getSpan();\n        const data = {\n          'db.system': 'postgresql'\n        };\n        try {\n          if (this.database) {\n            data['db.name'] = this.database;\n          }\n          if (this.host) {\n            data['server.address'] = this.host;\n          }\n          if (this.port) {\n            data['server.port'] = this.port;\n          }\n          if (this.user) {\n            data['db.user'] = this.user;\n          }\n        } catch (e) {\n          // ignore\n        }\n\n        // eslint-disable-next-line deprecation/deprecation\n        const span = _optionalChain([parentSpan, 'optionalAccess', _4 => _4.startChild, 'call', _5 => _5({\n          description: typeof config === 'string' ? config : config.text,\n          op: 'db',\n          origin: 'auto.db.postgres',\n          data\n        })]);\n        if (typeof callback === 'function') {\n          return orig.call(this, config, values, function (err, result) {\n            _optionalChain([span, 'optionalAccess', _6 => _6.end, 'call', _7 => _7()]);\n            callback(err, result);\n          });\n        }\n        if (typeof values === 'function') {\n          return orig.call(this, config, function (err, result) {\n            _optionalChain([span, 'optionalAccess', _8 => _8.end, 'call', _9 => _9()]);\n            values(err, result);\n          });\n        }\n        const rv = typeof values !== 'undefined' ? orig.call(this, config, values) : orig.call(this, config);\n        if (isThenable(rv)) {\n          return rv.then(res => {\n            _optionalChain([span, 'optionalAccess', _10 => _10.end, 'call', _11 => _11()]);\n            return res;\n          });\n        }\n        _optionalChain([span, 'optionalAccess', _12 => _12.end, 'call', _13 => _13()]);\n        return rv;\n      };\n    });\n  }\n}\nPostgres.__initStatic();\nexport { Postgres };","map":{"version":3,"names":["Postgres","__initStatic","id","constructor","options","name","_usePgNative","usePgNative","_module","module","loadDependency","loadModule","setupOnce","_","getCurrentHub","shouldDisableAutoInstrumentation","DEBUG_BUILD","logger","log","pkg","error","Client","_optionalChain","_2","native","_3","fill","prototype","orig","config","values","callback","scope","getScope","parentSpan","getSpan","data","database","host","port","user","e","span","_4","startChild","_5","description","text","op","origin","call","err","result","_6","end","_7","_8","_9","rv","isThenable","then","res","_10","_11","_12","_13"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry-internal/src/node/integrations/postgres.ts"],"sourcesContent":["import type { Hub } from '@sentry/core';\nimport type { EventProcessor } from '@sentry/types';\nimport { fill, isThenable, loadModule, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../../common/debug-build';\nimport type { LazyLoadedIntegration } from './lazy';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ntype PgClientQuery = (\n  config: unknown,\n  values?: unknown,\n  callback?: (err: unknown, result: unknown) => void,\n) => void | Promise<unknown>;\n\ninterface PgClient {\n  prototype: {\n    query: PgClientQuery;\n  };\n}\n\ninterface PgClientThis {\n  database?: string;\n  host?: string;\n  port?: number;\n  user?: string;\n}\n\ninterface PgOptions {\n  usePgNative?: boolean;\n  /**\n   * Supply your postgres module directly, instead of having Sentry attempt automatic resolution.\n   * Use this if you (a) use a module that's not `pg`, or (b) use a bundler that breaks resolution (e.g. esbuild).\n   *\n   * Usage:\n   * ```\n   * import pg from 'pg';\n   *\n   * Sentry.init({\n   *   integrations: [new Sentry.Integrations.Postgres({ module: pg })],\n   * });\n   * ```\n   */\n  module?: PGModule;\n}\n\ntype PGModule = { Client: PgClient; native: { Client: PgClient } | null };\n\n/** Tracing integration for node-postgres package */\nexport class Postgres implements LazyLoadedIntegration<PGModule> {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Postgres';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string;\n\n  private _usePgNative: boolean;\n\n  private _module?: PGModule;\n\n  public constructor(options: PgOptions = {}) {\n    this.name = Postgres.id;\n    this._usePgNative = !!options.usePgNative;\n    this._module = options.module;\n  }\n\n  /** @inheritdoc */\n  public loadDependency(): PGModule | undefined {\n    return (this._module = this._module || loadModule('pg'));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      DEBUG_BUILD && logger.log('Postgres Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    const pkg = this.loadDependency();\n\n    if (!pkg) {\n      DEBUG_BUILD && logger.error('Postgres Integration was unable to require `pg` package.');\n      return;\n    }\n\n    const Client = this._usePgNative ? pkg.native?.Client : pkg.Client;\n\n    if (!Client) {\n      DEBUG_BUILD && logger.error(\"Postgres Integration was unable to access 'pg-native' bindings.\");\n      return;\n    }\n\n    /**\n     * function (query, callback) => void\n     * function (query, params, callback) => void\n     * function (query) => Promise\n     * function (query, params) => Promise\n     * function (pg.Cursor) => pg.Cursor\n     */\n    fill(Client.prototype, 'query', function (orig: PgClientQuery) {\n      return function (this: PgClientThis, config: unknown, values: unknown, callback: unknown) {\n        // eslint-disable-next-line deprecation/deprecation\n        const scope = getCurrentHub().getScope();\n        // eslint-disable-next-line deprecation/deprecation\n        const parentSpan = scope.getSpan();\n\n        const data: Record<string, string | number> = {\n          'db.system': 'postgresql',\n        };\n\n        try {\n          if (this.database) {\n            data['db.name'] = this.database;\n          }\n          if (this.host) {\n            data['server.address'] = this.host;\n          }\n          if (this.port) {\n            data['server.port'] = this.port;\n          }\n          if (this.user) {\n            data['db.user'] = this.user;\n          }\n        } catch (e) {\n          // ignore\n        }\n\n        // eslint-disable-next-line deprecation/deprecation\n        const span = parentSpan?.startChild({\n          description: typeof config === 'string' ? config : (config as { text: string }).text,\n          op: 'db',\n          origin: 'auto.db.postgres',\n          data,\n        });\n\n        if (typeof callback === 'function') {\n          return orig.call(this, config, values, function (err: Error, result: unknown) {\n            span?.end();\n            callback(err, result);\n          });\n        }\n\n        if (typeof values === 'function') {\n          return orig.call(this, config, function (err: Error, result: unknown) {\n            span?.end();\n            values(err, result);\n          });\n        }\n\n        const rv = typeof values !== 'undefined' ? orig.call(this, config, values) : orig.call(this, config);\n\n        if (isThenable(rv)) {\n          return rv.then((res: unknown) => {\n            span?.end();\n            return res;\n          });\n        }\n\n        span?.end();\n        return rv;\n      };\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}