{"ast":null,"code":"import { dropUndefinedKeys } from '@sentry/utils';\nimport { DEFAULT_ENVIRONMENT } from '../constants.js';\nimport { getClient, getCurrentScope } from '../exports.js';\nimport { getRootSpan } from '../utils/getRootSpan.js';\nimport { spanToJSON, spanIsSampled } from '../utils/spanUtils.js';\n\n/**\n * Creates a dynamic sampling context from a client.\n *\n * Dispatches the `createDsc` lifecycle hook as a side effect.\n */\nfunction getDynamicSamplingContextFromClient(trace_id, client, scope) {\n  const options = client.getOptions();\n  const {\n    publicKey: public_key\n  } = client.getDsn() || {};\n  // TODO(v8): Remove segment from User\n  // eslint-disable-next-line deprecation/deprecation\n  const {\n    segment: user_segment\n  } = scope && scope.getUser() || {};\n  const dsc = dropUndefinedKeys({\n    environment: options.environment || DEFAULT_ENVIRONMENT,\n    release: options.release,\n    user_segment,\n    public_key,\n    trace_id\n  });\n  client.emit && client.emit('createDsc', dsc);\n  return dsc;\n}\n\n/**\n * A Span with a frozen dynamic sampling context.\n */\n\n/**\n * Creates a dynamic sampling context from a span (and client and scope)\n *\n * @param span the span from which a few values like the root span name and sample rate are extracted.\n *\n * @returns a dynamic sampling context\n */\nfunction getDynamicSamplingContextFromSpan(span) {\n  const client = getClient();\n  if (!client) {\n    return {};\n  }\n\n  // passing emit=false here to only emit later once the DSC is actually populated\n  const dsc = getDynamicSamplingContextFromClient(spanToJSON(span).trace_id || '', client, getCurrentScope());\n\n  // TODO (v8): Remove v7FrozenDsc as a Transaction will no longer have _frozenDynamicSamplingContext\n  const txn = getRootSpan(span);\n  if (!txn) {\n    return dsc;\n  }\n\n  // TODO (v8): Remove v7FrozenDsc as a Transaction will no longer have _frozenDynamicSamplingContext\n  // For now we need to avoid breaking users who directly created a txn with a DSC, where this field is still set.\n  // @see Transaction class constructor\n  const v7FrozenDsc = txn && txn._frozenDynamicSamplingContext;\n  if (v7FrozenDsc) {\n    return v7FrozenDsc;\n  }\n\n  // TODO (v8): Replace txn.metadata with txn.attributes[]\n  // We can't do this yet because attributes aren't always set yet.\n  // eslint-disable-next-line deprecation/deprecation\n  const {\n    sampleRate: maybeSampleRate,\n    source\n  } = txn.metadata;\n  if (maybeSampleRate != null) {\n    dsc.sample_rate = `${maybeSampleRate}`;\n  }\n\n  // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n  const jsonSpan = spanToJSON(txn);\n\n  // after JSON conversion, txn.name becomes jsonSpan.description\n  if (source && source !== 'url') {\n    dsc.transaction = jsonSpan.description;\n  }\n  dsc.sampled = String(spanIsSampled(txn));\n  client.emit && client.emit('createDsc', dsc);\n  return dsc;\n}\nexport { getDynamicSamplingContextFromClient, getDynamicSamplingContextFromSpan };","map":{"version":3,"names":["getDynamicSamplingContextFromClient","trace_id","client","scope","options","getOptions","publicKey","public_key","getDsn","segment","user_segment","getUser","dsc","dropUndefinedKeys","environment","DEFAULT_ENVIRONMENT","release","emit","getDynamicSamplingContextFromSpan","span","getClient","spanToJSON","getCurrentScope","txn","getRootSpan","v7FrozenDsc","_frozenDynamicSamplingContext","sampleRate","maybeSampleRate","source","metadata","sample_rate","jsonSpan","transaction","description","sampled","String","spanIsSampled"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/tracing/dynamicSamplingContext.ts"],"sourcesContent":["import type { Client, DynamicSamplingContext, Scope, Span, Transaction } from '@sentry/types';\nimport { dropUndefinedKeys } from '@sentry/utils';\n\nimport { DEFAULT_ENVIRONMENT } from '../constants';\nimport { getClient, getCurrentScope } from '../exports';\nimport { getRootSpan } from '../utils/getRootSpan';\nimport { spanIsSampled, spanToJSON } from '../utils/spanUtils';\n\n/**\n * Creates a dynamic sampling context from a client.\n *\n * Dispatches the `createDsc` lifecycle hook as a side effect.\n */\nexport function getDynamicSamplingContextFromClient(\n  trace_id: string,\n  client: Client,\n  scope?: Scope,\n): DynamicSamplingContext {\n  const options = client.getOptions();\n\n  const { publicKey: public_key } = client.getDsn() || {};\n  // TODO(v8): Remove segment from User\n  // eslint-disable-next-line deprecation/deprecation\n  const { segment: user_segment } = (scope && scope.getUser()) || {};\n\n  const dsc = dropUndefinedKeys({\n    environment: options.environment || DEFAULT_ENVIRONMENT,\n    release: options.release,\n    user_segment,\n    public_key,\n    trace_id,\n  }) as DynamicSamplingContext;\n\n  client.emit && client.emit('createDsc', dsc);\n\n  return dsc;\n}\n\n/**\n * A Span with a frozen dynamic sampling context.\n */\ntype TransactionWithV7FrozenDsc = Transaction & { _frozenDynamicSamplingContext?: DynamicSamplingContext };\n\n/**\n * Creates a dynamic sampling context from a span (and client and scope)\n *\n * @param span the span from which a few values like the root span name and sample rate are extracted.\n *\n * @returns a dynamic sampling context\n */\nexport function getDynamicSamplingContextFromSpan(span: Span): Readonly<Partial<DynamicSamplingContext>> {\n  const client = getClient();\n  if (!client) {\n    return {};\n  }\n\n  // passing emit=false here to only emit later once the DSC is actually populated\n  const dsc = getDynamicSamplingContextFromClient(spanToJSON(span).trace_id || '', client, getCurrentScope());\n\n  // TODO (v8): Remove v7FrozenDsc as a Transaction will no longer have _frozenDynamicSamplingContext\n  const txn = getRootSpan(span) as TransactionWithV7FrozenDsc | undefined;\n  if (!txn) {\n    return dsc;\n  }\n\n  // TODO (v8): Remove v7FrozenDsc as a Transaction will no longer have _frozenDynamicSamplingContext\n  // For now we need to avoid breaking users who directly created a txn with a DSC, where this field is still set.\n  // @see Transaction class constructor\n  const v7FrozenDsc = txn && txn._frozenDynamicSamplingContext;\n  if (v7FrozenDsc) {\n    return v7FrozenDsc;\n  }\n\n  // TODO (v8): Replace txn.metadata with txn.attributes[]\n  // We can't do this yet because attributes aren't always set yet.\n  // eslint-disable-next-line deprecation/deprecation\n  const { sampleRate: maybeSampleRate, source } = txn.metadata;\n  if (maybeSampleRate != null) {\n    dsc.sample_rate = `${maybeSampleRate}`;\n  }\n\n  // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n  const jsonSpan = spanToJSON(txn);\n\n  // after JSON conversion, txn.name becomes jsonSpan.description\n  if (source && source !== 'url') {\n    dsc.transaction = jsonSpan.description;\n  }\n\n  dsc.sampled = String(spanIsSampled(txn));\n\n  client.emit && client.emit('createDsc', dsc);\n\n  return dsc;\n}\n"],"mappings":";;;;;;AAQA;AACA;AACA;AACA;AACA;AACO,SAASA,mCAAmCA,CACjDC,QAAQ,EACRC,MAAM,EACNC,KAAK,EACmB;EACxB,MAAMC,OAAQ,GAAEF,MAAM,CAACG,UAAU,EAAE;EAEnC,MAAM;IAAEC,SAAS,EAAEC;EAAA,CAAa,GAAEL,MAAM,CAACM,MAAM,EAAG,IAAG,EAAE;EACzD;EACA;EACE,MAAM;IAAEC,OAAO,EAAEC;EAAa,IAAKP,KAAA,IAASA,KAAK,CAACQ,OAAO,EAAE,IAAK,EAAE;EAElE,MAAMC,GAAA,GAAMC,iBAAiB,CAAC;IAC5BC,WAAW,EAAEV,OAAO,CAACU,WAAA,IAAeC,mBAAmB;IACvDC,OAAO,EAAEZ,OAAO,CAACY,OAAO;IACxBN,YAAY;IACZH,UAAU;IACVN;EACJ,CAAG,CAAE;EAEHC,MAAM,CAACe,IAAA,IAAQf,MAAM,CAACe,IAAI,CAAC,WAAW,EAAEL,GAAG,CAAC;EAE5C,OAAOA,GAAG;AACZ;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASM,iCAAiCA,CAACC,IAAI,EAAmD;EACvG,MAAMjB,MAAA,GAASkB,SAAS,EAAE;EAC1B,IAAI,CAAClB,MAAM,EAAE;IACX,OAAO,EAAE;EACb;;EAEA;EACE,MAAMU,GAAI,GAAEZ,mCAAmC,CAACqB,UAAU,CAACF,IAAI,CAAC,CAAClB,QAAS,IAAG,EAAE,EAAEC,MAAM,EAAEoB,eAAe,EAAE,CAAC;;EAE7G;EACE,MAAMC,GAAI,GAAEC,WAAW,CAACL,IAAI,CAAE;EAC9B,IAAI,CAACI,GAAG,EAAE;IACR,OAAOX,GAAG;EACd;;EAEA;EACA;EACA;EACE,MAAMa,WAAY,GAAEF,GAAA,IAAOA,GAAG,CAACG,6BAA6B;EAC5D,IAAID,WAAW,EAAE;IACf,OAAOA,WAAW;EACtB;;EAEA;EACA;EACA;EACE,MAAM;IAAEE,UAAU,EAAEC,eAAe;IAAEC;EAAA,CAAS,GAAEN,GAAG,CAACO,QAAQ;EAC5D,IAAIF,eAAgB,IAAG,IAAI,EAAE;IAC3BhB,GAAG,CAACmB,WAAY,GAAG,GAAAH,eAAA;EACA;;EAEA;EACA,MAAAI,QAAA,GAAAX,UAAA,CAAAE,GAAA;;EAEA;EACA,IAAAM,MAAA,IAAAA,MAAA;IACAjB,GAAA,CAAAqB,WAAA,GAAAD,QAAA,CAAAE,WAAA;EACA;EAEAtB,GAAA,CAAAuB,OAAA,GAAAC,MAAA,CAAAC,aAAA,CAAAd,GAAA;EAEArB,MAAA,CAAAe,IAAA,IAAAf,MAAA,CAAAe,IAAA,cAAAL,GAAA;EAEA,OAAAA,GAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}