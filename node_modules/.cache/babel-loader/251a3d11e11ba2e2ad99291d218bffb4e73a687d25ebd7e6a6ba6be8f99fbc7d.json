{"ast":null,"code":"import { Integrations } from '@sentry/core';\nexport { FunctionToString, Hub, InboundFilters, ModuleMetadata, SDK_VERSION, SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, Scope, addBreadcrumb, addEventProcessor, addGlobalEventProcessor, addIntegration, addTracingExtensions, captureEvent, captureException, captureMessage, captureSession, close, configureScope, continueTrace, createTransport, endSession, extractTraceparentData, flush, functionToStringIntegration, getActiveSpan, getActiveTransaction, getClient, getCurrentHub, getCurrentScope, getHubFromCarrier, getSpanStatusFromHttpCode, inboundFiltersIntegration, isInitialized, lastEventId, makeMain, makeMultiplexedTransport, metrics, moduleMetadataIntegration, parameterize, setContext, setCurrentClient, setExtra, setExtras, setHttpStatus, setMeasurement, setTag, setTags, setUser, spanStatusfromHttpCode, startInactiveSpan, startSession, startSpan, startSpanManual, startTransaction, trace, withActiveSpan, withIsolationScope, withScope } from '@sentry/core';\nimport { WINDOW } from './helpers.js';\nexport { WINDOW } from './helpers.js';\nexport { BrowserClient } from './client.js';\nexport { makeFetchTransport } from './transports/fetch.js';\nexport { makeXHRTransport } from './transports/xhr.js';\nexport { chromeStackLineParser, defaultStackLineParsers, defaultStackParser, geckoStackLineParser, opera10StackLineParser, opera11StackLineParser, winjsStackLineParser } from './stack-parsers.js';\nexport { eventFromException, eventFromMessage, exceptionFromError } from './eventbuilder.js';\nexport { createUserFeedbackEnvelope } from './userfeedback.js';\nexport { captureUserFeedback, defaultIntegrations, forceLoad, getDefaultIntegrations, init, onLoad, showReportDialog, wrap } from './sdk.js';\nexport { Breadcrumbs, breadcrumbsIntegration } from './integrations/breadcrumbs.js';\nexport { Dedupe, dedupeIntegration } from './integrations/dedupe.js';\nexport { GlobalHandlers, globalHandlersIntegration } from './integrations/globalhandlers.js';\nexport { HttpContext, httpContextIntegration } from './integrations/httpcontext.js';\nexport { LinkedErrors, linkedErrorsIntegration } from './integrations/linkederrors.js';\nexport { TryCatch, browserApiErrorsIntegration } from './integrations/trycatch.js';\nimport * as index from './integrations/index.js';\nexport { Replay, getReplay, replayIntegration } from '@sentry/replay';\nexport { ReplayCanvas, replayCanvasIntegration } from '@sentry-internal/replay-canvas';\nexport { Feedback, feedbackIntegration, sendFeedback } from '@sentry-internal/feedback';\nexport { BrowserTracing, browserTracingIntegration, defaultRequestInstrumentationOptions, instrumentOutgoingRequests, startBrowserTracingNavigationSpan, startBrowserTracingPageLoadSpan } from '@sentry-internal/tracing';\nexport { makeBrowserOfflineTransport } from './transports/offline.js';\nexport { onProfilingStartRouteTransaction } from './profiling/hubextensions.js';\nexport { BrowserProfilingIntegration, browserProfilingIntegration } from './profiling/integration.js';\nlet windowIntegrations = {};\n\n// This block is needed to add compatibility with the integrations packages when used with a CDN\nif (WINDOW.Sentry && WINDOW.Sentry.Integrations) {\n  windowIntegrations = WINDOW.Sentry.Integrations;\n}\n\n/** @deprecated Import the integration function directly, e.g. `inboundFiltersIntegration()` instead of `new Integrations.InboundFilter(). */\nconst INTEGRATIONS = {\n  ...windowIntegrations,\n  // eslint-disable-next-line deprecation/deprecation\n  ...Integrations,\n  ...index\n};\nexport { INTEGRATIONS as Integrations };","map":{"version":3,"names":["windowIntegrations","WINDOW","Sentry","Integrations","INTEGRATIONS","index"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/src/index.ts"],"sourcesContent":["export * from './exports';\n\nimport { Integrations as CoreIntegrations } from '@sentry/core';\n\nimport { WINDOW } from './helpers';\nimport * as BrowserIntegrations from './integrations';\n\nlet windowIntegrations = {};\n\n// This block is needed to add compatibility with the integrations packages when used with a CDN\nif (WINDOW.Sentry && WINDOW.Sentry.Integrations) {\n  windowIntegrations = WINDOW.Sentry.Integrations;\n}\n\n/** @deprecated Import the integration function directly, e.g. `inboundFiltersIntegration()` instead of `new Integrations.InboundFilter(). */\nconst INTEGRATIONS = {\n  ...windowIntegrations,\n  // eslint-disable-next-line deprecation/deprecation\n  ...CoreIntegrations,\n  ...BrowserIntegrations,\n};\n\n// eslint-disable-next-line deprecation/deprecation\nexport { INTEGRATIONS as Integrations };\n\nexport {\n  // eslint-disable-next-line deprecation/deprecation\n  Replay,\n  replayIntegration,\n  getReplay,\n} from '@sentry/replay';\nexport type {\n  ReplayEventType,\n  ReplayEventWithTime,\n  ReplayBreadcrumbFrame,\n  ReplayBreadcrumbFrameEvent,\n  ReplayOptionFrameEvent,\n  ReplayFrame,\n  ReplayFrameEvent,\n  ReplaySpanFrame,\n  ReplaySpanFrameEvent,\n} from '@sentry/replay';\n\nexport {\n  // eslint-disable-next-line deprecation/deprecation\n  ReplayCanvas,\n  replayCanvasIntegration,\n} from '@sentry-internal/replay-canvas';\n\nexport {\n  // eslint-disable-next-line deprecation/deprecation\n  Feedback,\n  feedbackIntegration,\n  sendFeedback,\n} from '@sentry-internal/feedback';\n\nexport {\n  // eslint-disable-next-line deprecation/deprecation\n  BrowserTracing,\n  defaultRequestInstrumentationOptions,\n  instrumentOutgoingRequests,\n  browserTracingIntegration,\n  startBrowserTracingNavigationSpan,\n  startBrowserTracingPageLoadSpan,\n} from '@sentry-internal/tracing';\nexport type { RequestInstrumentationOptions } from '@sentry-internal/tracing';\nexport {\n  addTracingExtensions,\n  setMeasurement,\n  // eslint-disable-next-line deprecation/deprecation\n  extractTraceparentData,\n  // eslint-disable-next-line deprecation/deprecation\n  getActiveTransaction,\n  // eslint-disable-next-line deprecation/deprecation\n  spanStatusfromHttpCode,\n  getSpanStatusFromHttpCode,\n  setHttpStatus,\n  // eslint-disable-next-line deprecation/deprecation\n  trace,\n  makeMultiplexedTransport,\n  // eslint-disable-next-line deprecation/deprecation\n  ModuleMetadata,\n  moduleMetadataIntegration,\n} from '@sentry/core';\nexport type { SpanStatusType } from '@sentry/core';\nexport type { Span } from '@sentry/types';\nexport { makeBrowserOfflineTransport } from './transports/offline';\nexport { onProfilingStartRouteTransaction } from './profiling/hubextensions';\nexport {\n  // eslint-disable-next-line deprecation/deprecation\n  BrowserProfilingIntegration,\n  browserProfilingIntegration,\n} from './profiling/integration';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAOA,IAAIA,kBAAA,GAAqB,EAAE;;AAE3B;AACA,IAAIC,MAAM,CAACC,MAAO,IAAGD,MAAM,CAACC,MAAM,CAACC,YAAY,EAAE;EAC/CH,kBAAA,GAAqBC,MAAM,CAACC,MAAM,CAACC,YAAY;AACjD;;AAEA;AACA,MAAMC,YAAA,GAAe;EACnB,GAAGJ,kBAAkB;EACvB;EACE,GAAGG,YAAgB;EACnB,GAAGE;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}