{"ast":null,"code":"import { bindReporter } from './lib/bindReporter.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Calculates the [CLS](https://web.dev/cls/) value for the current page and\n * calls the `callback` function once the value is ready to be reported, along\n * with all `layout-shift` performance entries that were used in the metric\n * value calculation. The reported value is a `double` (corresponding to a\n * [layout shift score](https://web.dev/cls/#layout-shift-score)).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** CLS should be continually monitored for changes throughout\n * the entire lifespan of a page—including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nconst onCLS = onReport => {\n  const metric = initMetric('CLS', 0);\n  let report;\n  let sessionValue = 0;\n  let sessionEntries = [];\n\n  // const handleEntries = (entries: Metric['entries']) => {\n  const handleEntries = entries => {\n    entries.forEach(entry => {\n      // Only count layout shifts without recent user input.\n      if (!entry.hadRecentInput) {\n        const firstSessionEntry = sessionEntries[0];\n        const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n        // If the entry occurred less than 1 second after the previous entry and\n        // less than 5 seconds after the first entry in the session, include the\n        // entry in the current session. Otherwise, start a new session.\n        if (sessionValue && sessionEntries.length !== 0 && entry.startTime - lastSessionEntry.startTime < 1000 && entry.startTime - firstSessionEntry.startTime < 5000) {\n          sessionValue += entry.value;\n          sessionEntries.push(entry);\n        } else {\n          sessionValue = entry.value;\n          sessionEntries = [entry];\n        }\n\n        // If the current session value is larger than the current CLS value,\n        // update CLS and the entries contributing to it.\n        if (sessionValue > metric.value) {\n          metric.value = sessionValue;\n          metric.entries = sessionEntries;\n          if (report) {\n            report();\n          }\n        }\n      }\n    });\n  };\n  const po = observe('layout-shift', handleEntries);\n  if (po) {\n    report = bindReporter(onReport, metric);\n    const stopListening = () => {\n      handleEntries(po.takeRecords());\n      report(true);\n    };\n    onHidden(stopListening);\n    return stopListening;\n  }\n  return;\n};\nexport { onCLS };","map":{"version":3,"names":["onCLS","onReport","metric","initMetric","report","sessionValue","sessionEntries","handleEntries","entries","forEach","entry","hadRecentInput","firstSessionEntry","lastSessionEntry","length","startTime","value","push","po","observe","bindReporter","stopListening","takeRecords","onHidden"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry-internal/src/browser/web-vitals/getCLS.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport type { CLSMetric, ReportCallback, StopListening } from './types';\n\n/**\n * Calculates the [CLS](https://web.dev/cls/) value for the current page and\n * calls the `callback` function once the value is ready to be reported, along\n * with all `layout-shift` performance entries that were used in the metric\n * value calculation. The reported value is a `double` (corresponding to a\n * [layout shift score](https://web.dev/cls/#layout-shift-score)).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** CLS should be continually monitored for changes throughout\n * the entire lifespan of a page—including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nexport const onCLS = (onReport: ReportCallback): StopListening | undefined => {\n  const metric = initMetric('CLS', 0);\n  let report: ReturnType<typeof bindReporter>;\n\n  let sessionValue = 0;\n  let sessionEntries: PerformanceEntry[] = [];\n\n  // const handleEntries = (entries: Metric['entries']) => {\n  const handleEntries = (entries: LayoutShift[]): void => {\n    entries.forEach(entry => {\n      // Only count layout shifts without recent user input.\n      if (!entry.hadRecentInput) {\n        const firstSessionEntry = sessionEntries[0];\n        const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n        // If the entry occurred less than 1 second after the previous entry and\n        // less than 5 seconds after the first entry in the session, include the\n        // entry in the current session. Otherwise, start a new session.\n        if (\n          sessionValue &&\n          sessionEntries.length !== 0 &&\n          entry.startTime - lastSessionEntry.startTime < 1000 &&\n          entry.startTime - firstSessionEntry.startTime < 5000\n        ) {\n          sessionValue += entry.value;\n          sessionEntries.push(entry);\n        } else {\n          sessionValue = entry.value;\n          sessionEntries = [entry];\n        }\n\n        // If the current session value is larger than the current CLS value,\n        // update CLS and the entries contributing to it.\n        if (sessionValue > metric.value) {\n          metric.value = sessionValue;\n          metric.entries = sessionEntries;\n          if (report) {\n            report();\n          }\n        }\n      }\n    });\n  };\n\n  const po = observe('layout-shift', handleEntries);\n  if (po) {\n    report = bindReporter(onReport, metric);\n\n    const stopListening = (): void => {\n      handleEntries(po.takeRecords() as CLSMetric['entries']);\n      report(true);\n    };\n\n    onHidden(stopListening);\n\n    return stopListening;\n  }\n\n  return;\n};\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa,MAAAA,KAAA,GAASC,QAAQ,IAAgD;EAC5E,MAAMC,MAAA,GAASC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC;EACnC,IAAIC,MAAM;EAEV,IAAIC,YAAa,GAAE,CAAC;EACpB,IAAIC,cAAc,GAAuB,EAAE;;EAE7C;EACE,MAAMC,aAAA,GAAiBC,OAAO,IAA0B;IACtDA,OAAO,CAACC,OAAO,CAACC,KAAA,IAAS;MAC7B;MACM,IAAI,CAACA,KAAK,CAACC,cAAc,EAAE;QACzB,MAAMC,iBAAkB,GAAEN,cAAc,CAAC,CAAC,CAAC;QAC3C,MAAMO,gBAAiB,GAAEP,cAAc,CAACA,cAAc,CAACQ,MAAA,GAAS,CAAC,CAAC;;QAE1E;QACA;QACA;QACQ,IACET,YAAa,IACbC,cAAc,CAACQ,MAAO,KAAI,CAAE,IAC5BJ,KAAK,CAACK,SAAU,GAAEF,gBAAgB,CAACE,SAAA,GAAY,IAAK,IACpDL,KAAK,CAACK,SAAA,GAAYH,iBAAiB,CAACG,SAAA,GAAY,MAChD;UACAV,YAAa,IAAGK,KAAK,CAACM,KAAK;UAC3BV,cAAc,CAACW,IAAI,CAACP,KAAK,CAAC;QACpC,OAAe;UACLL,YAAa,GAAEK,KAAK,CAACM,KAAK;UAC1BV,cAAe,GAAE,CAACI,KAAK,CAAC;QAClC;;QAEA;QACA;QACQ,IAAIL,YAAA,GAAeH,MAAM,CAACc,KAAK,EAAE;UAC/Bd,MAAM,CAACc,KAAM,GAAEX,YAAY;UAC3BH,MAAM,CAACM,OAAQ,GAAEF,cAAc;UAC/B,IAAIF,MAAM,EAAE;YACVA,MAAM,EAAE;UACpB;QACA;MACA;IACA,CAAK,CAAC;EACN,CAAG;EAED,MAAMc,EAAA,GAAKC,OAAO,CAAC,cAAc,EAAEZ,aAAa,CAAC;EACjD,IAAIW,EAAE,EAAE;IACNd,MAAA,GAASgB,YAAY,CAACnB,QAAQ,EAAEC,MAAM,CAAC;IAEvC,MAAMmB,aAAA,GAAgBA,CAAA,KAAY;MAChCd,aAAa,CAACW,EAAE,CAACI,WAAW,GAA2B;MACvDlB,MAAM,CAAC,IAAI,CAAC;IAClB,CAAK;IAEDmB,QAAQ,CAACF,aAAa,CAAC;IAEvB,OAAOA,aAAa;EACxB;EAEE;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}