{"ast":null,"code":"var _jsxFileName = \"/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/src/errorHandler/boundary_error/ErrorFallback.tsx\",\n  _s = $RefreshSig$();\nimport { useErrorBoundary } from 'react-error-boundary';\nimport { useEffect } from 'react';\n// import { handleToastMessage } from 'utilities'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ErrorFallback = ({\n  error,\n  errorType\n  // resetErrorBoundary\n}) => {\n  _s();\n  const {\n    resetBoundary\n  } = useErrorBoundary();\n\n  //   same function\n\n  //  const retryAction = useCallback(() => {\n  //    // This function will be called when the user clicks \"Try again\"\n  //    // You can define custom retry logic here\n  //    // For example, you can retry an API call, reload a component, etc.\n  //    console.log('Retrying action...')\n  //    // Here, you can add your specific retry logic, for example, you can reload the page\n  //    window.location.reload()\n  //  }, [])\n\n  useEffect(() => {\n    // if (error !== null || error !== '') {\n    //  page crash handler\n    window.addEventListener('error', e => {\n      if (e.type === 'error') {\n        const resizeObserverErrDiv = document.getElementById('webpack-dev-server-client-overlay-div');\n        const resizeObserverErr = document.getElementById('webpack-dev-server-client-overlay');\n        if (resizeObserverErr !== null) {\n          resizeObserverErr.setAttribute('style', 'display: none');\n        }\n        if (resizeObserverErrDiv !== null) {\n          resizeObserverErrDiv.setAttribute('style', 'display: none');\n        }\n      }\n    });\n    // }\n  }, []);\n  if (errorType === 'formValidation') {\n    // handleToastMessage(error.message, 'error')\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Something went wrong\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\"Something went wrong \", errorType !== null && errorType !== void 0 ? errorType : '', \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick:\n      // resetErrorBoundary\n      resetBoundary,\n      children: \"Try again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(ErrorFallback, \"dolDyc7TQquBXdsiMAcg7OHplp4=\", false, function () {\n  return [useErrorBoundary];\n});\n_c = ErrorFallback;\nexport default ErrorFallback;\nvar _c;\n$RefreshReg$(_c, \"ErrorFallback\");","map":{"version":3,"names":["useErrorBoundary","useEffect","jsxDEV","_jsxDEV","ErrorFallback","error","errorType","_s","resetBoundary","window","addEventListener","e","type","resizeObserverErrDiv","document","getElementById","resizeObserverErr","setAttribute","children","fileName","_jsxFileName","lineNumber","columnNumber","message","style","color","onClick","_c","$RefreshReg$"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/src/errorHandler/boundary_error/ErrorFallback.tsx"],"sourcesContent":["import { useErrorBoundary } from 'react-error-boundary'\n\nimport { useEffect } from 'react'\n// import { handleToastMessage } from 'utilities'\n\ntype IErrorFallbackProps = {\n  error: any\n  errorType?: string\n  // resetErrorBoundary: any\n}\n\nconst ErrorFallback = ({\n  error,\n  errorType\n  // resetErrorBoundary\n}: IErrorFallbackProps): JSX.Element => {\n  const { resetBoundary } = useErrorBoundary()\n\n  //   same function\n\n  //  const retryAction = useCallback(() => {\n  //    // This function will be called when the user clicks \"Try again\"\n  //    // You can define custom retry logic here\n  //    // For example, you can retry an API call, reload a component, etc.\n  //    console.log('Retrying action...')\n  //    // Here, you can add your specific retry logic, for example, you can reload the page\n  //    window.location.reload()\n  //  }, [])\n\n  useEffect(() => {\n    // if (error !== null || error !== '') {\n    //  page crash handler\n    window.addEventListener('error', (e) => {\n      if (e.type === 'error') {\n        const resizeObserverErrDiv = document.getElementById(\n          'webpack-dev-server-client-overlay-div'\n        )\n        const resizeObserverErr = document.getElementById(\n          'webpack-dev-server-client-overlay'\n        )\n        if (resizeObserverErr !== null) {\n          resizeObserverErr.setAttribute('style', 'display: none')\n        }\n        if (resizeObserverErrDiv !== null) {\n          resizeObserverErrDiv.setAttribute('style', 'display: none')\n        }\n      }\n    })\n    // }\n  }, [])\n\n  if (errorType === 'formValidation') {\n    // handleToastMessage(error.message, 'error')\n    return (\n      <div>\n        <h2>Something went wrong</h2>\n        <p>{error.message}</p>\n        {/* Add additional error handling or instructions here */}\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <h2>\n        <b>Something went wrong {errorType ?? ''} </b>\n      </h2>\n\n      <p style={{ color: 'red' }}>{error.message}</p>\n\n      <button\n        onClick={\n          // resetErrorBoundary\n          resetBoundary\n        }\n      >\n        Try again\n      </button>\n    </div>\n  )\n}\n\nexport default ErrorFallback\n"],"mappings":";;AAAA,SAASA,gBAAgB,QAAQ,sBAAsB;AAEvD,SAASC,SAAS,QAAQ,OAAO;AACjC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAQA,MAAMC,aAAa,GAAGA,CAAC;EACrBC,KAAK;EACLC;EACA;AACmB,CAAC,KAAkB;EAAAC,EAAA;EACtC,MAAM;IAAEC;EAAc,CAAC,GAAGR,gBAAgB,CAAC,CAAC;;EAE5C;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAC,SAAS,CAAC,MAAM;IACd;IACA;IACAQ,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAGC,CAAC,IAAK;MACtC,IAAIA,CAAC,CAACC,IAAI,KAAK,OAAO,EAAE;QACtB,MAAMC,oBAAoB,GAAGC,QAAQ,CAACC,cAAc,CAClD,uCACF,CAAC;QACD,MAAMC,iBAAiB,GAAGF,QAAQ,CAACC,cAAc,CAC/C,mCACF,CAAC;QACD,IAAIC,iBAAiB,KAAK,IAAI,EAAE;UAC9BA,iBAAiB,CAACC,YAAY,CAAC,OAAO,EAAE,eAAe,CAAC;QAC1D;QACA,IAAIJ,oBAAoB,KAAK,IAAI,EAAE;UACjCA,oBAAoB,CAACI,YAAY,CAAC,OAAO,EAAE,eAAe,CAAC;QAC7D;MACF;IACF,CAAC,CAAC;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIX,SAAS,KAAK,gBAAgB,EAAE;IAClC;IACA,oBACEH,OAAA;MAAAe,QAAA,gBACEf,OAAA;QAAAe,QAAA,EAAI;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7BnB,OAAA;QAAAe,QAAA,EAAIb,KAAK,CAACkB;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEnB,CAAC;EAEV;EAEA,oBACEnB,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAAe,QAAA,eACEf,OAAA;QAAAe,QAAA,GAAG,uBAAqB,EAACZ,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,EAAE,EAAC,GAAC;MAAA;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC,eAELnB,OAAA;MAAGqB,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAP,QAAA,EAAEb,KAAK,CAACkB;IAAO;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE/CnB,OAAA;MACEuB,OAAO;MACL;MACAlB,aACD;MAAAU,QAAA,EACF;IAED;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAAf,EAAA,CArEKH,aAAa;EAAA,QAKSJ,gBAAgB;AAAA;AAAA2B,EAAA,GALtCvB,aAAa;AAuEnB,eAAeA,aAAa;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}