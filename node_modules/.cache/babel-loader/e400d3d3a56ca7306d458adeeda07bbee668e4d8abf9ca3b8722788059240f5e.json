{"ast":null,"code":"import { _optionalChain } from '@sentry/utils';\nimport { loadModule, logger, fill, arrayify, isThenable } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../../common/debug-build.js';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils.js';\n\n/** Tracing integration for Apollo */\nclass Apollo {\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = 'Apollo';\n  }\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n  constructor(options = {\n    useNestjs: false\n  }) {\n    this.name = Apollo.id;\n    this._useNest = !!options.useNestjs;\n  }\n\n  /** @inheritdoc */\n  loadDependency() {\n    if (this._useNest) {\n      this._module = this._module || loadModule('@nestjs/graphql');\n    } else {\n      this._module = this._module || loadModule('apollo-server-core');\n    }\n    return this._module;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setupOnce(_, getCurrentHub) {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      DEBUG_BUILD && logger.log('Apollo Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n    if (this._useNest) {\n      const pkg = this.loadDependency();\n      if (!pkg) {\n        DEBUG_BUILD && logger.error('Apollo-NestJS Integration was unable to require @nestjs/graphql package.');\n        return;\n      }\n\n      /**\n       * Iterate over resolvers of NestJS ResolversExplorerService before schemas are constructed.\n       */\n      fill(pkg.GraphQLFactory.prototype, 'mergeWithSchema', function (orig) {\n        return function (...args) {\n          fill(this.resolversExplorerService, 'explore', function (orig) {\n            return function () {\n              const resolvers = arrayify(orig.call(this));\n              const instrumentedResolvers = instrumentResolvers(resolvers, getCurrentHub);\n              return instrumentedResolvers;\n            };\n          });\n          return orig.call(this, ...args);\n        };\n      });\n    } else {\n      const pkg = this.loadDependency();\n      if (!pkg) {\n        DEBUG_BUILD && logger.error('Apollo Integration was unable to require apollo-server-core package.');\n        return;\n      }\n\n      /**\n       * Iterate over resolvers of the ApolloServer instance before schemas are constructed.\n       */\n      fill(pkg.ApolloServerBase.prototype, 'constructSchema', function (orig) {\n        return function () {\n          if (!this.config.resolvers) {\n            if (DEBUG_BUILD) {\n              if (this.config.schema) {\n                logger.warn('Apollo integration is not able to trace `ApolloServer` instances constructed via `schema` property.' + 'If you are using NestJS with Apollo, please use `Sentry.Integrations.Apollo({ useNestjs: true })` instead.');\n                logger.warn();\n              } else if (this.config.modules) {\n                logger.warn('Apollo integration is not able to trace `ApolloServer` instances constructed via `modules` property.');\n              }\n              logger.error('Skipping tracing as no resolvers found on the `ApolloServer` instance.');\n            }\n            return orig.call(this);\n          }\n          const resolvers = arrayify(this.config.resolvers);\n          this.config.resolvers = instrumentResolvers(resolvers, getCurrentHub);\n          return orig.call(this);\n        };\n      });\n    }\n  }\n}\nApollo.__initStatic();\nfunction instrumentResolvers(resolvers, getCurrentHub) {\n  return resolvers.map(model => {\n    Object.keys(model).forEach(resolverGroupName => {\n      Object.keys(model[resolverGroupName]).forEach(resolverName => {\n        if (typeof model[resolverGroupName][resolverName] !== 'function') {\n          return;\n        }\n        wrapResolver(model, resolverGroupName, resolverName, getCurrentHub);\n      });\n    });\n    return model;\n  });\n}\n\n/**\n * Wrap a single resolver which can be a parent of other resolvers and/or db operations.\n */\nfunction wrapResolver(model, resolverGroupName, resolverName, getCurrentHub) {\n  fill(model[resolverGroupName], resolverName, function (orig) {\n    return function (...args) {\n      // eslint-disable-next-line deprecation/deprecation\n      const scope = getCurrentHub().getScope();\n      // eslint-disable-next-line deprecation/deprecation\n      const parentSpan = scope.getSpan();\n      // eslint-disable-next-line deprecation/deprecation\n      const span = _optionalChain([parentSpan, 'optionalAccess', _2 => _2.startChild, 'call', _3 => _3({\n        description: `${resolverGroupName}.${resolverName}`,\n        op: 'graphql.resolve',\n        origin: 'auto.graphql.apollo'\n      })]);\n      const rv = orig.call(this, ...args);\n      if (isThenable(rv)) {\n        return rv.then(res => {\n          _optionalChain([span, 'optionalAccess', _4 => _4.end, 'call', _5 => _5()]);\n          return res;\n        });\n      }\n      _optionalChain([span, 'optionalAccess', _6 => _6.end, 'call', _7 => _7()]);\n      return rv;\n    };\n  });\n}\nexport { Apollo };","map":{"version":3,"names":["Apollo","__initStatic","id","constructor","options","useNestjs","name","_useNest","loadDependency","_module","loadModule","setupOnce","_","getCurrentHub","shouldDisableAutoInstrumentation","DEBUG_BUILD","logger","log","pkg","error","fill","GraphQLFactory","prototype","orig","args","resolversExplorerService","resolvers","arrayify","call","instrumentedResolvers","instrumentResolvers","ApolloServerBase","config","schema","warn","modules","map","model","Object","keys","forEach","resolverGroupName","resolverName","wrapResolver","scope","getScope","parentSpan","getSpan","span","_optionalChain","_2","startChild","_3","description","op","origin","rv","isThenable","then","res","_4","end","_5","_6","_7"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry-internal/src/node/integrations/apollo.ts"],"sourcesContent":["import type { Hub } from '@sentry/core';\nimport type { EventProcessor } from '@sentry/types';\nimport { arrayify, fill, isThenable, loadModule, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../../common/debug-build';\nimport type { LazyLoadedIntegration } from './lazy';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ninterface ApolloOptions {\n  useNestjs?: boolean;\n}\n\ntype ApolloResolverGroup = {\n  [key: string]: () => unknown;\n};\n\ntype ApolloModelResolvers = {\n  [key: string]: ApolloResolverGroup;\n};\n\ntype GraphQLModule = {\n  GraphQLFactory: {\n    prototype: {\n      create: (resolvers: ApolloModelResolvers[]) => unknown;\n    };\n  };\n};\n\ntype ApolloModule = {\n  ApolloServerBase: {\n    prototype: {\n      constructSchema: (config: unknown) => unknown;\n    };\n  };\n};\n\n/** Tracing integration for Apollo */\nexport class Apollo implements LazyLoadedIntegration<GraphQLModule & ApolloModule> {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Apollo';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string;\n\n  private readonly _useNest: boolean;\n\n  private _module?: GraphQLModule & ApolloModule;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(\n    options: ApolloOptions = {\n      useNestjs: false,\n    },\n  ) {\n    this.name = Apollo.id;\n    this._useNest = !!options.useNestjs;\n  }\n\n  /** @inheritdoc */\n  public loadDependency(): (GraphQLModule & ApolloModule) | undefined {\n    if (this._useNest) {\n      this._module = this._module || loadModule('@nestjs/graphql');\n    } else {\n      this._module = this._module || loadModule('apollo-server-core');\n    }\n\n    return this._module;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      DEBUG_BUILD && logger.log('Apollo Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    if (this._useNest) {\n      const pkg = this.loadDependency();\n\n      if (!pkg) {\n        DEBUG_BUILD && logger.error('Apollo-NestJS Integration was unable to require @nestjs/graphql package.');\n        return;\n      }\n\n      /**\n       * Iterate over resolvers of NestJS ResolversExplorerService before schemas are constructed.\n       */\n      fill(\n        pkg.GraphQLFactory.prototype,\n        'mergeWithSchema',\n        function (orig: (this: unknown, ...args: unknown[]) => unknown) {\n          return function (\n            this: { resolversExplorerService: { explore: () => ApolloModelResolvers[] } },\n            ...args: unknown[]\n          ) {\n            fill(this.resolversExplorerService, 'explore', function (orig: () => ApolloModelResolvers[]) {\n              return function (this: unknown) {\n                const resolvers = arrayify(orig.call(this));\n\n                const instrumentedResolvers = instrumentResolvers(resolvers, getCurrentHub);\n\n                return instrumentedResolvers;\n              };\n            });\n\n            return orig.call(this, ...args);\n          };\n        },\n      );\n    } else {\n      const pkg = this.loadDependency();\n\n      if (!pkg) {\n        DEBUG_BUILD && logger.error('Apollo Integration was unable to require apollo-server-core package.');\n        return;\n      }\n\n      /**\n       * Iterate over resolvers of the ApolloServer instance before schemas are constructed.\n       */\n      fill(pkg.ApolloServerBase.prototype, 'constructSchema', function (orig: (config: unknown) => unknown) {\n        return function (this: {\n          config: { resolvers?: ApolloModelResolvers[]; schema?: unknown; modules?: unknown };\n        }) {\n          if (!this.config.resolvers) {\n            if (DEBUG_BUILD) {\n              if (this.config.schema) {\n                logger.warn(\n                  'Apollo integration is not able to trace `ApolloServer` instances constructed via `schema` property.' +\n                    'If you are using NestJS with Apollo, please use `Sentry.Integrations.Apollo({ useNestjs: true })` instead.',\n                );\n                logger.warn();\n              } else if (this.config.modules) {\n                logger.warn(\n                  'Apollo integration is not able to trace `ApolloServer` instances constructed via `modules` property.',\n                );\n              }\n\n              logger.error('Skipping tracing as no resolvers found on the `ApolloServer` instance.');\n            }\n\n            return orig.call(this);\n          }\n\n          const resolvers = arrayify(this.config.resolvers);\n\n          this.config.resolvers = instrumentResolvers(resolvers, getCurrentHub);\n\n          return orig.call(this);\n        };\n      });\n    }\n  }\n}\n\nfunction instrumentResolvers(resolvers: ApolloModelResolvers[], getCurrentHub: () => Hub): ApolloModelResolvers[] {\n  return resolvers.map(model => {\n    Object.keys(model).forEach(resolverGroupName => {\n      Object.keys(model[resolverGroupName]).forEach(resolverName => {\n        if (typeof model[resolverGroupName][resolverName] !== 'function') {\n          return;\n        }\n\n        wrapResolver(model, resolverGroupName, resolverName, getCurrentHub);\n      });\n    });\n\n    return model;\n  });\n}\n\n/**\n * Wrap a single resolver which can be a parent of other resolvers and/or db operations.\n */\nfunction wrapResolver(\n  model: ApolloModelResolvers,\n  resolverGroupName: string,\n  resolverName: string,\n  getCurrentHub: () => Hub,\n): void {\n  fill(model[resolverGroupName], resolverName, function (orig: () => unknown | Promise<unknown>) {\n    return function (this: unknown, ...args: unknown[]) {\n      // eslint-disable-next-line deprecation/deprecation\n      const scope = getCurrentHub().getScope();\n      // eslint-disable-next-line deprecation/deprecation\n      const parentSpan = scope.getSpan();\n      // eslint-disable-next-line deprecation/deprecation\n      const span = parentSpan?.startChild({\n        description: `${resolverGroupName}.${resolverName}`,\n        op: 'graphql.resolve',\n        origin: 'auto.graphql.apollo',\n      });\n\n      const rv = orig.call(this, ...args);\n\n      if (isThenable(rv)) {\n        return rv.then((res: unknown) => {\n          span?.end();\n          return res;\n        });\n      }\n\n      span?.end();\n\n      return rv;\n    };\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}