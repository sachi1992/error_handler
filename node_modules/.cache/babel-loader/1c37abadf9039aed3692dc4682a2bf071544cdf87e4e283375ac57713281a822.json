{"ast":null,"code":"import { DEBUG_BUILD } from './debug-build.js';\nimport { GLOBAL_OBJ } from './worldwide.js';\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\nconst CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'];\n\n/** This may be mutated by the console instrumentation. */\nconst originalConsoleMethods = {};\n\n/** JSDoc */\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nfunction consoleSandbox(callback) {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n  const console = GLOBAL_OBJ.console;\n  const wrappedFuncs = {};\n  const wrappedLevels = Object.keys(originalConsoleMethods);\n\n  // Restore all wrapped console methods\n  wrappedLevels.forEach(level => {\n    const originalConsoleMethod = originalConsoleMethods[level];\n    wrappedFuncs[level] = console[level];\n    console[level] = originalConsoleMethod;\n  });\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    wrappedLevels.forEach(level => {\n      console[level] = wrappedFuncs[level];\n    });\n  }\n}\nfunction makeLogger() {\n  let enabled = false;\n  const logger = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n    isEnabled: () => enabled\n  };\n  if (DEBUG_BUILD) {\n    CONSOLE_LEVELS.forEach(name => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = (...args) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n  return logger;\n}\nconst logger = makeLogger();\nexport { CONSOLE_LEVELS, consoleSandbox, logger, originalConsoleMethods };","map":{"version":3,"names":["PREFIX","CONSOLE_LEVELS","originalConsoleMethods","consoleSandbox","callback","GLOBAL_OBJ","console","wrappedFuncs","wrappedLevels","Object","keys","forEach","level","originalConsoleMethod","makeLogger","enabled","logger","enable","disable","isEnabled","DEBUG_BUILD","name","args","undefined"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/logger.ts"],"sourcesContent":["import type { ConsoleLevel } from '@sentry/types';\n\nimport { DEBUG_BUILD } from './debug-build';\nimport { GLOBAL_OBJ } from './worldwide';\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS: readonly ConsoleLevel[] = [\n  'debug',\n  'info',\n  'warn',\n  'error',\n  'log',\n  'assert',\n  'trace',\n] as const;\n\ntype LoggerMethod = (...args: unknown[]) => void;\ntype LoggerConsoleMethods = Record<ConsoleLevel, LoggerMethod>;\n\n/** This may be mutated by the console instrumentation. */\nexport const originalConsoleMethods: {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key in ConsoleLevel]?: (...args: any[]) => void;\n} = {};\n\n/** JSDoc */\ninterface Logger extends LoggerConsoleMethods {\n  disable(): void;\n  enable(): void;\n  isEnabled(): boolean;\n}\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n\n  const console = GLOBAL_OBJ.console as Console;\n  const wrappedFuncs: Partial<LoggerConsoleMethods> = {};\n\n  const wrappedLevels = Object.keys(originalConsoleMethods) as ConsoleLevel[];\n\n  // Restore all wrapped console methods\n  wrappedLevels.forEach(level => {\n    const originalConsoleMethod = originalConsoleMethods[level] as LoggerMethod;\n    wrappedFuncs[level] = console[level] as LoggerMethod | undefined;\n    console[level] = originalConsoleMethod;\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    wrappedLevels.forEach(level => {\n      console[level] = wrappedFuncs[level] as LoggerMethod;\n    });\n  }\n}\n\nfunction makeLogger(): Logger {\n  let enabled = false;\n  const logger: Partial<Logger> = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n    isEnabled: () => enabled,\n  };\n\n  if (DEBUG_BUILD) {\n    CONSOLE_LEVELS.forEach(name => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = (...args: any[]) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger as Logger;\n}\n\nexport const logger = makeLogger();\n"],"mappings":";;;AAKA;AACA,MAAMA,MAAA,GAAS,gBAAgB;AAExB,MAAMC,cAAc,GAA4B,CACrD,OAAO,EACP,MAAM,EACN,MAAM,EACN,OAAO,EACP,KAAK,EACL,QAAQ,EACR,OAAO,CACP;;AAKF;MACaC,sBAAsB,GAG/B;;AAEJ;;AAOA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,cAAcA,CAAIC,QAAQ,EAAc;EACtD,IAAI,EAAE,aAAaC,UAAU,CAAC,EAAE;IAC9B,OAAOD,QAAQ,EAAE;EACrB;EAEE,MAAME,OAAA,GAAUD,UAAU,CAACC,OAAQ;EACnC,MAAMC,YAAY,GAAkC,EAAE;EAEtD,MAAMC,aAAA,GAAgBC,MAAM,CAACC,IAAI,CAACR,sBAAsB,CAAE;;EAE5D;EACEM,aAAa,CAACG,OAAO,CAACC,KAAA,IAAS;IAC7B,MAAMC,qBAAsB,GAAEX,sBAAsB,CAACU,KAAK,CAAE;IAC5DL,YAAY,CAACK,KAAK,IAAIN,OAAO,CAACM,KAAK,CAAE;IACrCN,OAAO,CAACM,KAAK,IAAIC,qBAAqB;EAC1C,CAAG,CAAC;EAEF,IAAI;IACF,OAAOT,QAAQ,EAAE;EACrB,UAAY;IACZ;IACII,aAAa,CAACG,OAAO,CAACC,KAAA,IAAS;MAC7BN,OAAO,CAACM,KAAK,IAAIL,YAAY,CAACK,KAAK,CAAE;IAC3C,CAAK,CAAC;EACN;AACA;AAEA,SAASE,UAAUA,CAAA,EAAW;EAC5B,IAAIC,OAAQ,GAAE,KAAK;EACnB,MAAMC,MAAM,GAAoB;IAC9BC,MAAM,EAAEA,CAAA,KAAM;MACZF,OAAA,GAAU,IAAI;IACpB,CAAK;IACDG,OAAO,EAAEA,CAAA,KAAM;MACbH,OAAA,GAAU,KAAK;IACrB,CAAK;IACDI,SAAS,EAAEA,CAAA,KAAMJ;EACrB,CAAG;EAED,IAAIK,WAAW,EAAE;IACfnB,cAAc,CAACU,OAAO,CAACU,IAAA,IAAQ;MACnC;MACML,MAAM,CAACK,IAAI,IAAI,CAAC,GAAGC,IAAI,KAAY;QACjC,IAAIP,OAAO,EAAE;UACXZ,cAAc,CAAC,MAAM;YACnBE,UAAU,CAACC,OAAO,CAACe,IAAI,CAAC,CAAE,GAAArB,MAAA,IAAAqB,IAAA,SAAAC,IAAA;UACA;QACA;MACA;IACA;EACA;IACArB,cAAA,CAAAU,OAAA,CAAAU,IAAA;MACAL,MAAA,CAAAK,IAAA,UAAAE,SAAA;IACA;EACA;EAEA,OAAAP,MAAA;AACA;AAEA,MAAAA,MAAA,GAAAF,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}