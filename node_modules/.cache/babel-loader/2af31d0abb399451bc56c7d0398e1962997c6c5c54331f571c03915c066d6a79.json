{"ast":null,"code":"/** The status of an Span.\n *\n * @deprecated Use string literals - if you require type casting, cast to SpanStatusType type\n */\nvar SpanStatus;\n(function (SpanStatus) {\n  /** The operation completed successfully. */\n  const Ok = 'ok';\n  SpanStatus[\"Ok\"] = Ok;\n  /** Deadline expired before operation could complete. */\n  const DeadlineExceeded = 'deadline_exceeded';\n  SpanStatus[\"DeadlineExceeded\"] = DeadlineExceeded;\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n  const Unauthenticated = 'unauthenticated';\n  SpanStatus[\"Unauthenticated\"] = Unauthenticated;\n  /** 403 Forbidden */\n  const PermissionDenied = 'permission_denied';\n  SpanStatus[\"PermissionDenied\"] = PermissionDenied;\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n  const NotFound = 'not_found';\n  SpanStatus[\"NotFound\"] = NotFound;\n  /** 429 Too Many Requests */\n  const ResourceExhausted = 'resource_exhausted';\n  SpanStatus[\"ResourceExhausted\"] = ResourceExhausted;\n  /** Client specified an invalid argument. 4xx. */\n  const InvalidArgument = 'invalid_argument';\n  SpanStatus[\"InvalidArgument\"] = InvalidArgument;\n  /** 501 Not Implemented */\n  const Unimplemented = 'unimplemented';\n  SpanStatus[\"Unimplemented\"] = Unimplemented;\n  /** 503 Service Unavailable */\n  const Unavailable = 'unavailable';\n  SpanStatus[\"Unavailable\"] = Unavailable;\n  /** Other/generic 5xx. */\n  const InternalError = 'internal_error';\n  SpanStatus[\"InternalError\"] = InternalError;\n  /** Unknown. Any non-standard HTTP status code. */\n  const UnknownError = 'unknown_error';\n  SpanStatus[\"UnknownError\"] = UnknownError;\n  /** The operation was cancelled (typically by the user). */\n  const Cancelled = 'cancelled';\n  SpanStatus[\"Cancelled\"] = Cancelled;\n  /** Already exists (409) */\n  const AlreadyExists = 'already_exists';\n  SpanStatus[\"AlreadyExists\"] = AlreadyExists;\n  /** Operation was rejected because the system is not in a state required for the operation's */\n  const FailedPrecondition = 'failed_precondition';\n  SpanStatus[\"FailedPrecondition\"] = FailedPrecondition;\n  /** The operation was aborted, typically due to a concurrency issue. */\n  const Aborted = 'aborted';\n  SpanStatus[\"Aborted\"] = Aborted;\n  /** Operation was attempted past the valid range. */\n  const OutOfRange = 'out_of_range';\n  SpanStatus[\"OutOfRange\"] = OutOfRange;\n  /** Unrecoverable data loss or corruption */\n  const DataLoss = 'data_loss';\n  SpanStatus[\"DataLoss\"] = DataLoss;\n})(SpanStatus || (SpanStatus = {}));\n\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\nfunction getSpanStatusFromHttpCode(httpStatus) {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return 'ok';\n  }\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return 'unauthenticated';\n      case 403:\n        return 'permission_denied';\n      case 404:\n        return 'not_found';\n      case 409:\n        return 'already_exists';\n      case 413:\n        return 'failed_precondition';\n      case 429:\n        return 'resource_exhausted';\n      default:\n        return 'invalid_argument';\n    }\n  }\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return 'unimplemented';\n      case 503:\n        return 'unavailable';\n      case 504:\n        return 'deadline_exceeded';\n      default:\n        return 'internal_error';\n    }\n  }\n  return 'unknown_error';\n}\n\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @deprecated Use {@link spanStatusFromHttpCode} instead.\n * This export will be removed in v8 as the signature contains a typo.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\nconst spanStatusfromHttpCode = getSpanStatusFromHttpCode;\n\n/**\n * Sets the Http status attributes on the current span based on the http code.\n * Additionally, the span's status is updated, depending on the http code.\n */\nfunction setHttpStatus(span, httpStatus) {\n  // TODO (v8): Remove these calls\n  // Relay does not require us to send the status code as a tag\n  // For now, just because users might expect it to land as a tag we keep sending it.\n  // Same with data.\n  // In v8, we replace both, simply with\n  // span.setAttribute('http.response.status_code', httpStatus);\n\n  // eslint-disable-next-line deprecation/deprecation\n  span.setTag('http.status_code', String(httpStatus));\n  // eslint-disable-next-line deprecation/deprecation\n  span.setData('http.response.status_code', httpStatus);\n  const spanStatus = getSpanStatusFromHttpCode(httpStatus);\n  if (spanStatus !== 'unknown_error') {\n    span.setStatus(spanStatus);\n  }\n}\nexport { SpanStatus, getSpanStatusFromHttpCode, setHttpStatus, spanStatusfromHttpCode };","map":{"version":3,"names":["SpanStatus","Ok","DeadlineExceeded","Unauthenticated","PermissionDenied","NotFound","ResourceExhausted","InvalidArgument","Unimplemented","Unavailable","InternalError","UnknownError","Cancelled","AlreadyExists","FailedPrecondition","Aborted","OutOfRange","DataLoss","getSpanStatusFromHttpCode","httpStatus","spanStatusfromHttpCode","setHttpStatus","span","setTag","String","setData","spanStatus","setStatus"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/tracing/spanstatus.ts"],"sourcesContent":["import type { Span } from '@sentry/types';\n\n/** The status of an Span.\n *\n * @deprecated Use string literals - if you require type casting, cast to SpanStatusType type\n */\nexport enum SpanStatus {\n  /** The operation completed successfully. */\n  Ok = 'ok',\n  /** Deadline expired before operation could complete. */\n  DeadlineExceeded = 'deadline_exceeded',\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n  Unauthenticated = 'unauthenticated',\n  /** 403 Forbidden */\n  PermissionDenied = 'permission_denied',\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n  NotFound = 'not_found',\n  /** 429 Too Many Requests */\n  ResourceExhausted = 'resource_exhausted',\n  /** Client specified an invalid argument. 4xx. */\n  InvalidArgument = 'invalid_argument',\n  /** 501 Not Implemented */\n  Unimplemented = 'unimplemented',\n  /** 503 Service Unavailable */\n  Unavailable = 'unavailable',\n  /** Other/generic 5xx. */\n  InternalError = 'internal_error',\n  /** Unknown. Any non-standard HTTP status code. */\n  UnknownError = 'unknown_error',\n  /** The operation was cancelled (typically by the user). */\n  Cancelled = 'cancelled',\n  /** Already exists (409) */\n  AlreadyExists = 'already_exists',\n  /** Operation was rejected because the system is not in a state required for the operation's */\n  FailedPrecondition = 'failed_precondition',\n  /** The operation was aborted, typically due to a concurrency issue. */\n  Aborted = 'aborted',\n  /** Operation was attempted past the valid range. */\n  OutOfRange = 'out_of_range',\n  /** Unrecoverable data loss or corruption */\n  DataLoss = 'data_loss',\n}\n\nexport type SpanStatusType =\n  /** The operation completed successfully. */\n  | 'ok'\n  /** Deadline expired before operation could complete. */\n  | 'deadline_exceeded'\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n  | 'unauthenticated'\n  /** 403 Forbidden */\n  | 'permission_denied'\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n  | 'not_found'\n  /** 429 Too Many Requests */\n  | 'resource_exhausted'\n  /** Client specified an invalid argument. 4xx. */\n  | 'invalid_argument'\n  /** 501 Not Implemented */\n  | 'unimplemented'\n  /** 503 Service Unavailable */\n  | 'unavailable'\n  /** Other/generic 5xx. */\n  | 'internal_error'\n  /** Unknown. Any non-standard HTTP status code. */\n  | 'unknown_error'\n  /** The operation was cancelled (typically by the user). */\n  | 'cancelled'\n  /** Already exists (409) */\n  | 'already_exists'\n  /** Operation was rejected because the system is not in a state required for the operation's */\n  | 'failed_precondition'\n  /** The operation was aborted, typically due to a concurrency issue. */\n  | 'aborted'\n  /** Operation was attempted past the valid range. */\n  | 'out_of_range'\n  /** Unrecoverable data loss or corruption */\n  | 'data_loss';\n\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\nexport function getSpanStatusFromHttpCode(httpStatus: number): SpanStatusType {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return 'ok';\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return 'unauthenticated';\n      case 403:\n        return 'permission_denied';\n      case 404:\n        return 'not_found';\n      case 409:\n        return 'already_exists';\n      case 413:\n        return 'failed_precondition';\n      case 429:\n        return 'resource_exhausted';\n      default:\n        return 'invalid_argument';\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return 'unimplemented';\n      case 503:\n        return 'unavailable';\n      case 504:\n        return 'deadline_exceeded';\n      default:\n        return 'internal_error';\n    }\n  }\n\n  return 'unknown_error';\n}\n\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @deprecated Use {@link spanStatusFromHttpCode} instead.\n * This export will be removed in v8 as the signature contains a typo.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\nexport const spanStatusfromHttpCode = getSpanStatusFromHttpCode;\n\n/**\n * Sets the Http status attributes on the current span based on the http code.\n * Additionally, the span's status is updated, depending on the http code.\n */\nexport function setHttpStatus(span: Span, httpStatus: number): void {\n  // TODO (v8): Remove these calls\n  // Relay does not require us to send the status code as a tag\n  // For now, just because users might expect it to land as a tag we keep sending it.\n  // Same with data.\n  // In v8, we replace both, simply with\n  // span.setAttribute('http.response.status_code', httpStatus);\n\n  // eslint-disable-next-line deprecation/deprecation\n  span.setTag('http.status_code', String(httpStatus));\n  // eslint-disable-next-line deprecation/deprecation\n  span.setData('http.response.status_code', httpStatus);\n\n  const spanStatus = getSpanStatusFromHttpCode(httpStatus);\n  if (spanStatus !== 'unknown_error') {\n    span.setStatus(spanStatus);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}