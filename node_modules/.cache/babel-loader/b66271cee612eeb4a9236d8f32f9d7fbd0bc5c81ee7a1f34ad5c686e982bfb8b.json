{"ast":null,"code":"import { isError, isPlainObject, isParameterizedString } from './is.js';\nimport { addExceptionTypeValue, addExceptionMechanism } from './misc.js';\nimport { normalizeToSize } from './normalize.js';\nimport { extractExceptionKeysForMessage } from './object.js';\n\n/**\n * Extracts stack frames from the error.stack string\n */\nfunction parseStackFrames(stackParser, error) {\n  return stackParser(error.stack || '', 1);\n}\n\n/**\n * Extracts stack frames from the error and builds a Sentry Exception\n */\nfunction exceptionFromError(stackParser, error) {\n  const exception = {\n    type: error.name || error.constructor.name,\n    value: error.message\n  };\n  const frames = parseStackFrames(stackParser, error);\n  if (frames.length) {\n    exception.stacktrace = {\n      frames\n    };\n  }\n  return exception;\n}\nfunction getMessageForObject(exception) {\n  if ('name' in exception && typeof exception.name === 'string') {\n    let message = `'${exception.name}' captured as exception`;\n    if ('message' in exception && typeof exception.message === 'string') {\n      message += ` with message '${exception.message}'`;\n    }\n    return message;\n  } else if ('message' in exception && typeof exception.message === 'string') {\n    return exception.message;\n  } else {\n    // This will allow us to group events based on top-level keys\n    // which is much better than creating new group when any key/value change\n    return `Object captured as exception with keys: ${extractExceptionKeysForMessage(exception)}`;\n  }\n}\n\n/**\n * Builds and Event from a Exception\n *\n * TODO(v8): Remove getHub fallback\n * @hidden\n */\nfunction eventFromUnknownInput(getHubOrClient, stackParser, exception, hint) {\n  const client = typeof getHubOrClient === 'function' ?\n  // eslint-disable-next-line deprecation/deprecation\n  getHubOrClient().getClient() : getHubOrClient;\n  let ex = exception;\n  const providedMechanism = hint && hint.data && hint.data.mechanism;\n  const mechanism = providedMechanism || {\n    handled: true,\n    type: 'generic'\n  };\n  let extras;\n  if (!isError(exception)) {\n    if (isPlainObject(exception)) {\n      const normalizeDepth = client && client.getOptions().normalizeDepth;\n      extras = {\n        ['__serialized__']: normalizeToSize(exception, normalizeDepth)\n      };\n      const message = getMessageForObject(exception);\n      ex = hint && hint.syntheticException || new Error(message);\n      ex.message = message;\n    } else {\n      // This handles when someone does: `throw \"something awesome\";`\n      // We use synthesized Error here so we can extract a (rough) stack trace.\n      ex = hint && hint.syntheticException || new Error(exception);\n      ex.message = exception;\n    }\n    mechanism.synthetic = true;\n  }\n  const event = {\n    exception: {\n      values: [exceptionFromError(stackParser, ex)]\n    }\n  };\n  if (extras) {\n    event.extra = extras;\n  }\n  addExceptionTypeValue(event, undefined, undefined);\n  addExceptionMechanism(event, mechanism);\n  return {\n    ...event,\n    event_id: hint && hint.event_id\n  };\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nfunction eventFromMessage(stackParser, message,\n// eslint-disable-next-line deprecation/deprecation\nlevel = 'info', hint, attachStacktrace) {\n  const event = {\n    event_id: hint && hint.event_id,\n    level\n  };\n  if (attachStacktrace && hint && hint.syntheticException) {\n    const frames = parseStackFrames(stackParser, hint.syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [{\n          value: message,\n          stacktrace: {\n            frames\n          }\n        }]\n      };\n    }\n  }\n  if (isParameterizedString(message)) {\n    const {\n      __sentry_template_string__,\n      __sentry_template_values__\n    } = message;\n    event.logentry = {\n      message: __sentry_template_string__,\n      params: __sentry_template_values__\n    };\n    return event;\n  }\n  event.message = message;\n  return event;\n}\nexport { eventFromMessage, eventFromUnknownInput, exceptionFromError, parseStackFrames };","map":{"version":3,"names":["parseStackFrames","stackParser","error","stack","exceptionFromError","exception","type","name","constructor","value","message","frames","length","stacktrace","getMessageForObject","extractExceptionKeysForMessage","eventFromUnknownInput","getHubOrClient","hint","client","getClient","ex","providedMechanism","data","mechanism","handled","extras","isError","isPlainObject","normalizeDepth","getOptions","normalizeToSize","syntheticException","Error","synthetic","event","values","extra","addExceptionTypeValue","undefined","addExceptionMechanism","event_id","eventFromMessage","level","attachStacktrace","isParameterizedString","__sentry_template_string__","__sentry_template_values__","logentry","params"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/eventbuilder.ts"],"sourcesContent":["import type {\n  Client,\n  Event,\n  EventHint,\n  Exception,\n  Extras,\n  Hub,\n  Mechanism,\n  ParameterizedString,\n  Severity,\n  SeverityLevel,\n  StackFrame,\n  StackParser,\n} from '@sentry/types';\n\nimport { isError, isParameterizedString, isPlainObject } from './is';\nimport { addExceptionMechanism, addExceptionTypeValue } from './misc';\nimport { normalizeToSize } from './normalize';\nimport { extractExceptionKeysForMessage } from './object';\n\n/**\n * Extracts stack frames from the error.stack string\n */\nexport function parseStackFrames(stackParser: StackParser, error: Error): StackFrame[] {\n  return stackParser(error.stack || '', 1);\n}\n\n/**\n * Extracts stack frames from the error and builds a Sentry Exception\n */\nexport function exceptionFromError(stackParser: StackParser, error: Error): Exception {\n  const exception: Exception = {\n    type: error.name || error.constructor.name,\n    value: error.message,\n  };\n\n  const frames = parseStackFrames(stackParser, error);\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  return exception;\n}\n\nfunction getMessageForObject(exception: object): string {\n  if ('name' in exception && typeof exception.name === 'string') {\n    let message = `'${exception.name}' captured as exception`;\n\n    if ('message' in exception && typeof exception.message === 'string') {\n      message += ` with message '${exception.message}'`;\n    }\n\n    return message;\n  } else if ('message' in exception && typeof exception.message === 'string') {\n    return exception.message;\n  } else {\n    // This will allow us to group events based on top-level keys\n    // which is much better than creating new group when any key/value change\n    return `Object captured as exception with keys: ${extractExceptionKeysForMessage(\n      exception as Record<string, unknown>,\n    )}`;\n  }\n}\n\n/**\n * Builds and Event from a Exception\n *\n * TODO(v8): Remove getHub fallback\n * @hidden\n */\nexport function eventFromUnknownInput(\n  getHubOrClient: (() => Hub) | Client | undefined,\n  stackParser: StackParser,\n  exception: unknown,\n  hint?: EventHint,\n): Event {\n  const client =\n    typeof getHubOrClient === 'function'\n      ? // eslint-disable-next-line deprecation/deprecation\n        getHubOrClient().getClient()\n      : getHubOrClient;\n\n  let ex: unknown = exception;\n  const providedMechanism: Mechanism | undefined =\n    hint && hint.data && (hint.data as { mechanism: Mechanism }).mechanism;\n  const mechanism: Mechanism = providedMechanism || {\n    handled: true,\n    type: 'generic',\n  };\n\n  let extras: Extras | undefined;\n\n  if (!isError(exception)) {\n    if (isPlainObject(exception)) {\n      const normalizeDepth = client && client.getOptions().normalizeDepth;\n      extras = { ['__serialized__']: normalizeToSize(exception as Record<string, unknown>, normalizeDepth) };\n\n      const message = getMessageForObject(exception);\n      ex = (hint && hint.syntheticException) || new Error(message);\n      (ex as Error).message = message;\n    } else {\n      // This handles when someone does: `throw \"something awesome\";`\n      // We use synthesized Error here so we can extract a (rough) stack trace.\n      ex = (hint && hint.syntheticException) || new Error(exception as string);\n      (ex as Error).message = exception as string;\n    }\n    mechanism.synthetic = true;\n  }\n\n  const event: Event = {\n    exception: {\n      values: [exceptionFromError(stackParser, ex as Error)],\n    },\n  };\n\n  if (extras) {\n    event.extra = extras;\n  }\n\n  addExceptionTypeValue(event, undefined, undefined);\n  addExceptionMechanism(event, mechanism);\n\n  return {\n    ...event,\n    event_id: hint && hint.event_id,\n  };\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  stackParser: StackParser,\n  message: ParameterizedString,\n  // eslint-disable-next-line deprecation/deprecation\n  level: Severity | SeverityLevel = 'info',\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): Event {\n  const event: Event = {\n    event_id: hint && hint.event_id,\n    level,\n  };\n\n  if (attachStacktrace && hint && hint.syntheticException) {\n    const frames = parseStackFrames(stackParser, hint.syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [\n          {\n            value: message,\n            stacktrace: { frames },\n          },\n        ],\n      };\n    }\n  }\n\n  if (isParameterizedString(message)) {\n    const { __sentry_template_string__, __sentry_template_values__ } = message;\n\n    event.logentry = {\n      message: __sentry_template_string__,\n      params: __sentry_template_values__,\n    };\n    return event;\n  }\n\n  event.message = message;\n  return event;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}