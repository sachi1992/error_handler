{"ast":null,"code":"import { addGlobalErrorInstrumentationHandler, addGlobalUnhandledRejectionInstrumentationHandler, logger } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { getActiveTransaction } from './utils.js';\nlet errorsInstrumented = false;\n\n/**\n * Configures global error listeners\n */\nfunction registerErrorInstrumentation() {\n  if (errorsInstrumented) {\n    return;\n  }\n  errorsInstrumented = true;\n  addGlobalErrorInstrumentationHandler(errorCallback);\n  addGlobalUnhandledRejectionInstrumentationHandler(errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\nfunction errorCallback() {\n  // eslint-disable-next-line deprecation/deprecation\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const status = 'internal_error';\n    DEBUG_BUILD && logger.log(`[Tracing] Transaction: ${status} -> Global error occured`);\n    activeTransaction.setStatus(status);\n  }\n}\n\n// The function name will be lost when bundling but we need to be able to identify this listener later to maintain the\n// node.js default exit behaviour\nerrorCallback.tag = 'sentry_tracingErrorCallback';\nexport { registerErrorInstrumentation };","map":{"version":3,"names":["errorsInstrumented","registerErrorInstrumentation","addGlobalErrorInstrumentationHandler","errorCallback","addGlobalUnhandledRejectionInstrumentationHandler","activeTransaction","getActiveTransaction","status","DEBUG_BUILD","logger","log","setStatus","tag"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/tracing/errors.ts"],"sourcesContent":["import {\n  addGlobalErrorInstrumentationHandler,\n  addGlobalUnhandledRejectionInstrumentationHandler,\n  logger,\n} from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { SpanStatusType } from './spanstatus';\nimport { getActiveTransaction } from './utils';\n\nlet errorsInstrumented = false;\n\n/**\n * Configures global error listeners\n */\nexport function registerErrorInstrumentation(): void {\n  if (errorsInstrumented) {\n    return;\n  }\n\n  errorsInstrumented = true;\n  addGlobalErrorInstrumentationHandler(errorCallback);\n  addGlobalUnhandledRejectionInstrumentationHandler(errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\nfunction errorCallback(): void {\n  // eslint-disable-next-line deprecation/deprecation\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const status: SpanStatusType = 'internal_error';\n    DEBUG_BUILD && logger.log(`[Tracing] Transaction: ${status} -> Global error occured`);\n    activeTransaction.setStatus(status);\n  }\n}\n\n// The function name will be lost when bundling but we need to be able to identify this listener later to maintain the\n// node.js default exit behaviour\nerrorCallback.tag = 'sentry_tracingErrorCallback';\n"],"mappings":";;;AAUA,IAAIA,kBAAA,GAAqB,KAAK;;AAE9B;AACA;AACA;AACO,SAASC,4BAA4BA,CAAA,EAAS;EACnD,IAAID,kBAAkB,EAAE;IACtB;EACJ;EAEEA,kBAAA,GAAqB,IAAI;EACzBE,oCAAoC,CAACC,aAAa,CAAC;EACnDC,iDAAiD,CAACD,aAAa,CAAC;AAClE;;AAEA;AACA;AACA;AACA,SAASA,aAAaA,CAAA,EAAS;EAC/B;EACE,MAAME,iBAAA,GAAoBC,oBAAoB,EAAE;EAChD,IAAID,iBAAiB,EAAE;IACrB,MAAME,MAAM,GAAmB,gBAAgB;IAC/CC,WAAY,IAAGC,MAAM,CAACC,GAAG,CAAE,0BAAyBH,MAAO,0BAAyB,CAAC;IACrFF,iBAAiB,CAACM,SAAS,CAACJ,MAAM,CAAC;EACvC;AACA;;AAEA;AACA;AACAJ,aAAa,CAACS,GAAI,GAAE,6BAA6B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}