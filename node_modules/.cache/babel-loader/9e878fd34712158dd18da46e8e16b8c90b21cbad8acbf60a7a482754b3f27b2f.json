{"ast":null,"code":"import { GLOBAL_OBJ } from '../worldwide.js';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers.js';\nlet _oldOnErrorHandler = null;\n\n/**\n * Add an instrumentation handler for when an error is captured by the global error handler.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addGlobalErrorInstrumentationHandler(handler) {\n  const type = 'error';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentError);\n}\nfunction instrumentError() {\n  _oldOnErrorHandler = GLOBAL_OBJ.onerror;\n  GLOBAL_OBJ.onerror = function (msg, url, line, column, error) {\n    const handlerData = {\n      column,\n      error,\n      line,\n      msg,\n      url\n    };\n    triggerHandlers('error', handlerData);\n    if (_oldOnErrorHandler && !_oldOnErrorHandler.__SENTRY_LOADER__) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n    return false;\n  };\n  GLOBAL_OBJ.onerror.__SENTRY_INSTRUMENTED__ = true;\n}\nexport { addGlobalErrorInstrumentationHandler };","map":{"version":3,"names":["_oldOnErrorHandler","addGlobalErrorInstrumentationHandler","handler","type","addHandler","maybeInstrument","instrumentError","GLOBAL_OBJ","onerror","msg","url","line","column","error","handlerData","triggerHandlers","__SENTRY_LOADER__","apply","arguments","__SENTRY_INSTRUMENTED__"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/instrument/globalError.ts"],"sourcesContent":["import type { HandlerDataError } from '@sentry/types';\n\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers';\n\nlet _oldOnErrorHandler: (typeof GLOBAL_OBJ)['onerror'] | null = null;\n\n/**\n * Add an instrumentation handler for when an error is captured by the global error handler.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addGlobalErrorInstrumentationHandler(handler: (data: HandlerDataError) => void): void {\n  const type = 'error';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentError);\n}\n\nfunction instrumentError(): void {\n  _oldOnErrorHandler = GLOBAL_OBJ.onerror;\n\n  GLOBAL_OBJ.onerror = function (\n    msg: string | object,\n    url?: string,\n    line?: number,\n    column?: number,\n    error?: Error,\n  ): boolean {\n    const handlerData: HandlerDataError = {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    };\n    triggerHandlers('error', handlerData);\n\n    if (_oldOnErrorHandler && !_oldOnErrorHandler.__SENTRY_LOADER__) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n\n  GLOBAL_OBJ.onerror.__SENTRY_INSTRUMENTED__ = true;\n}\n"],"mappings":";;AAKA,IAAIA,kBAAkB,GAA0C,IAAI;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,oCAAoCA,CAACC,OAAO,EAA0C;EACpG,MAAMC,IAAK,GAAE,OAAO;EACpBC,UAAU,CAACD,IAAI,EAAED,OAAO,CAAC;EACzBG,eAAe,CAACF,IAAI,EAAEG,eAAe,CAAC;AACxC;AAEA,SAASA,eAAeA,CAAA,EAAS;EAC/BN,kBAAmB,GAAEO,UAAU,CAACC,OAAO;EAEvCD,UAAU,CAACC,OAAQ,GAAE,UACnBC,GAAG,EACHC,GAAG,EACHC,IAAI,EACJC,MAAM,EACNC,KAAK,EACI;IACT,MAAMC,WAAW,GAAqB;MACpCF,MAAM;MACNC,KAAK;MACLF,IAAI;MACJF,GAAG;MACHC;IACN,CAAK;IACDK,eAAe,CAAC,OAAO,EAAED,WAAW,CAAC;IAErC,IAAId,kBAAmB,IAAG,CAACA,kBAAkB,CAACgB,iBAAiB,EAAE;MACrE;MACM,OAAOhB,kBAAkB,CAACiB,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IACtD;IAEI,OAAO,KAAK;EAChB,CAAG;EAEDX,UAAU,CAACC,OAAO,CAACW,uBAAA,GAA0B,IAAI;AACnD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}