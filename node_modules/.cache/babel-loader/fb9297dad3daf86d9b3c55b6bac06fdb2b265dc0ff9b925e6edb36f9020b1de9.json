{"ast":null,"code":"var _jsxFileName = \"/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/src/components/CustomForm.tsx\";\nimport { CForm, ValidationType, ErrorHandler } from \"../errorHandler\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CustomForm() {\n  return /*#__PURE__*/_jsxDEV(ErrorHandler, {\n    children: /*#__PURE__*/_jsxDEV(CForm, {\n      inputConfig: [\n      // {\n      //   label: \"Check User\",\n      //   name: \"isUser\",\n      //   isValidate: true,\n      //   validationType: [ValidationType.Required],\n      //   inputType: \"checkbox\",\n      // },\n      {\n        label: \"Username\",\n        name: \"loginUserName\",\n        isValidate: true,\n        validationType: [ValidationType.Required, ValidationType.Url],\n        inputType: \"text\"\n      }, {\n        label: \"URL\",\n        name: \"url\",\n        isValidate: true,\n        validationType: [ValidationType.Url],\n        inputType: \"text\"\n      }, {\n        label: \" Organization Number\",\n        name: \"organizationNumber\",\n        isValidate: true,\n        validationType: [ValidationType.Required, ValidationType.Org],\n        inputType: \"text\"\n      }, {\n        label: \" City\",\n        name: \"city\",\n        isValidate: true,\n        validationType: [ValidationType.Required, ValidationType.CityCode],\n        inputType: \"text\"\n      }, {\n        label: \"Phone Number\",\n        name: \"phoneNumber\",\n        isValidate: true,\n        validationType: [ValidationType.Required, ValidationType.Phone],\n        inputType: \"text\"\n      }, {\n        label: \" Email Address\",\n        name: \"emailAddress\",\n        isValidate: true,\n        validationType: [ValidationType.Required, ValidationType.Email],\n        inputType: \"email\"\n      }, {\n        label: \"User Type\",\n        name: \"userType\",\n        isValidate: true,\n        validationType: [ValidationType.Required],\n        inputType: \"select\",\n        options: [{\n          name: \"Admin\",\n          value: \"admin\"\n        }, {\n          name: \"Client\",\n          value: \"client\"\n        }, {\n          name: \"User\",\n          value: \"user\"\n        }]\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}\n_c = CustomForm;\nexport default CustomForm;\nvar _c;\n$RefreshReg$(_c, \"CustomForm\");","map":{"version":3,"names":["CForm","ValidationType","ErrorHandler","jsxDEV","_jsxDEV","CustomForm","children","inputConfig","label","name","isValidate","validationType","Required","Url","inputType","Org","CityCode","Phone","Email","options","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/src/components/CustomForm.tsx"],"sourcesContent":["import { CForm, ValidationType, ErrorHandler } from \"../errorHandler\";\n\nfunction CustomForm(): JSX.Element {\n  return (\n    <ErrorHandler>\n      <CForm\n        inputConfig={[\n          // {\n          //   label: \"Check User\",\n          //   name: \"isUser\",\n          //   isValidate: true,\n          //   validationType: [ValidationType.Required],\n          //   inputType: \"checkbox\",\n          // },\n          {\n            label: \"Username\",\n            name: \"loginUserName\",\n            isValidate: true,\n            validationType: [ValidationType.Required, ValidationType.Url],\n            inputType: \"text\",\n          },\n          {\n            label: \"URL\",\n            name: \"url\",\n            isValidate: true,\n            validationType: [ValidationType.Url],\n            inputType: \"text\",\n          },\n          {\n            label: \" Organization Number\",\n            name: \"organizationNumber\",\n            isValidate: true,\n            validationType: [ValidationType.Required, ValidationType.Org],\n            inputType: \"text\",\n          },\n          {\n            label: \" City\",\n            name: \"city\",\n            isValidate: true,\n            validationType: [ValidationType.Required, ValidationType.CityCode],\n            inputType: \"text\",\n          },\n          {\n            label: \"Phone Number\",\n            name: \"phoneNumber\",\n            isValidate: true,\n            validationType: [ValidationType.Required, ValidationType.Phone],\n            inputType: \"text\",\n          },\n          {\n            label: \" Email Address\",\n            name: \"emailAddress\",\n            isValidate: true,\n            validationType: [ValidationType.Required, ValidationType.Email],\n            inputType: \"email\",\n          },\n          {\n            label: \"User Type\",\n            name: \"userType\",\n            isValidate: true,\n            validationType: [ValidationType.Required],\n            inputType: \"select\",\n            options: [\n              { name: \"Admin\", value: \"admin\" },\n              { name: \"Client\", value: \"client\" },\n              { name: \"User\", value: \"user\" },\n            ],\n          },\n        ]}\n      />\n    </ErrorHandler>\n  );\n}\n\nexport default CustomForm;\n"],"mappings":";AAAA,SAASA,KAAK,EAAEC,cAAc,EAAEC,YAAY,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtE,SAASC,UAAUA,CAAA,EAAgB;EACjC,oBACED,OAAA,CAACF,YAAY;IAAAI,QAAA,eACXF,OAAA,CAACJ,KAAK;MACJO,WAAW,EAAE;MACX;MACA;MACA;MACA;MACA;MACA;MACA;MACA;QACEC,KAAK,EAAE,UAAU;QACjBC,IAAI,EAAE,eAAe;QACrBC,UAAU,EAAE,IAAI;QAChBC,cAAc,EAAE,CAACV,cAAc,CAACW,QAAQ,EAAEX,cAAc,CAACY,GAAG,CAAC;QAC7DC,SAAS,EAAE;MACb,CAAC,EACD;QACEN,KAAK,EAAE,KAAK;QACZC,IAAI,EAAE,KAAK;QACXC,UAAU,EAAE,IAAI;QAChBC,cAAc,EAAE,CAACV,cAAc,CAACY,GAAG,CAAC;QACpCC,SAAS,EAAE;MACb,CAAC,EACD;QACEN,KAAK,EAAE,sBAAsB;QAC7BC,IAAI,EAAE,oBAAoB;QAC1BC,UAAU,EAAE,IAAI;QAChBC,cAAc,EAAE,CAACV,cAAc,CAACW,QAAQ,EAAEX,cAAc,CAACc,GAAG,CAAC;QAC7DD,SAAS,EAAE;MACb,CAAC,EACD;QACEN,KAAK,EAAE,OAAO;QACdC,IAAI,EAAE,MAAM;QACZC,UAAU,EAAE,IAAI;QAChBC,cAAc,EAAE,CAACV,cAAc,CAACW,QAAQ,EAAEX,cAAc,CAACe,QAAQ,CAAC;QAClEF,SAAS,EAAE;MACb,CAAC,EACD;QACEN,KAAK,EAAE,cAAc;QACrBC,IAAI,EAAE,aAAa;QACnBC,UAAU,EAAE,IAAI;QAChBC,cAAc,EAAE,CAACV,cAAc,CAACW,QAAQ,EAAEX,cAAc,CAACgB,KAAK,CAAC;QAC/DH,SAAS,EAAE;MACb,CAAC,EACD;QACEN,KAAK,EAAE,gBAAgB;QACvBC,IAAI,EAAE,cAAc;QACpBC,UAAU,EAAE,IAAI;QAChBC,cAAc,EAAE,CAACV,cAAc,CAACW,QAAQ,EAAEX,cAAc,CAACiB,KAAK,CAAC;QAC/DJ,SAAS,EAAE;MACb,CAAC,EACD;QACEN,KAAK,EAAE,WAAW;QAClBC,IAAI,EAAE,UAAU;QAChBC,UAAU,EAAE,IAAI;QAChBC,cAAc,EAAE,CAACV,cAAc,CAACW,QAAQ,CAAC;QACzCE,SAAS,EAAE,QAAQ;QACnBK,OAAO,EAAE,CACP;UAAEV,IAAI,EAAE,OAAO;UAAEW,KAAK,EAAE;QAAQ,CAAC,EACjC;UAAEX,IAAI,EAAE,QAAQ;UAAEW,KAAK,EAAE;QAAS,CAAC,EACnC;UAAEX,IAAI,EAAE,MAAM;UAAEW,KAAK,EAAE;QAAO,CAAC;MAEnC,CAAC;IACD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAEnB;AAACC,EAAA,GAtEQpB,UAAU;AAwEnB,eAAeA,UAAU;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}