{"ast":null,"code":"import { defineIntegration, convertIntegrationFnToClass, getClient, addBreadcrumb } from '@sentry/core';\nimport { addConsoleInstrumentationHandler, addClickKeypressInstrumentationHandler, addXhrInstrumentationHandler, addFetchInstrumentationHandler, addHistoryInstrumentationHandler, getEventDescription, logger, htmlTreeAsString, getComponentName, severityLevelFromString, safeJoin, SENTRY_XHR_DATA_KEY, parseUrl } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { WINDOW } from '../helpers.js';\n\n/* eslint-disable max-lines */\n\n/** maxStringLength gets capped to prevent 100 breadcrumbs exceeding 1MB event payload size */\nconst MAX_ALLOWED_STRING_LENGTH = 1024;\nconst INTEGRATION_NAME = 'Breadcrumbs';\nconst _breadcrumbsIntegration = (options = {}) => {\n  const _options = {\n    console: true,\n    dom: true,\n    fetch: true,\n    history: true,\n    sentry: true,\n    xhr: true,\n    ...options\n  };\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {},\n    // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client) {\n      if (_options.console) {\n        addConsoleInstrumentationHandler(_getConsoleBreadcrumbHandler(client));\n      }\n      if (_options.dom) {\n        addClickKeypressInstrumentationHandler(_getDomBreadcrumbHandler(client, _options.dom));\n      }\n      if (_options.xhr) {\n        addXhrInstrumentationHandler(_getXhrBreadcrumbHandler(client));\n      }\n      if (_options.fetch) {\n        addFetchInstrumentationHandler(_getFetchBreadcrumbHandler(client));\n      }\n      if (_options.history) {\n        addHistoryInstrumentationHandler(_getHistoryBreadcrumbHandler(client));\n      }\n      if (_options.sentry && client.on) {\n        client.on('beforeSendEvent', _getSentryBreadcrumbHandler(client));\n      }\n    }\n  };\n};\nconst breadcrumbsIntegration = defineIntegration(_breadcrumbsIntegration);\n\n/**\n * Default Breadcrumbs instrumentations\n *\n * @deprecated Use `breadcrumbsIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nconst Breadcrumbs = convertIntegrationFnToClass(INTEGRATION_NAME, breadcrumbsIntegration);\n\n/**\n * Adds a breadcrumb for Sentry events or transactions if this option is enabled.\n */\nfunction _getSentryBreadcrumbHandler(client) {\n  return function addSentryBreadcrumb(event) {\n    if (getClient() !== client) {\n      return;\n    }\n    addBreadcrumb({\n      category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n      event_id: event.event_id,\n      level: event.level,\n      message: getEventDescription(event)\n    }, {\n      event\n    });\n  };\n}\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\nfunction _getDomBreadcrumbHandler(client, dom) {\n  return function _innerDomBreadcrumb(handlerData) {\n    if (getClient() !== client) {\n      return;\n    }\n    let target;\n    let componentName;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n    let maxStringLength = typeof dom === 'object' && typeof dom.maxStringLength === 'number' ? dom.maxStringLength : undefined;\n    if (maxStringLength && maxStringLength > MAX_ALLOWED_STRING_LENGTH) {\n      DEBUG_BUILD && logger.warn(`\\`dom.maxStringLength\\` cannot exceed ${MAX_ALLOWED_STRING_LENGTH}, but a value of ${maxStringLength} was configured. Sentry will use ${MAX_ALLOWED_STRING_LENGTH} instead.`);\n      maxStringLength = MAX_ALLOWED_STRING_LENGTH;\n    }\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      const event = handlerData.event;\n      const element = _isEvent(event) ? event.target : event;\n      target = htmlTreeAsString(element, {\n        keyAttrs,\n        maxStringLength\n      });\n      componentName = getComponentName(element);\n    } catch (e) {\n      target = '<unknown>';\n    }\n    if (target.length === 0) {\n      return;\n    }\n    const breadcrumb = {\n      category: `ui.${handlerData.name}`,\n      message: target\n    };\n    if (componentName) {\n      breadcrumb.data = {\n        'ui.component_name': componentName\n      };\n    }\n    addBreadcrumb(breadcrumb, {\n      event: handlerData.event,\n      name: handlerData.name,\n      global: handlerData.global\n    });\n  };\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\nfunction _getConsoleBreadcrumbHandler(client) {\n  return function _consoleBreadcrumb(handlerData) {\n    if (getClient() !== client) {\n      return;\n    }\n    const breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console'\n      },\n      level: severityLevelFromString(handlerData.level),\n      message: safeJoin(handlerData.args, ' ')\n    };\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n    addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level\n    });\n  };\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\nfunction _getXhrBreadcrumbHandler(client) {\n  return function _xhrBreadcrumb(handlerData) {\n    if (getClient() !== client) {\n      return;\n    }\n    const {\n      startTimestamp,\n      endTimestamp\n    } = handlerData;\n    const sentryXhrData = handlerData.xhr[SENTRY_XHR_DATA_KEY];\n\n    // We only capture complete, non-sentry requests\n    if (!startTimestamp || !endTimestamp || !sentryXhrData) {\n      return;\n    }\n    const {\n      method,\n      url,\n      status_code,\n      body\n    } = sentryXhrData;\n    const data = {\n      method,\n      url,\n      status_code\n    };\n    const hint = {\n      xhr: handlerData.xhr,\n      input: body,\n      startTimestamp,\n      endTimestamp\n    };\n    addBreadcrumb({\n      category: 'xhr',\n      data,\n      type: 'http'\n    }, hint);\n  };\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\nfunction _getFetchBreadcrumbHandler(client) {\n  return function _fetchBreadcrumb(handlerData) {\n    if (getClient() !== client) {\n      return;\n    }\n    const {\n      startTimestamp,\n      endTimestamp\n    } = handlerData;\n\n    // We only capture complete fetch requests\n    if (!endTimestamp) {\n      return;\n    }\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n      return;\n    }\n    if (handlerData.error) {\n      const data = handlerData.fetchData;\n      const hint = {\n        data: handlerData.error,\n        input: handlerData.args,\n        startTimestamp,\n        endTimestamp\n      };\n      addBreadcrumb({\n        category: 'fetch',\n        data,\n        level: 'error',\n        type: 'http'\n      }, hint);\n    } else {\n      const response = handlerData.response;\n      const data = {\n        ...handlerData.fetchData,\n        status_code: response && response.status\n      };\n      const hint = {\n        input: handlerData.args,\n        response,\n        startTimestamp,\n        endTimestamp\n      };\n      addBreadcrumb({\n        category: 'fetch',\n        data,\n        type: 'http'\n      }, hint);\n    }\n  };\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\nfunction _getHistoryBreadcrumbHandler(client) {\n  return function _historyBreadcrumb(handlerData) {\n    if (getClient() !== client) {\n      return;\n    }\n    let from = handlerData.from;\n    let to = handlerData.to;\n    const parsedLoc = parseUrl(WINDOW.location.href);\n    let parsedFrom = from ? parseUrl(from) : undefined;\n    const parsedTo = parseUrl(to);\n\n    // Initial pushState doesn't provide `from` information\n    if (!parsedFrom || !parsedFrom.path) {\n      parsedFrom = parsedLoc;\n    }\n\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      to = parsedTo.relative;\n    }\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      from = parsedFrom.relative;\n    }\n    addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from,\n        to\n      }\n    });\n  };\n}\nfunction _isEvent(event) {\n  return !!event && !!event.target;\n}\nexport { Breadcrumbs, breadcrumbsIntegration };","map":{"version":3,"names":["MAX_ALLOWED_STRING_LENGTH","INTEGRATION_NAME","_breadcrumbsIntegration","options","_options","console","dom","fetch","history","sentry","xhr","name","setupOnce","setup","client","addConsoleInstrumentationHandler","_getConsoleBreadcrumbHandler","addClickKeypressInstrumentationHandler","_getDomBreadcrumbHandler","addXhrInstrumentationHandler","_getXhrBreadcrumbHandler","addFetchInstrumentationHandler","_getFetchBreadcrumbHandler","addHistoryInstrumentationHandler","_getHistoryBreadcrumbHandler","on","_getSentryBreadcrumbHandler","breadcrumbsIntegration","defineIntegration","Breadcrumbs","convertIntegrationFnToClass","addSentryBreadcrumb","event","getClient","addBreadcrumb","category","type","event_id","level","message","getEventDescription","_innerDomBreadcrumb","handlerData","target","componentName","keyAttrs","serializeAttribute","undefined","maxStringLength","DEBUG_BUILD","logger","warn","element","_isEvent","htmlTreeAsString","getComponentName","e","length","breadcrumb","data","global","_consoleBreadcrumb","arguments","args","severityLevelFromString","safeJoin","slice","input","_xhrBreadcrumb","startTimestamp","endTimestamp","sentryXhrData","SENTRY_XHR_DATA_KEY","method","url","status_code","body","hint","_fetchBreadcrumb","fetchData","match","error","response","status","_historyBreadcrumb","from","to","parsedLoc","parseUrl","WINDOW","location","href","parsedFrom","parsedTo","path","protocol","host","relative"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/src/integrations/breadcrumbs.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport { addBreadcrumb, convertIntegrationFnToClass, defineIntegration, getClient } from '@sentry/core';\nimport type {\n  Client,\n  Event as SentryEvent,\n  HandlerDataConsole,\n  HandlerDataDom,\n  HandlerDataFetch,\n  HandlerDataHistory,\n  HandlerDataXhr,\n  Integration,\n  IntegrationClass,\n  IntegrationFn,\n} from '@sentry/types';\nimport type {\n  Breadcrumb,\n  FetchBreadcrumbData,\n  FetchBreadcrumbHint,\n  XhrBreadcrumbData,\n  XhrBreadcrumbHint,\n} from '@sentry/types/build/types/breadcrumb';\nimport {\n  SENTRY_XHR_DATA_KEY,\n  addClickKeypressInstrumentationHandler,\n  addConsoleInstrumentationHandler,\n  addFetchInstrumentationHandler,\n  addHistoryInstrumentationHandler,\n  addXhrInstrumentationHandler,\n  getComponentName,\n  getEventDescription,\n  htmlTreeAsString,\n  logger,\n  parseUrl,\n  safeJoin,\n  severityLevelFromString,\n} from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { WINDOW } from '../helpers';\n\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom:\n    | boolean\n    | {\n        serializeAttribute?: string | string[];\n        maxStringLength?: number;\n      };\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/** maxStringLength gets capped to prevent 100 breadcrumbs exceeding 1MB event payload size */\nconst MAX_ALLOWED_STRING_LENGTH = 1024;\n\nconst INTEGRATION_NAME = 'Breadcrumbs';\n\nconst _breadcrumbsIntegration = ((options: Partial<BreadcrumbsOptions> = {}) => {\n  const _options = {\n    console: true,\n    dom: true,\n    fetch: true,\n    history: true,\n    sentry: true,\n    xhr: true,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client) {\n      if (_options.console) {\n        addConsoleInstrumentationHandler(_getConsoleBreadcrumbHandler(client));\n      }\n      if (_options.dom) {\n        addClickKeypressInstrumentationHandler(_getDomBreadcrumbHandler(client, _options.dom));\n      }\n      if (_options.xhr) {\n        addXhrInstrumentationHandler(_getXhrBreadcrumbHandler(client));\n      }\n      if (_options.fetch) {\n        addFetchInstrumentationHandler(_getFetchBreadcrumbHandler(client));\n      }\n      if (_options.history) {\n        addHistoryInstrumentationHandler(_getHistoryBreadcrumbHandler(client));\n      }\n      if (_options.sentry && client.on) {\n        client.on('beforeSendEvent', _getSentryBreadcrumbHandler(client));\n      }\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const breadcrumbsIntegration = defineIntegration(_breadcrumbsIntegration);\n\n/**\n * Default Breadcrumbs instrumentations\n *\n * @deprecated Use `breadcrumbsIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const Breadcrumbs = convertIntegrationFnToClass(INTEGRATION_NAME, breadcrumbsIntegration) as IntegrationClass<\n  Integration & { setup: (client: Client) => void }\n> & {\n  new (\n    options?: Partial<{\n      console: boolean;\n      dom:\n        | boolean\n        | {\n            serializeAttribute?: string | string[];\n            maxStringLength?: number;\n          };\n      fetch: boolean;\n      history: boolean;\n      sentry: boolean;\n      xhr: boolean;\n    }>,\n  ): Integration;\n};\n\n/**\n * Adds a breadcrumb for Sentry events or transactions if this option is enabled.\n */\nfunction _getSentryBreadcrumbHandler(client: Client): (event: SentryEvent) => void {\n  return function addSentryBreadcrumb(event: SentryEvent): void {\n    if (getClient() !== client) {\n      return;\n    }\n\n    addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  };\n}\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\nfunction _getDomBreadcrumbHandler(\n  client: Client,\n  dom: BreadcrumbsOptions['dom'],\n): (handlerData: HandlerDataDom) => void {\n  return function _innerDomBreadcrumb(handlerData: HandlerDataDom): void {\n    if (getClient() !== client) {\n      return;\n    }\n\n    let target;\n    let componentName;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n\n    let maxStringLength =\n      typeof dom === 'object' && typeof dom.maxStringLength === 'number' ? dom.maxStringLength : undefined;\n    if (maxStringLength && maxStringLength > MAX_ALLOWED_STRING_LENGTH) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `\\`dom.maxStringLength\\` cannot exceed ${MAX_ALLOWED_STRING_LENGTH}, but a value of ${maxStringLength} was configured. Sentry will use ${MAX_ALLOWED_STRING_LENGTH} instead.`,\n        );\n      maxStringLength = MAX_ALLOWED_STRING_LENGTH;\n    }\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      const event = handlerData.event as Event | Node;\n      const element = _isEvent(event) ? event.target : event;\n\n      target = htmlTreeAsString(element, { keyAttrs, maxStringLength });\n      componentName = getComponentName(element);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    const breadcrumb: Breadcrumb = {\n      category: `ui.${handlerData.name}`,\n      message: target,\n    };\n\n    if (componentName) {\n      breadcrumb.data = { 'ui.component_name': componentName };\n    }\n\n    addBreadcrumb(breadcrumb, {\n      event: handlerData.event,\n      name: handlerData.name,\n      global: handlerData.global,\n    });\n  };\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\nfunction _getConsoleBreadcrumbHandler(client: Client): (handlerData: HandlerDataConsole) => void {\n  return function _consoleBreadcrumb(handlerData: HandlerDataConsole): void {\n    if (getClient() !== client) {\n      return;\n    }\n\n    const breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console',\n      },\n      level: severityLevelFromString(handlerData.level),\n      message: safeJoin(handlerData.args, ' '),\n    };\n\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n\n    addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level,\n    });\n  };\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\nfunction _getXhrBreadcrumbHandler(client: Client): (handlerData: HandlerDataXhr) => void {\n  return function _xhrBreadcrumb(handlerData: HandlerDataXhr): void {\n    if (getClient() !== client) {\n      return;\n    }\n\n    const { startTimestamp, endTimestamp } = handlerData;\n\n    const sentryXhrData = handlerData.xhr[SENTRY_XHR_DATA_KEY];\n\n    // We only capture complete, non-sentry requests\n    if (!startTimestamp || !endTimestamp || !sentryXhrData) {\n      return;\n    }\n\n    const { method, url, status_code, body } = sentryXhrData;\n\n    const data: XhrBreadcrumbData = {\n      method,\n      url,\n      status_code,\n    };\n\n    const hint: XhrBreadcrumbHint = {\n      xhr: handlerData.xhr,\n      input: body,\n      startTimestamp,\n      endTimestamp,\n    };\n\n    addBreadcrumb(\n      {\n        category: 'xhr',\n        data,\n        type: 'http',\n      },\n      hint,\n    );\n  };\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\nfunction _getFetchBreadcrumbHandler(client: Client): (handlerData: HandlerDataFetch) => void {\n  return function _fetchBreadcrumb(handlerData: HandlerDataFetch): void {\n    if (getClient() !== client) {\n      return;\n    }\n\n    const { startTimestamp, endTimestamp } = handlerData;\n\n    // We only capture complete fetch requests\n    if (!endTimestamp) {\n      return;\n    }\n\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n      return;\n    }\n\n    if (handlerData.error) {\n      const data: FetchBreadcrumbData = handlerData.fetchData;\n      const hint: FetchBreadcrumbHint = {\n        data: handlerData.error,\n        input: handlerData.args,\n        startTimestamp,\n        endTimestamp,\n      };\n\n      addBreadcrumb(\n        {\n          category: 'fetch',\n          data,\n          level: 'error',\n          type: 'http',\n        },\n        hint,\n      );\n    } else {\n      const response = handlerData.response as Response | undefined;\n      const data: FetchBreadcrumbData = {\n        ...handlerData.fetchData,\n        status_code: response && response.status,\n      };\n      const hint: FetchBreadcrumbHint = {\n        input: handlerData.args,\n        response,\n        startTimestamp,\n        endTimestamp,\n      };\n      addBreadcrumb(\n        {\n          category: 'fetch',\n          data,\n          type: 'http',\n        },\n        hint,\n      );\n    }\n  };\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\nfunction _getHistoryBreadcrumbHandler(client: Client): (handlerData: HandlerDataHistory) => void {\n  return function _historyBreadcrumb(handlerData: HandlerDataHistory): void {\n    if (getClient() !== client) {\n      return;\n    }\n\n    let from: string | undefined = handlerData.from;\n    let to: string | undefined = handlerData.to;\n    const parsedLoc = parseUrl(WINDOW.location.href);\n    let parsedFrom = from ? parseUrl(from) : undefined;\n    const parsedTo = parseUrl(to);\n\n    // Initial pushState doesn't provide `from` information\n    if (!parsedFrom || !parsedFrom.path) {\n      parsedFrom = parsedLoc;\n    }\n\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      to = parsedTo.relative;\n    }\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      from = parsedFrom.relative;\n    }\n\n    addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from,\n        to,\n      },\n    });\n  };\n}\n\nfunction _isEvent(event: unknown): event is Event {\n  return !!event && !!(event as Record<string, unknown>).target;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}