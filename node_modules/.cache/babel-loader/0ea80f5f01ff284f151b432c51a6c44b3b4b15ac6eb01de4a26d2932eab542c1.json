{"ast":null,"code":"import { inboundFiltersIntegration, functionToStringIntegration, getIntegrationsToSetup, initAndBind, getReportDialogEndpoint, getCurrentHub, startSession, captureSession, getClient } from '@sentry/core';\nimport { stackParserFromStackParserOptions, supportsFetch, logger, addHistoryInstrumentationHandler } from '@sentry/utils';\nimport { BrowserClient } from './client.js';\nimport { DEBUG_BUILD } from './debug-build.js';\nimport { WINDOW, wrap as wrap$1 } from './helpers.js';\nimport { breadcrumbsIntegration } from './integrations/breadcrumbs.js';\nimport { dedupeIntegration } from './integrations/dedupe.js';\nimport { globalHandlersIntegration } from './integrations/globalhandlers.js';\nimport { httpContextIntegration } from './integrations/httpcontext.js';\nimport { linkedErrorsIntegration } from './integrations/linkederrors.js';\nimport { browserApiErrorsIntegration } from './integrations/trycatch.js';\nimport { defaultStackParser } from './stack-parsers.js';\nimport { makeFetchTransport } from './transports/fetch.js';\nimport { makeXHRTransport } from './transports/xhr.js';\n\n/** @deprecated Use `getDefaultIntegrations(options)` instead. */\nconst defaultIntegrations = [inboundFiltersIntegration(), functionToStringIntegration(), browserApiErrorsIntegration(), breadcrumbsIntegration(), globalHandlersIntegration(), linkedErrorsIntegration(), dedupeIntegration(), httpContextIntegration()];\n\n/** Get the default integrations for the browser SDK. */\nfunction getDefaultIntegrations(_options) {\n  // We return a copy of the defaultIntegrations here to avoid mutating this\n  return [\n  // eslint-disable-next-line deprecation/deprecation\n  ...defaultIntegrations];\n}\n\n/**\n * A magic string that build tooling can leverage in order to inject a release value into the SDK.\n */\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nfunction init(options = {}) {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = getDefaultIntegrations();\n  }\n  if (options.release === undefined) {\n    // This allows build tooling to find-and-replace __SENTRY_RELEASE__ to inject a release value\n    if (typeof __SENTRY_RELEASE__ === 'string') {\n      options.release = __SENTRY_RELEASE__;\n    }\n\n    // This supports the variable that sentry-webpack-plugin injects\n    if (WINDOW.SENTRY_RELEASE && WINDOW.SENTRY_RELEASE.id) {\n      options.release = WINDOW.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n  if (options.sendClientReports === undefined) {\n    options.sendClientReports = true;\n  }\n  const clientOptions = {\n    ...options,\n    stackParser: stackParserFromStackParserOptions(options.stackParser || defaultStackParser),\n    integrations: getIntegrationsToSetup(options),\n    transport: options.transport || (supportsFetch() ? makeFetchTransport : makeXHRTransport)\n  };\n  initAndBind(BrowserClient, clientOptions);\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\nconst showReportDialog = (\n// eslint-disable-next-line deprecation/deprecation\noptions = {},\n// eslint-disable-next-line deprecation/deprecation\nhub = getCurrentHub()) => {\n  // doesn't work without a document (React Native)\n  if (!WINDOW.document) {\n    DEBUG_BUILD && logger.error('Global document not defined in showReportDialog call');\n    return;\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const {\n    client,\n    scope\n  } = hub.getStackTop();\n  const dsn = options.dsn || client && client.getDsn();\n  if (!dsn) {\n    DEBUG_BUILD && logger.error('DSN not configured for showReportDialog call');\n    return;\n  }\n  if (scope) {\n    options.user = {\n      ...scope.getUser(),\n      ...options.user\n    };\n  }\n\n  // TODO(v8): Remove this entire if statement. `eventId` will be a required option.\n  // eslint-disable-next-line deprecation/deprecation\n  if (!options.eventId) {\n    // eslint-disable-next-line deprecation/deprecation\n    options.eventId = hub.lastEventId();\n  }\n  const script = WINDOW.document.createElement('script');\n  script.async = true;\n  script.crossOrigin = 'anonymous';\n  script.src = getReportDialogEndpoint(dsn, options);\n  if (options.onLoad) {\n    script.onload = options.onLoad;\n  }\n  const {\n    onClose\n  } = options;\n  if (onClose) {\n    const reportDialogClosedMessageHandler = event => {\n      if (event.data === '__sentry_reportdialog_closed__') {\n        try {\n          onClose();\n        } finally {\n          WINDOW.removeEventListener('message', reportDialogClosedMessageHandler);\n        }\n      }\n    };\n    WINDOW.addEventListener('message', reportDialogClosedMessageHandler);\n  }\n  const injectionPoint = WINDOW.document.head || WINDOW.document.body;\n  if (injectionPoint) {\n    injectionPoint.appendChild(script);\n  } else {\n    DEBUG_BUILD && logger.error('Not injecting report dialog. No injection point found in HTML');\n  }\n};\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nfunction forceLoad() {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nfunction onLoad(callback) {\n  callback();\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @deprecated This function will be removed in v8.\n * It is not part of Sentry's official API and it's easily replaceable by using a try/catch block\n * and calling Sentry.captureException.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// TODO(v8): Remove this function\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrap(fn) {\n  return wrap$1(fn)();\n}\n\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking() {\n  if (typeof WINDOW.document === 'undefined') {\n    DEBUG_BUILD && logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n\n  // The session duration for browser sessions does not track a meaningful\n  // concept that can be used as a metric.\n  // Automatically captured sessions are akin to page views, and thus we\n  // discard their duration.\n  startSession({\n    ignoreDuration: true\n  });\n  captureSession();\n\n  // We want to create a session for every navigation as well\n  addHistoryInstrumentationHandler(({\n    from,\n    to\n  }) => {\n    // Don't create an additional session for the initial route or if the location did not change\n    if (from !== undefined && from !== to) {\n      startSession({\n        ignoreDuration: true\n      });\n      captureSession();\n    }\n  });\n}\n\n/**\n * Captures user feedback and sends it to Sentry.\n */\nfunction captureUserFeedback(feedback) {\n  const client = getClient();\n  if (client) {\n    client.captureUserFeedback(feedback);\n  }\n}\nexport { captureUserFeedback, defaultIntegrations, forceLoad, getDefaultIntegrations, init, onLoad, showReportDialog, wrap };","map":{"version":3,"names":["defaultIntegrations","inboundFiltersIntegration","functionToStringIntegration","browserApiErrorsIntegration","breadcrumbsIntegration","globalHandlersIntegration","linkedErrorsIntegration","dedupeIntegration","httpContextIntegration","getDefaultIntegrations","_options","init","options","undefined","release","__SENTRY_RELEASE__","WINDOW","SENTRY_RELEASE","id","autoSessionTracking","sendClientReports","clientOptions","stackParser","stackParserFromStackParserOptions","defaultStackParser","integrations","getIntegrationsToSetup","transport","supportsFetch","makeFetchTransport","makeXHRTransport","initAndBind","BrowserClient","startSessionTracking","showReportDialog","hub","getCurrentHub","document","DEBUG_BUILD","logger","error","client","scope","getStackTop","dsn","getDsn","user","getUser","eventId","lastEventId","script","createElement","async","crossOrigin","src","getReportDialogEndpoint","onLoad","onload","onClose","reportDialogClosedMessageHandler","event","data","removeEventListener","addEventListener","injectionPoint","head","body","appendChild","forceLoad","callback","wrap","fn","wrap$1","warn","startSession","ignoreDuration","captureSession","addHistoryInstrumentationHandler","from","to","captureUserFeedback","feedback","getClient"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/src/sdk.ts"],"sourcesContent":["import type { Hub } from '@sentry/core';\nimport { functionToStringIntegration, inboundFiltersIntegration } from '@sentry/core';\nimport {\n  captureSession,\n  getClient,\n  getCurrentHub,\n  getIntegrationsToSetup,\n  getReportDialogEndpoint,\n  initAndBind,\n  startSession,\n} from '@sentry/core';\nimport type { Integration, Options, UserFeedback } from '@sentry/types';\nimport {\n  addHistoryInstrumentationHandler,\n  logger,\n  stackParserFromStackParserOptions,\n  supportsFetch,\n} from '@sentry/utils';\n\nimport type { BrowserClientOptions, BrowserOptions } from './client';\nimport { BrowserClient } from './client';\nimport { DEBUG_BUILD } from './debug-build';\nimport type { ReportDialogOptions } from './helpers';\nimport { WINDOW, wrap as internalWrap } from './helpers';\nimport { breadcrumbsIntegration } from './integrations/breadcrumbs';\nimport { dedupeIntegration } from './integrations/dedupe';\nimport { globalHandlersIntegration } from './integrations/globalhandlers';\nimport { httpContextIntegration } from './integrations/httpcontext';\nimport { linkedErrorsIntegration } from './integrations/linkederrors';\nimport { browserApiErrorsIntegration } from './integrations/trycatch';\nimport { defaultStackParser } from './stack-parsers';\nimport { makeFetchTransport, makeXHRTransport } from './transports';\n\n/** @deprecated Use `getDefaultIntegrations(options)` instead. */\nexport const defaultIntegrations = [\n  inboundFiltersIntegration(),\n  functionToStringIntegration(),\n  browserApiErrorsIntegration(),\n  breadcrumbsIntegration(),\n  globalHandlersIntegration(),\n  linkedErrorsIntegration(),\n  dedupeIntegration(),\n  httpContextIntegration(),\n];\n\n/** Get the default integrations for the browser SDK. */\nexport function getDefaultIntegrations(_options: Options): Integration[] {\n  // We return a copy of the defaultIntegrations here to avoid mutating this\n  return [\n    // eslint-disable-next-line deprecation/deprecation\n    ...defaultIntegrations,\n  ];\n}\n\n/**\n * A magic string that build tooling can leverage in order to inject a release value into the SDK.\n */\ndeclare const __SENTRY_RELEASE__: string | undefined;\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = getDefaultIntegrations(options);\n  }\n  if (options.release === undefined) {\n    // This allows build tooling to find-and-replace __SENTRY_RELEASE__ to inject a release value\n    if (typeof __SENTRY_RELEASE__ === 'string') {\n      options.release = __SENTRY_RELEASE__;\n    }\n\n    // This supports the variable that sentry-webpack-plugin injects\n    if (WINDOW.SENTRY_RELEASE && WINDOW.SENTRY_RELEASE.id) {\n      options.release = WINDOW.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n  if (options.sendClientReports === undefined) {\n    options.sendClientReports = true;\n  }\n\n  const clientOptions: BrowserClientOptions = {\n    ...options,\n    stackParser: stackParserFromStackParserOptions(options.stackParser || defaultStackParser),\n    integrations: getIntegrationsToSetup(options),\n    transport: options.transport || (supportsFetch() ? makeFetchTransport : makeXHRTransport),\n  };\n\n  initAndBind(BrowserClient, clientOptions);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n\ntype NewReportDialogOptions = ReportDialogOptions & { eventId: string }; // eslint-disable-line\n\ninterface ShowReportDialogFunction {\n  /**\n   * Present the user with a report dialog.\n   *\n   * @param options Everything is optional, we try to fetch all info need from the global scope.\n   */\n  (options: NewReportDialogOptions): void;\n\n  /**\n   * Present the user with a report dialog.\n   *\n   * @param options Everything is optional, we try to fetch all info need from the global scope.\n   *\n   * @deprecated Please always pass an `options` argument with `eventId`. The `hub` argument will not be used in the next version of the SDK.\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  (options?: ReportDialogOptions, hub?: Hub): void;\n}\n\nexport const showReportDialog: ShowReportDialogFunction = (\n  // eslint-disable-next-line deprecation/deprecation\n  options: ReportDialogOptions = {},\n  // eslint-disable-next-line deprecation/deprecation\n  hub: Hub = getCurrentHub(),\n) => {\n  // doesn't work without a document (React Native)\n  if (!WINDOW.document) {\n    DEBUG_BUILD && logger.error('Global document not defined in showReportDialog call');\n    return;\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const { client, scope } = hub.getStackTop();\n  const dsn = options.dsn || (client && client.getDsn());\n  if (!dsn) {\n    DEBUG_BUILD && logger.error('DSN not configured for showReportDialog call');\n    return;\n  }\n\n  if (scope) {\n    options.user = {\n      ...scope.getUser(),\n      ...options.user,\n    };\n  }\n\n  // TODO(v8): Remove this entire if statement. `eventId` will be a required option.\n  // eslint-disable-next-line deprecation/deprecation\n  if (!options.eventId) {\n    // eslint-disable-next-line deprecation/deprecation\n    options.eventId = hub.lastEventId();\n  }\n\n  const script = WINDOW.document.createElement('script');\n  script.async = true;\n  script.crossOrigin = 'anonymous';\n  script.src = getReportDialogEndpoint(dsn, options);\n\n  if (options.onLoad) {\n    script.onload = options.onLoad;\n  }\n\n  const { onClose } = options;\n  if (onClose) {\n    const reportDialogClosedMessageHandler = (event: MessageEvent): void => {\n      if (event.data === '__sentry_reportdialog_closed__') {\n        try {\n          onClose();\n        } finally {\n          WINDOW.removeEventListener('message', reportDialogClosedMessageHandler);\n        }\n      }\n    };\n    WINDOW.addEventListener('message', reportDialogClosedMessageHandler);\n  }\n\n  const injectionPoint = WINDOW.document.head || WINDOW.document.body;\n  if (injectionPoint) {\n    injectionPoint.appendChild(script);\n  } else {\n    DEBUG_BUILD && logger.error('Not injecting report dialog. No injection point found in HTML');\n  }\n};\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @deprecated This function will be removed in v8.\n * It is not part of Sentry's official API and it's easily replaceable by using a try/catch block\n * and calling Sentry.captureException.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// TODO(v8): Remove this function\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn: (...args: any) => any): any {\n  return internalWrap(fn)();\n}\n\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking(): void {\n  if (typeof WINDOW.document === 'undefined') {\n    DEBUG_BUILD && logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n\n  // The session duration for browser sessions does not track a meaningful\n  // concept that can be used as a metric.\n  // Automatically captured sessions are akin to page views, and thus we\n  // discard their duration.\n  startSession({ ignoreDuration: true });\n  captureSession();\n\n  // We want to create a session for every navigation as well\n  addHistoryInstrumentationHandler(({ from, to }) => {\n    // Don't create an additional session for the initial route or if the location did not change\n    if (from !== undefined && from !== to) {\n      startSession({ ignoreDuration: true });\n      captureSession();\n    }\n  });\n}\n\n/**\n * Captures user feedback and sends it to Sentry.\n */\nexport function captureUserFeedback(feedback: UserFeedback): void {\n  const client = getClient<BrowserClient>();\n  if (client) {\n    client.captureUserFeedback(feedback);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}