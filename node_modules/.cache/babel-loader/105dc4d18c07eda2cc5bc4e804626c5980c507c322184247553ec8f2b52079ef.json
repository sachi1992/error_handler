{"ast":null,"code":"import { isThenable, uuid4, dateTimestampInSeconds, consoleSandbox, logger, GLOBAL_OBJ, getGlobalSingleton } from '@sentry/utils';\nimport { DEFAULT_ENVIRONMENT } from './constants.js';\nimport { DEBUG_BUILD } from './debug-build.js';\nimport { Scope } from './scope.js';\nimport { closeSession, makeSession, updateSession } from './session.js';\nimport { SDK_VERSION } from './version.js';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nconst API_VERSION = parseFloat(SDK_VERSION);\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * @inheritDoc\n */\nclass Hub {\n  /** Is a {@link Layer}[] containing the client and scope */\n\n  /** Contains the last event id of a captured event.  */\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   *\n   * @deprecated Instantiation of Hub objects is deprecated and the constructor will be removed in version 8 of the SDK.\n   *\n   * If you are currently using the Hub for multi-client use like so:\n   *\n   * ```\n   * // OLD\n   * const hub = new Hub();\n   * hub.bindClient(client);\n   * makeMain(hub)\n   * ```\n   *\n   * instead initialize the client as follows:\n   *\n   * ```\n   * // NEW\n   * Sentry.withIsolationScope(() => {\n   *    Sentry.setCurrentClient(client);\n   *    client.init();\n   * });\n   * ```\n   *\n   * If you are using the Hub to capture events like so:\n   *\n   * ```\n   * // OLD\n   * const client = new Client();\n   * const hub = new Hub(client);\n   * hub.captureException()\n   * ```\n   *\n   * instead capture isolated events as follows:\n   *\n   * ```\n   * // NEW\n   * const client = new Client();\n   * const scope = new Scope();\n   * scope.setClient(client);\n   * scope.captureException();\n   * ```\n   */\n  constructor(client, scope, isolationScope, _version = API_VERSION) {\n    this._version = _version;\n    let assignedScope;\n    if (!scope) {\n      assignedScope = new Scope();\n      assignedScope.setClient(client);\n    } else {\n      assignedScope = scope;\n    }\n    let assignedIsolationScope;\n    if (!isolationScope) {\n      assignedIsolationScope = new Scope();\n      assignedIsolationScope.setClient(client);\n    } else {\n      assignedIsolationScope = isolationScope;\n    }\n    this._stack = [{\n      scope: assignedScope\n    }];\n    if (client) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.bindClient(client);\n    }\n    this._isolationScope = assignedIsolationScope;\n  }\n\n  /**\n   * Checks if this hub's version is older than the given version.\n   *\n   * @param version A version number to compare to.\n   * @return True if the given version is newer; otherwise false.\n   *\n   * @deprecated This will be removed in v8.\n   */\n  isOlderThan(version) {\n    return this._version < version;\n  }\n\n  /**\n   * This binds the given client to the current scope.\n   * @param client An SDK client (client) instance.\n   *\n   * @deprecated Use `initAndBind()` directly, or `setCurrentClient()` and/or `client.init()` instead.\n   */\n  bindClient(client) {\n    // eslint-disable-next-line deprecation/deprecation\n    const top = this.getStackTop();\n    top.client = client;\n    top.scope.setClient(client);\n    // eslint-disable-next-line deprecation/deprecation\n    if (client && client.setupIntegrations) {\n      // eslint-disable-next-line deprecation/deprecation\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `withScope` instead.\n   */\n  pushScope() {\n    // We want to clone the content of prev scope\n    // eslint-disable-next-line deprecation/deprecation\n    const scope = this.getScope().clone();\n    // eslint-disable-next-line deprecation/deprecation\n    this.getStack().push({\n      // eslint-disable-next-line deprecation/deprecation\n      client: this.getClient(),\n      scope\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `withScope` instead.\n   */\n  popScope() {\n    // eslint-disable-next-line deprecation/deprecation\n    if (this.getStack().length <= 1) return false;\n    // eslint-disable-next-line deprecation/deprecation\n    return !!this.getStack().pop();\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.withScope()` instead.\n   */\n  withScope(callback) {\n    // eslint-disable-next-line deprecation/deprecation\n    const scope = this.pushScope();\n    let maybePromiseResult;\n    try {\n      maybePromiseResult = callback(scope);\n    } catch (e) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.popScope();\n      throw e;\n    }\n    if (isThenable(maybePromiseResult)) {\n      // @ts-expect-error - isThenable returns the wrong type\n      return maybePromiseResult.then(res => {\n        // eslint-disable-next-line deprecation/deprecation\n        this.popScope();\n        return res;\n      }, e => {\n        // eslint-disable-next-line deprecation/deprecation\n        this.popScope();\n        throw e;\n      });\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    this.popScope();\n    return maybePromiseResult;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.getClient()` instead.\n   */\n  getClient() {\n    // eslint-disable-next-line deprecation/deprecation\n    return this.getStackTop().client;\n  }\n\n  /**\n   * Returns the scope of the top stack.\n   *\n   * @deprecated Use `Sentry.getCurrentScope()` instead.\n   */\n  getScope() {\n    // eslint-disable-next-line deprecation/deprecation\n    return this.getStackTop().scope;\n  }\n\n  /**\n   * @deprecated Use `Sentry.getIsolationScope()` instead.\n   */\n  getIsolationScope() {\n    return this._isolationScope;\n  }\n\n  /**\n   * Returns the scope stack for domains or the process.\n   * @deprecated This will be removed in v8.\n   */\n  getStack() {\n    return this._stack;\n  }\n\n  /**\n   * Returns the topmost scope layer in the order domain > local > process.\n   * @deprecated This will be removed in v8.\n   */\n  getStackTop() {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.captureException()` instead.\n   */\n  captureException(exception, hint) {\n    const eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4();\n    const syntheticException = new Error('Sentry syntheticException');\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().captureException(exception, {\n      originalException: exception,\n      syntheticException,\n      ...hint,\n      event_id: eventId\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use  `Sentry.captureMessage()` instead.\n   */\n  captureMessage(message,\n  // eslint-disable-next-line deprecation/deprecation\n  level, hint) {\n    const eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4();\n    const syntheticException = new Error(message);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().captureMessage(message, level, {\n      originalException: message,\n      syntheticException,\n      ...hint,\n      event_id: eventId\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.captureEvent()` instead.\n   */\n  captureEvent(event, hint) {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n    if (!event.type) {\n      this._lastEventId = eventId;\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().captureEvent(event, {\n      ...hint,\n      event_id: eventId\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated This will be removed in v8.\n   */\n  lastEventId() {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.addBreadcrumb()` instead.\n   */\n  addBreadcrumb(breadcrumb, hint) {\n    // eslint-disable-next-line deprecation/deprecation\n    const {\n      scope,\n      client\n    } = this.getStackTop();\n    if (!client) return;\n    const {\n      beforeBreadcrumb = null,\n      maxBreadcrumbs = DEFAULT_BREADCRUMBS\n    } = client.getOptions && client.getOptions() || {};\n    if (maxBreadcrumbs <= 0) return;\n    const timestamp = dateTimestampInSeconds();\n    const mergedBreadcrumb = {\n      timestamp,\n      ...breadcrumb\n    };\n    const finalBreadcrumb = beforeBreadcrumb ? consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) : mergedBreadcrumb;\n    if (finalBreadcrumb === null) return;\n    if (client.emit) {\n      client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n    }\n\n    // TODO(v8): I know this comment doesn't make much sense because the hub will be deprecated but I still wanted to\n    // write it down. In theory, we would have to add the breadcrumbs to the isolation scope here, however, that would\n    // duplicate all of the breadcrumbs. There was the possibility of adding breadcrumbs to both, the isolation scope\n    // and the normal scope, and deduplicating it down the line in the event processing pipeline. However, that would\n    // have been very fragile, because the breadcrumb objects would have needed to keep their identity all throughout\n    // the event processing pipeline.\n    // In the new implementation, the top level `Sentry.addBreadcrumb()` should ONLY write to the isolation scope.\n\n    scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setUser()` instead.\n   */\n  setUser(user) {\n    // TODO(v8): The top level `Sentry.setUser()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setUser(user);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setTags()` instead.\n   */\n  setTags(tags) {\n    // TODO(v8): The top level `Sentry.setTags()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setTags(tags);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setExtras()` instead.\n   */\n  setExtras(extras) {\n    // TODO(v8): The top level `Sentry.setExtras()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setExtras(extras);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setTag()` instead.\n   */\n  setTag(key, value) {\n    // TODO(v8): The top level `Sentry.setTag()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setTag(key, value);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setExtra()` instead.\n   */\n  setExtra(key, extra) {\n    // TODO(v8): The top level `Sentry.setExtra()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setExtra(key, extra);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setContext()` instead.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  setContext(name, context) {\n    // TODO(v8): The top level `Sentry.setContext()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setContext(name, context);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `getScope()` directly.\n   */\n  configureScope(callback) {\n    // eslint-disable-next-line deprecation/deprecation\n    const {\n      scope,\n      client\n    } = this.getStackTop();\n    if (client) {\n      callback(scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  run(callback) {\n    // eslint-disable-next-line deprecation/deprecation\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      // eslint-disable-next-line deprecation/deprecation\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.getClient().getIntegrationByName()` instead.\n   */\n  getIntegration(integration) {\n    // eslint-disable-next-line deprecation/deprecation\n    const client = this.getClient();\n    if (!client) return null;\n    try {\n      // eslint-disable-next-line deprecation/deprecation\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      DEBUG_BUILD && logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n   *\n   * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n   * new child span within the transaction or any span, call the respective `.startChild()` method.\n   *\n   * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n   *\n   * The transaction must be finished with a call to its `.end()` method, at which point the transaction with all its\n   * finished child spans will be sent to Sentry.\n   *\n   * @param context Properties of the new `Transaction`.\n   * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n   * default values). See {@link Options.tracesSampler}.\n   *\n   * @returns The transaction which was just started\n   *\n   * @deprecated Use `startSpan()`, `startSpanManual()` or `startInactiveSpan()` instead.\n   */\n  startTransaction(context, customSamplingContext) {\n    const result = this._callExtensionMethod('startTransaction', context, customSamplingContext);\n    if (DEBUG_BUILD && !result) {\n      // eslint-disable-next-line deprecation/deprecation\n      const client = this.getClient();\n      if (!client) {\n        logger.warn(\"Tracing extension 'startTransaction' is missing. You should 'init' the SDK before calling 'startTransaction'\");\n      } else {\n        logger.warn(`Tracing extension 'startTransaction' has not been added. Call 'addTracingExtensions' before calling 'init':\nSentry.addTracingExtensions();\nSentry.init({...});\n`);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `spanToTraceHeader()` instead.\n   */\n  traceHeaders() {\n    return this._callExtensionMethod('traceHeaders');\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use top level `captureSession` instead.\n   */\n  captureSession(endSession = false) {\n    // both send the update and pull the session from the scope\n    if (endSession) {\n      // eslint-disable-next-line deprecation/deprecation\n      return this.endSession();\n    }\n\n    // only send the update\n    this._sendSessionUpdate();\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use top level `endSession` instead.\n   */\n  endSession() {\n    // eslint-disable-next-line deprecation/deprecation\n    const layer = this.getStackTop();\n    const scope = layer.scope;\n    const session = scope.getSession();\n    if (session) {\n      closeSession(session);\n    }\n    this._sendSessionUpdate();\n\n    // the session is over; take it off of the scope\n    scope.setSession();\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use top level `startSession` instead.\n   */\n  startSession(context) {\n    // eslint-disable-next-line deprecation/deprecation\n    const {\n      scope,\n      client\n    } = this.getStackTop();\n    const {\n      release,\n      environment = DEFAULT_ENVIRONMENT\n    } = client && client.getOptions() || {};\n\n    // Will fetch userAgent if called from browser sdk\n    const {\n      userAgent\n    } = GLOBAL_OBJ.navigator || {};\n    const session = makeSession({\n      release,\n      environment,\n      user: scope.getUser(),\n      ...(userAgent && {\n        userAgent\n      }),\n      ...context\n    });\n\n    // End existing session if there's one\n    const currentSession = scope.getSession && scope.getSession();\n    if (currentSession && currentSession.status === 'ok') {\n      updateSession(currentSession, {\n        status: 'exited'\n      });\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    this.endSession();\n\n    // Afterwards we set the new session on the scope\n    scope.setSession(session);\n    return session;\n  }\n\n  /**\n   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n   * when Tracing is used.\n   *\n   * @deprecated Use top-level `getClient().getOptions().sendDefaultPii` instead. This function\n   * only unnecessarily increased API surface but only wrapped accessing the option.\n   */\n  shouldSendDefaultPii() {\n    // eslint-disable-next-line deprecation/deprecation\n    const client = this.getClient();\n    const options = client && client.getOptions();\n    return Boolean(options && options.sendDefaultPii);\n  }\n\n  /**\n   * Sends the current Session on the scope\n   */\n  _sendSessionUpdate() {\n    // eslint-disable-next-line deprecation/deprecation\n    const {\n      scope,\n      client\n    } = this.getStackTop();\n    const session = scope.getSession();\n    if (session && client && client.captureSession) {\n      client.captureSession(session);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-expect-error Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _callExtensionMethod(method, ...args) {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    DEBUG_BUILD && logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nfunction getMainCarrier() {\n  GLOBAL_OBJ.__SENTRY__ = GLOBAL_OBJ.__SENTRY__ || {\n    extensions: {},\n    hub: undefined\n  };\n  return GLOBAL_OBJ;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n *\n * @deprecated Use `setCurrentClient()` instead.\n */\nfunction makeMain(hub) {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n *\n * @deprecated Use the respective replacement method directly instead.\n */\nfunction getCurrentHub() {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    const hub = registry.__SENTRY__.acs.getCurrentHub();\n    if (hub) {\n      return hub;\n    }\n  }\n\n  // Return hub that lives on a global object\n  return getGlobalHub(registry);\n}\n\n/**\n * Get the currently active isolation scope.\n * The isolation scope is active for the current exection context,\n * meaning that it will remain stable for the same Hub.\n */\nfunction getIsolationScope() {\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentHub().getIsolationScope();\n}\nfunction getGlobalHub(registry = getMainCarrier()) {\n  // If there's no hub, or its an old API, assign a new one\n\n  if (!hasHubOnCarrier(registry) ||\n  // eslint-disable-next-line deprecation/deprecation\n  getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    // eslint-disable-next-line deprecation/deprecation\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * If the carrier does not contain a hub, a new hub is created with the global hub client and scope.\n */\nfunction ensureHubOnCarrier(carrier, parent = getGlobalHub()) {\n  // If there's no hub on current domain, or it's an old API, assign a new one\n  if (!hasHubOnCarrier(carrier) ||\n  // eslint-disable-next-line deprecation/deprecation\n  getHubFromCarrier(carrier).isOlderThan(API_VERSION)) {\n    // eslint-disable-next-line deprecation/deprecation\n    const client = parent.getClient();\n    // eslint-disable-next-line deprecation/deprecation\n    const scope = parent.getScope();\n    // eslint-disable-next-line deprecation/deprecation\n    const isolationScope = parent.getIsolationScope();\n    // eslint-disable-next-line deprecation/deprecation\n    setHubOnCarrier(carrier, new Hub(client, scope.clone(), isolationScope.clone()));\n  }\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */\nfunction setAsyncContextStrategy(strategy) {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n  registry.__SENTRY__ = registry.__SENTRY__ || {};\n  registry.__SENTRY__.acs = strategy;\n}\n\n/**\n * Runs the supplied callback in its own async context. Async Context strategies are defined per SDK.\n *\n * @param callback The callback to run in its own async context\n * @param options Options to pass to the async context strategy\n * @returns The result of the callback\n */\nfunction runWithAsyncContext(callback, options = {}) {\n  const registry = getMainCarrier();\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    return registry.__SENTRY__.acs.runWithAsyncContext(callback, options);\n  }\n\n  // if there was no strategy, fallback to just calling the callback\n  return callback();\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier) {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nfunction getHubFromCarrier(carrier) {\n  // eslint-disable-next-line deprecation/deprecation\n  return getGlobalSingleton('hub', () => new Hub(), carrier);\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\nfunction setHubOnCarrier(carrier, hub) {\n  if (!carrier) return false;\n  const __SENTRY__ = carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  __SENTRY__.hub = hub;\n  return true;\n}\nexport { API_VERSION, Hub, ensureHubOnCarrier, getCurrentHub, getHubFromCarrier, getIsolationScope, getMainCarrier, makeMain, runWithAsyncContext, setAsyncContextStrategy, setHubOnCarrier };","map":{"version":3,"names":["API_VERSION","parseFloat","SDK_VERSION","DEFAULT_BREADCRUMBS","Hub","constructor","client","scope","isolationScope","_version","assignedScope","Scope","setClient","assignedIsolationScope","_stack","bindClient","_isolationScope","isOlderThan","version","top","getStackTop","setupIntegrations","pushScope","getScope","clone","getStack","push","getClient","popScope","length","pop","withScope","callback","maybePromiseResult","e","isThenable","then","res","getIsolationScope","captureException","exception","hint","eventId","_lastEventId","event_id","uuid4","syntheticException","Error","originalException","captureMessage","message","level","captureEvent","event","type","lastEventId","addBreadcrumb","breadcrumb","beforeBreadcrumb","maxBreadcrumbs","getOptions","timestamp","dateTimestampInSeconds","mergedBreadcrumb","finalBreadcrumb","consoleSandbox","emit","setUser","user","setTags","tags","setExtras","extras","setTag","key","value","setExtra","extra","setContext","name","context","configureScope","run","oldHub","makeMain","getIntegration","integration","_oO","DEBUG_BUILD","logger","warn","id","startTransaction","customSamplingContext","result","_callExtensionMethod","traceHeaders","captureSession","endSession","_sendSessionUpdate","layer","session","getSession","closeSession","setSession","startSession","release","environment","DEFAULT_ENVIRONMENT","userAgent","GLOBAL_OBJ","navigator","makeSession","getUser","currentSession","status","updateSession","shouldSendDefaultPii","options","Boolean","sendDefaultPii","method","args","carrier","getMainCarrier","sentry","__SENTRY__","extensions","apply","hub","undefined","registry","getHubFromCarrier","setHubOnCarrier","getCurrentHub","acs","getGlobalHub","hasHubOnCarrier","ensureHubOnCarrier","parent","setAsyncContextStrategy","strategy","runWithAsyncContext","getGlobalSingleton"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/hub.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Primitive,\n  Session,\n  SessionContext,\n  Severity,\n  SeverityLevel,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport {\n  GLOBAL_OBJ,\n  consoleSandbox,\n  dateTimestampInSeconds,\n  getGlobalSingleton,\n  isThenable,\n  logger,\n  uuid4,\n} from '@sentry/utils';\n\nimport { DEFAULT_ENVIRONMENT } from './constants';\nimport { DEBUG_BUILD } from './debug-build';\nimport { Scope } from './scope';\nimport { closeSession, makeSession, updateSession } from './session';\nimport { SDK_VERSION } from './version';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = parseFloat(SDK_VERSION);\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\nexport interface RunWithAsyncContextOptions {\n  /** Whether to reuse an existing async context if one exists. Defaults to false. */\n  reuseExisting?: boolean;\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Strategy used to track async context.\n */\nexport interface AsyncContextStrategy {\n  /**\n   * Gets the current async context. Returns undefined if there is no current async context.\n   */\n  getCurrentHub: () => Hub | undefined;\n  /**\n   * Runs the supplied callback in its own async context.\n   */\n  runWithAsyncContext<T>(callback: () => T, options: RunWithAsyncContextOptions): T;\n}\n\n/**\n * A layer in the process stack.\n * @hidden\n */\nexport interface Layer {\n  client?: Client;\n  scope: Scope;\n}\n\n/**\n * An object that contains a hub and maintains a scope stack.\n * @hidden\n */\nexport interface Carrier {\n  __SENTRY__?: {\n    hub?: Hub;\n    acs?: AsyncContextStrategy;\n    /**\n     * Extra Hub properties injected by various SDKs\n     */\n    integrations?: Integration[];\n    extensions?: {\n      /** Extension methods for the hub, which are bound to the current Hub instance */\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      [key: string]: Function;\n    };\n  };\n}\n\n/**\n * @inheritDoc\n */\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  private _isolationScope: Scope;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   *\n   * @deprecated Instantiation of Hub objects is deprecated and the constructor will be removed in version 8 of the SDK.\n   *\n   * If you are currently using the Hub for multi-client use like so:\n   *\n   * ```\n   * // OLD\n   * const hub = new Hub();\n   * hub.bindClient(client);\n   * makeMain(hub)\n   * ```\n   *\n   * instead initialize the client as follows:\n   *\n   * ```\n   * // NEW\n   * Sentry.withIsolationScope(() => {\n   *    Sentry.setCurrentClient(client);\n   *    client.init();\n   * });\n   * ```\n   *\n   * If you are using the Hub to capture events like so:\n   *\n   * ```\n   * // OLD\n   * const client = new Client();\n   * const hub = new Hub(client);\n   * hub.captureException()\n   * ```\n   *\n   * instead capture isolated events as follows:\n   *\n   * ```\n   * // NEW\n   * const client = new Client();\n   * const scope = new Scope();\n   * scope.setClient(client);\n   * scope.captureException();\n   * ```\n   */\n  public constructor(\n    client?: Client,\n    scope?: Scope,\n    isolationScope?: Scope,\n    private readonly _version: number = API_VERSION,\n  ) {\n    let assignedScope;\n    if (!scope) {\n      assignedScope = new Scope();\n      assignedScope.setClient(client);\n    } else {\n      assignedScope = scope;\n    }\n\n    let assignedIsolationScope;\n    if (!isolationScope) {\n      assignedIsolationScope = new Scope();\n      assignedIsolationScope.setClient(client);\n    } else {\n      assignedIsolationScope = isolationScope;\n    }\n\n    this._stack = [{ scope: assignedScope }];\n\n    if (client) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.bindClient(client);\n    }\n\n    this._isolationScope = assignedIsolationScope;\n  }\n\n  /**\n   * Checks if this hub's version is older than the given version.\n   *\n   * @param version A version number to compare to.\n   * @return True if the given version is newer; otherwise false.\n   *\n   * @deprecated This will be removed in v8.\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * This binds the given client to the current scope.\n   * @param client An SDK client (client) instance.\n   *\n   * @deprecated Use `initAndBind()` directly, or `setCurrentClient()` and/or `client.init()` instead.\n   */\n  public bindClient(client?: Client): void {\n    // eslint-disable-next-line deprecation/deprecation\n    const top = this.getStackTop();\n    top.client = client;\n    top.scope.setClient(client);\n    // eslint-disable-next-line deprecation/deprecation\n    if (client && client.setupIntegrations) {\n      // eslint-disable-next-line deprecation/deprecation\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `withScope` instead.\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    // eslint-disable-next-line deprecation/deprecation\n    const scope = this.getScope().clone();\n    // eslint-disable-next-line deprecation/deprecation\n    this.getStack().push({\n      // eslint-disable-next-line deprecation/deprecation\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `withScope` instead.\n   */\n  public popScope(): boolean {\n    // eslint-disable-next-line deprecation/deprecation\n    if (this.getStack().length <= 1) return false;\n    // eslint-disable-next-line deprecation/deprecation\n    return !!this.getStack().pop();\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.withScope()` instead.\n   */\n  public withScope<T>(callback: (scope: Scope) => T): T {\n    // eslint-disable-next-line deprecation/deprecation\n    const scope = this.pushScope();\n\n    let maybePromiseResult: T;\n    try {\n      maybePromiseResult = callback(scope);\n    } catch (e) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.popScope();\n      throw e;\n    }\n\n    if (isThenable(maybePromiseResult)) {\n      // @ts-expect-error - isThenable returns the wrong type\n      return maybePromiseResult.then(\n        res => {\n          // eslint-disable-next-line deprecation/deprecation\n          this.popScope();\n          return res;\n        },\n        e => {\n          // eslint-disable-next-line deprecation/deprecation\n          this.popScope();\n          throw e;\n        },\n      );\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    this.popScope();\n    return maybePromiseResult;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.getClient()` instead.\n   */\n  public getClient<C extends Client>(): C | undefined {\n    // eslint-disable-next-line deprecation/deprecation\n    return this.getStackTop().client as C;\n  }\n\n  /**\n   * Returns the scope of the top stack.\n   *\n   * @deprecated Use `Sentry.getCurrentScope()` instead.\n   */\n  public getScope(): Scope {\n    // eslint-disable-next-line deprecation/deprecation\n    return this.getStackTop().scope;\n  }\n\n  /**\n   * @deprecated Use `Sentry.getIsolationScope()` instead.\n   */\n  public getIsolationScope(): Scope {\n    return this._isolationScope;\n  }\n\n  /**\n   * Returns the scope stack for domains or the process.\n   * @deprecated This will be removed in v8.\n   */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /**\n   * Returns the topmost scope layer in the order domain > local > process.\n   * @deprecated This will be removed in v8.\n   */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.captureException()` instead.\n   */\n  public captureException(exception: unknown, hint?: EventHint): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error('Sentry syntheticException');\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().captureException(exception, {\n      originalException: exception,\n      syntheticException,\n      ...hint,\n      event_id: eventId,\n    });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use  `Sentry.captureMessage()` instead.\n   */\n  public captureMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level?: Severity | SeverityLevel,\n    hint?: EventHint,\n  ): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error(message);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().captureMessage(message, level, {\n      originalException: message,\n      syntheticException,\n      ...hint,\n      event_id: eventId,\n    });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.captureEvent()` instead.\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n    if (!event.type) {\n      this._lastEventId = eventId;\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().captureEvent(event, { ...hint, event_id: eventId });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated This will be removed in v8.\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.addBreadcrumb()` instead.\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    // eslint-disable-next-line deprecation/deprecation\n    const { scope, client } = this.getStackTop();\n\n    if (!client) return;\n\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (client.getOptions && client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) return;\n\n    const timestamp = dateTimestampInSeconds();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) return;\n\n    if (client.emit) {\n      client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n    }\n\n    // TODO(v8): I know this comment doesn't make much sense because the hub will be deprecated but I still wanted to\n    // write it down. In theory, we would have to add the breadcrumbs to the isolation scope here, however, that would\n    // duplicate all of the breadcrumbs. There was the possibility of adding breadcrumbs to both, the isolation scope\n    // and the normal scope, and deduplicating it down the line in the event processing pipeline. However, that would\n    // have been very fragile, because the breadcrumb objects would have needed to keep their identity all throughout\n    // the event processing pipeline.\n    // In the new implementation, the top level `Sentry.addBreadcrumb()` should ONLY write to the isolation scope.\n\n    scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setUser()` instead.\n   */\n  public setUser(user: User | null): void {\n    // TODO(v8): The top level `Sentry.setUser()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setUser(user);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setTags()` instead.\n   */\n  public setTags(tags: { [key: string]: Primitive }): void {\n    // TODO(v8): The top level `Sentry.setTags()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setTags(tags);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setExtras()` instead.\n   */\n  public setExtras(extras: Extras): void {\n    // TODO(v8): The top level `Sentry.setExtras()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setExtras(extras);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setTag()` instead.\n   */\n  public setTag(key: string, value: Primitive): void {\n    // TODO(v8): The top level `Sentry.setTag()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setTag(key, value);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setExtra()` instead.\n   */\n  public setExtra(key: string, extra: Extra): void {\n    // TODO(v8): The top level `Sentry.setExtra()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setExtra(key, extra);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setContext()` instead.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    // TODO(v8): The top level `Sentry.setContext()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setContext(name, context);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `getScope()` directly.\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    // eslint-disable-next-line deprecation/deprecation\n    const { scope, client } = this.getStackTop();\n    if (client) {\n      callback(scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public run(callback: (hub: Hub) => void): void {\n    // eslint-disable-next-line deprecation/deprecation\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      // eslint-disable-next-line deprecation/deprecation\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.getClient().getIntegrationByName()` instead.\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    // eslint-disable-next-line deprecation/deprecation\n    const client = this.getClient();\n    if (!client) return null;\n    try {\n      // eslint-disable-next-line deprecation/deprecation\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      DEBUG_BUILD && logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n   *\n   * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n   * new child span within the transaction or any span, call the respective `.startChild()` method.\n   *\n   * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n   *\n   * The transaction must be finished with a call to its `.end()` method, at which point the transaction with all its\n   * finished child spans will be sent to Sentry.\n   *\n   * @param context Properties of the new `Transaction`.\n   * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n   * default values). See {@link Options.tracesSampler}.\n   *\n   * @returns The transaction which was just started\n   *\n   * @deprecated Use `startSpan()`, `startSpanManual()` or `startInactiveSpan()` instead.\n   */\n  public startTransaction(context: TransactionContext, customSamplingContext?: CustomSamplingContext): Transaction {\n    const result = this._callExtensionMethod<Transaction>('startTransaction', context, customSamplingContext);\n\n    if (DEBUG_BUILD && !result) {\n      // eslint-disable-next-line deprecation/deprecation\n      const client = this.getClient();\n      if (!client) {\n        logger.warn(\n          \"Tracing extension 'startTransaction' is missing. You should 'init' the SDK before calling 'startTransaction'\",\n        );\n      } else {\n        logger.warn(`Tracing extension 'startTransaction' has not been added. Call 'addTracingExtensions' before calling 'init':\nSentry.addTracingExtensions();\nSentry.init({...});\n`);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `spanToTraceHeader()` instead.\n   */\n  public traceHeaders(): { [key: string]: string } {\n    return this._callExtensionMethod<{ [key: string]: string }>('traceHeaders');\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use top level `captureSession` instead.\n   */\n  public captureSession(endSession: boolean = false): void {\n    // both send the update and pull the session from the scope\n    if (endSession) {\n      // eslint-disable-next-line deprecation/deprecation\n      return this.endSession();\n    }\n\n    // only send the update\n    this._sendSessionUpdate();\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use top level `endSession` instead.\n   */\n  public endSession(): void {\n    // eslint-disable-next-line deprecation/deprecation\n    const layer = this.getStackTop();\n    const scope = layer.scope;\n    const session = scope.getSession();\n    if (session) {\n      closeSession(session);\n    }\n    this._sendSessionUpdate();\n\n    // the session is over; take it off of the scope\n    scope.setSession();\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use top level `startSession` instead.\n   */\n  public startSession(context?: SessionContext): Session {\n    // eslint-disable-next-line deprecation/deprecation\n    const { scope, client } = this.getStackTop();\n    const { release, environment = DEFAULT_ENVIRONMENT } = (client && client.getOptions()) || {};\n\n    // Will fetch userAgent if called from browser sdk\n    const { userAgent } = GLOBAL_OBJ.navigator || {};\n\n    const session = makeSession({\n      release,\n      environment,\n      user: scope.getUser(),\n      ...(userAgent && { userAgent }),\n      ...context,\n    });\n\n    // End existing session if there's one\n    const currentSession = scope.getSession && scope.getSession();\n    if (currentSession && currentSession.status === 'ok') {\n      updateSession(currentSession, { status: 'exited' });\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    this.endSession();\n\n    // Afterwards we set the new session on the scope\n    scope.setSession(session);\n\n    return session;\n  }\n\n  /**\n   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n   * when Tracing is used.\n   *\n   * @deprecated Use top-level `getClient().getOptions().sendDefaultPii` instead. This function\n   * only unnecessarily increased API surface but only wrapped accessing the option.\n   */\n  public shouldSendDefaultPii(): boolean {\n    // eslint-disable-next-line deprecation/deprecation\n    const client = this.getClient();\n    const options = client && client.getOptions();\n    return Boolean(options && options.sendDefaultPii);\n  }\n\n  /**\n   * Sends the current Session on the scope\n   */\n  private _sendSessionUpdate(): void {\n    // eslint-disable-next-line deprecation/deprecation\n    const { scope, client } = this.getStackTop();\n\n    const session = scope.getSession();\n    if (session && client && client.captureSession) {\n      client.captureSession(session);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-expect-error Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _callExtensionMethod<T>(method: string, ...args: any[]): T {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    DEBUG_BUILD && logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nexport function getMainCarrier(): Carrier {\n  GLOBAL_OBJ.__SENTRY__ = GLOBAL_OBJ.__SENTRY__ || {\n    extensions: {},\n    hub: undefined,\n  };\n  return GLOBAL_OBJ;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n *\n * @deprecated Use `setCurrentClient()` instead.\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n *\n * @deprecated Use the respective replacement method directly instead.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    const hub = registry.__SENTRY__.acs.getCurrentHub();\n\n    if (hub) {\n      return hub;\n    }\n  }\n\n  // Return hub that lives on a global object\n  return getGlobalHub(registry);\n}\n\n/**\n * Get the currently active isolation scope.\n * The isolation scope is active for the current exection context,\n * meaning that it will remain stable for the same Hub.\n */\nexport function getIsolationScope(): Scope {\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentHub().getIsolationScope();\n}\n\nfunction getGlobalHub(registry: Carrier = getMainCarrier()): Hub {\n  // If there's no hub, or its an old API, assign a new one\n\n  if (\n    !hasHubOnCarrier(registry) ||\n    // eslint-disable-next-line deprecation/deprecation\n    getHubFromCarrier(registry).isOlderThan(API_VERSION)\n  ) {\n    // eslint-disable-next-line deprecation/deprecation\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * If the carrier does not contain a hub, a new hub is created with the global hub client and scope.\n */\nexport function ensureHubOnCarrier(carrier: Carrier, parent: Hub = getGlobalHub()): void {\n  // If there's no hub on current domain, or it's an old API, assign a new one\n  if (\n    !hasHubOnCarrier(carrier) ||\n    // eslint-disable-next-line deprecation/deprecation\n    getHubFromCarrier(carrier).isOlderThan(API_VERSION)\n  ) {\n    // eslint-disable-next-line deprecation/deprecation\n    const client = parent.getClient();\n    // eslint-disable-next-line deprecation/deprecation\n    const scope = parent.getScope();\n    // eslint-disable-next-line deprecation/deprecation\n    const isolationScope = parent.getIsolationScope();\n    // eslint-disable-next-line deprecation/deprecation\n    setHubOnCarrier(carrier, new Hub(client, scope.clone(), isolationScope.clone()));\n  }\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */\nexport function setAsyncContextStrategy(strategy: AsyncContextStrategy | undefined): void {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n  registry.__SENTRY__ = registry.__SENTRY__ || {};\n  registry.__SENTRY__.acs = strategy;\n}\n\n/**\n * Runs the supplied callback in its own async context. Async Context strategies are defined per SDK.\n *\n * @param callback The callback to run in its own async context\n * @param options Options to pass to the async context strategy\n * @returns The result of the callback\n */\nexport function runWithAsyncContext<T>(callback: () => T, options: RunWithAsyncContextOptions = {}): T {\n  const registry = getMainCarrier();\n\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    return registry.__SENTRY__.acs.runWithAsyncContext(callback, options);\n  }\n\n  // if there was no strategy, fallback to just calling the callback\n  return callback();\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  // eslint-disable-next-line deprecation/deprecation\n  return getGlobalSingleton<Hub>('hub', () => new Hub(), carrier);\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) return false;\n  const __SENTRY__ = (carrier.__SENTRY__ = carrier.__SENTRY__ || {});\n  __SENTRY__.hub = hub;\n  return true;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}