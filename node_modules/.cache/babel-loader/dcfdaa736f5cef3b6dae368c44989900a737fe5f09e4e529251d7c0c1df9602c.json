{"ast":null,"code":"import { COUNTER_METRIC_TYPE, GAUGE_METRIC_TYPE, DISTRIBUTION_METRIC_TYPE, SET_METRIC_TYPE } from './constants.js';\nimport { simpleHash } from './utils.js';\n\n/**\n * A metric instance representing a counter.\n */\nclass CounterMetric {\n  constructor(_value) {\n    this._value = _value;\n  }\n\n  /** @inheritDoc */\n  get weight() {\n    return 1;\n  }\n\n  /** @inheritdoc */\n  add(value) {\n    this._value += value;\n  }\n\n  /** @inheritdoc */\n  toString() {\n    return `${this._value}`;\n  }\n}\n\n/**\n * A metric instance representing a gauge.\n */\nclass GaugeMetric {\n  constructor(value) {\n    this._last = value;\n    this._min = value;\n    this._max = value;\n    this._sum = value;\n    this._count = 1;\n  }\n\n  /** @inheritDoc */\n  get weight() {\n    return 5;\n  }\n\n  /** @inheritdoc */\n  add(value) {\n    this._last = value;\n    if (value < this._min) {\n      this._min = value;\n    }\n    if (value > this._max) {\n      this._max = value;\n    }\n    this._sum += value;\n    this._count++;\n  }\n\n  /** @inheritdoc */\n  toString() {\n    return `${this._last}:${this._min}:${this._max}:${this._sum}:${this._count}`;\n  }\n}\n\n/**\n * A metric instance representing a distribution.\n */\nclass DistributionMetric {\n  constructor(first) {\n    this._value = [first];\n  }\n\n  /** @inheritDoc */\n  get weight() {\n    return this._value.length;\n  }\n\n  /** @inheritdoc */\n  add(value) {\n    this._value.push(value);\n  }\n\n  /** @inheritdoc */\n  toString() {\n    return this._value.join(':');\n  }\n}\n\n/**\n * A metric instance representing a set.\n */\nclass SetMetric {\n  constructor(first) {\n    this.first = first;\n    this._value = new Set([first]);\n  }\n\n  /** @inheritDoc */\n  get weight() {\n    return this._value.size;\n  }\n\n  /** @inheritdoc */\n  add(value) {\n    this._value.add(value);\n  }\n\n  /** @inheritdoc */\n  toString() {\n    return Array.from(this._value).map(val => typeof val === 'string' ? simpleHash(val) : val).join(':');\n  }\n}\nconst METRIC_MAP = {\n  [COUNTER_METRIC_TYPE]: CounterMetric,\n  [GAUGE_METRIC_TYPE]: GaugeMetric,\n  [DISTRIBUTION_METRIC_TYPE]: DistributionMetric,\n  [SET_METRIC_TYPE]: SetMetric\n};\nexport { CounterMetric, DistributionMetric, GaugeMetric, METRIC_MAP, SetMetric };","map":{"version":3,"names":["CounterMetric","constructor","_value","weight","add","value","toString","GaugeMetric","_last","_min","_max","_sum","_count","DistributionMetric","first","length","push","join","SetMetric","Set","size","Array","from","map","val","simpleHash","METRIC_MAP","COUNTER_METRIC_TYPE","GAUGE_METRIC_TYPE","DISTRIBUTION_METRIC_TYPE","SET_METRIC_TYPE"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/metrics/instance.ts"],"sourcesContent":["import type { MetricInstance } from '@sentry/types';\nimport { COUNTER_METRIC_TYPE, DISTRIBUTION_METRIC_TYPE, GAUGE_METRIC_TYPE, SET_METRIC_TYPE } from './constants';\nimport { simpleHash } from './utils';\n\n/**\n * A metric instance representing a counter.\n */\nexport class CounterMetric implements MetricInstance {\n  public constructor(private _value: number) {}\n\n  /** @inheritDoc */\n  public get weight(): number {\n    return 1;\n  }\n\n  /** @inheritdoc */\n  public add(value: number): void {\n    this._value += value;\n  }\n\n  /** @inheritdoc */\n  public toString(): string {\n    return `${this._value}`;\n  }\n}\n\n/**\n * A metric instance representing a gauge.\n */\nexport class GaugeMetric implements MetricInstance {\n  private _last: number;\n  private _min: number;\n  private _max: number;\n  private _sum: number;\n  private _count: number;\n\n  public constructor(value: number) {\n    this._last = value;\n    this._min = value;\n    this._max = value;\n    this._sum = value;\n    this._count = 1;\n  }\n\n  /** @inheritDoc */\n  public get weight(): number {\n    return 5;\n  }\n\n  /** @inheritdoc */\n  public add(value: number): void {\n    this._last = value;\n    if (value < this._min) {\n      this._min = value;\n    }\n    if (value > this._max) {\n      this._max = value;\n    }\n    this._sum += value;\n    this._count++;\n  }\n\n  /** @inheritdoc */\n  public toString(): string {\n    return `${this._last}:${this._min}:${this._max}:${this._sum}:${this._count}`;\n  }\n}\n\n/**\n * A metric instance representing a distribution.\n */\nexport class DistributionMetric implements MetricInstance {\n  private _value: number[];\n\n  public constructor(first: number) {\n    this._value = [first];\n  }\n\n  /** @inheritDoc */\n  public get weight(): number {\n    return this._value.length;\n  }\n\n  /** @inheritdoc */\n  public add(value: number): void {\n    this._value.push(value);\n  }\n\n  /** @inheritdoc */\n  public toString(): string {\n    return this._value.join(':');\n  }\n}\n\n/**\n * A metric instance representing a set.\n */\nexport class SetMetric implements MetricInstance {\n  private _value: Set<number | string>;\n\n  public constructor(public first: number | string) {\n    this._value = new Set([first]);\n  }\n\n  /** @inheritDoc */\n  public get weight(): number {\n    return this._value.size;\n  }\n\n  /** @inheritdoc */\n  public add(value: number | string): void {\n    this._value.add(value);\n  }\n\n  /** @inheritdoc */\n  public toString(): string {\n    return Array.from(this._value)\n      .map(val => (typeof val === 'string' ? simpleHash(val) : val))\n      .join(':');\n  }\n}\n\nexport const METRIC_MAP = {\n  [COUNTER_METRIC_TYPE]: CounterMetric,\n  [GAUGE_METRIC_TYPE]: GaugeMetric,\n  [DISTRIBUTION_METRIC_TYPE]: DistributionMetric,\n  [SET_METRIC_TYPE]: SetMetric,\n};\n"],"mappings":";;;AAIA;AACA;AACA;AACO,MAAMA,aAAA,CAAwC;EAC5CC,WAAWA,CAASC,MAAM,EAAU;IAAC,KAAAA,MAAA,GAAAA,MAAA;EAAA;;EAE9C;EACS,IAAIC,MAAMA,CAAA,EAAW;IAC1B,OAAO,CAAC;EACZ;;EAEA;EACSC,GAAGA,CAACC,KAAK,EAAgB;IAC9B,IAAI,CAACH,MAAO,IAAGG,KAAK;EACxB;;EAEA;EACSC,QAAQA,CAAA,EAAW;IACxB,OAAQ,QAAAJ,MAAA;EACA;AACA;;AAEA;AACA;AACA;AACA,MAAAK,WAAA;EAOAN,YAAAI,KAAA;IACA,KAAAG,KAAA,GAAAH,KAAA;IACA,KAAAI,IAAA,GAAAJ,KAAA;IACA,KAAAK,IAAA,GAAAL,KAAA;IACA,KAAAM,IAAA,GAAAN,KAAA;IACA,KAAAO,MAAA;EACA;;EAEA;EACA,IAAAT,OAAA;IACA;EACA;;EAEA;EACAC,IAAAC,KAAA;IACA,KAAAG,KAAA,GAAAH,KAAA;IACA,IAAAA,KAAA,QAAAI,IAAA;MACA,KAAAA,IAAA,GAAAJ,KAAA;IACA;IACA,IAAAA,KAAA,QAAAK,IAAA;MACA,KAAAA,IAAA,GAAAL,KAAA;IACA;IACA,KAAAM,IAAA,IAAAN,KAAA;IACA,KAAAO,MAAA;EACA;;EAEA;EACAN,SAAA;IACA,eAAAE,KAAA,SAAAC,IAAA,SAAAC,IAAA,SAAAC,IAAA,SAAAC,MAAA;EACA;AACA;;AAEA;AACA;AACA;AACA,MAAAC,kBAAA;EAGAZ,YAAAa,KAAA;IACA,KAAAZ,MAAA,IAAAY,KAAA;EACA;;EAEA;EACA,IAAAX,OAAA;IACA,YAAAD,MAAA,CAAAa,MAAA;EACA;;EAEA;EACAX,IAAAC,KAAA;IACA,KAAAH,MAAA,CAAAc,IAAA,CAAAX,KAAA;EACA;;EAEA;EACAC,SAAA;IACA,YAAAJ,MAAA,CAAAe,IAAA;EACA;AACA;;AAEA;AACA;AACA;AACA,MAAAC,SAAA;EAGAjB,YAAAa,KAAA;IAAA,KAAAA,KAAA,GAAAA,KAAA;IACA,KAAAZ,MAAA,OAAAiB,GAAA,EAAAL,KAAA;EACA;;EAEA;EACA,IAAAX,OAAA;IACA,YAAAD,MAAA,CAAAkB,IAAA;EACA;;EAEA;EACAhB,IAAAC,KAAA;IACA,KAAAH,MAAA,CAAAE,GAAA,CAAAC,KAAA;EACA;;EAEA;EACAC,SAAA;IACA,OAAAe,KAAA,CAAAC,IAAA,MAAApB,MAAA,EACAqB,GAAA,CAAAC,GAAA,WAAAA,GAAA,gBAAAC,UAAA,CAAAD,GAAA,IAAAA,GAAA,EACAP,IAAA;EACA;AACA;AAEA,MAAAS,UAAA;EACA,CAAAC,mBAAA,GAAA3B,aAAA;EACA,CAAA4B,iBAAA,GAAArB,WAAA;EACA,CAAAsB,wBAAA,GAAAhB,kBAAA;EACA,CAAAiB,eAAA,GAAAZ;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}