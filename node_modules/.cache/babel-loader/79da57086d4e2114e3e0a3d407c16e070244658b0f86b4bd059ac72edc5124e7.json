{"ast":null,"code":"var _jsxFileName = \"/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/src/errorHandler/api_error/HandleApiRespondError.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useErrorBoundary } from \"react-error-boundary\";\nimport { object, number, boolean, string, date } from \"yup\";\nimport * as Yup from \"yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HandleApiRespondError = () => {\n  _s();\n  const {\n    showBoundary\n  } = useErrorBoundary();\n  useEffect(() => {\n    // sentry\n    // setTimeout(() => {\n    //   // const error = new CustomError(\"formValidation\", \"crash Example1 page\");\n    //   // showBoundary(error);\n    //   throw new Error(\"crash Example1 page>>>>>\");\n    // }, 2);\n    // checkValid();\n    // apiRequest();\n    // validateAPIreturn();\n  }, []);\n  const checkValid = async () => {\n    const schema = object({\n      isBig: boolean(),\n      count: number().when(\"isBig\", (isBig, schema) => {\n        return isBig ? schema.min(5) : schema.min(0);\n      })\n    });\n\n    // Validate data against the schema\n    schema.validate({\n      isBig: false,\n      count: \"6\"\n    }).then(ab => {\n      console.log(\"ðŸš€ ~ useEffect ~ ab:\", ab);\n    }).catch(error => {\n      console.error(\"Validation failed:\", error);\n    });\n\n    // Define user schema\n    const userSchema = object({\n      name: string().required(),\n      age: number().required().positive().integer(),\n      email: string().email(),\n      website: string().url().nullable(),\n      createdOn: date().default(() => new Date())\n    });\n\n    // Simulate fetching user data and validate against user schema\n    const fetchUser = async () => {\n      // Simulated user data\n      return {\n        name: \"John Doe\",\n        age: 30,\n        email: \"john.doe@example.com\",\n        website: \"https://example.com\",\n        createdOn: new Date()\n      };\n    };\n\n    // Parse and validate user data\n    fetchUser().then(user => userSchema.validate(user)).then(validUser => {\n      console.log(\"ðŸš€ ~ checkValid ~ user:\", validUser);\n    }).catch(error => {\n      console.error(\"User data validation failed:\", error);\n    });\n    // const getError = () => {\n    //   setTimeout(() => {\n    //     throw new Error(\"crash Example1 page>>>>>\");\n    //   }, 2);\n    // };\n  };\n  const apiRequest = async () => {\n    fetch(\"https://api.example.com/data\").then(response => {\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      return response.json();\n    }).then(data => {\n      // Handle successful API response\n      console.log(data);\n    }).catch(error => {\n      // Handle API errors\n      console.error(\"Error:\", error.message);\n      showBoundary(error);\n      // Display error message to the user\n      // alert(\"An error occurred while fetching data from the API.\");\n    });\n  };\n  const apiResponseSchema = Yup.object({\n    id: Yup.number().required(),\n    name: Yup.string().required(),\n    email: Yup.string().email().required()\n  });\n  const apiResponse = {\n    id: \"\",\n    name: \"John Doe\",\n    email: \"john@example.com\"\n  };\n  const validateAPIreturn = () => {\n    apiResponseSchema.validate(apiResponse).then(validatedResponse => {\n      // If validation succeeds, handle the validated response\n      console.log(\"Validated Response:\", validatedResponse);\n    }).catch(validationError => {\n      // If validation fails, handle the validation error\n      console.error(\"Validation Error:\", validationError.message);\n      showBoundary(validationError);\n      // Handle error display or other error handling logic\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"API error\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 10\n  }, this);\n};\n_s(HandleApiRespondError, \"+YmYfdi4szaNA/4D64T5c7wjjyo=\", false, function () {\n  return [useErrorBoundary];\n});\n_c = HandleApiRespondError;\nexport default HandleApiRespondError;\nvar _c;\n$RefreshReg$(_c, \"HandleApiRespondError\");","map":{"version":3,"names":["useEffect","useErrorBoundary","object","number","boolean","string","date","Yup","jsxDEV","_jsxDEV","HandleApiRespondError","_s","showBoundary","checkValid","schema","isBig","count","when","min","validate","then","ab","console","log","catch","error","userSchema","name","required","age","positive","integer","email","website","url","nullable","createdOn","default","Date","fetchUser","user","validUser","apiRequest","fetch","response","ok","Error","json","data","message","apiResponseSchema","id","apiResponse","validateAPIreturn","validatedResponse","validationError","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/src/errorHandler/api_error/HandleApiRespondError.tsx"],"sourcesContent":["import { useEffect } from \"react\";\n\nimport { useErrorBoundary } from \"react-error-boundary\";\nimport { object, number, boolean, string, date } from \"yup\";\nimport * as Yup from \"yup\";\n\nconst HandleApiRespondError = (): JSX.Element => {\n  const { showBoundary } = useErrorBoundary();\n\n  useEffect(() => {\n    // sentry\n    // setTimeout(() => {\n    //   // const error = new CustomError(\"formValidation\", \"crash Example1 page\");\n    //   // showBoundary(error);\n    //   throw new Error(\"crash Example1 page>>>>>\");\n    // }, 2);\n    // checkValid();\n    // apiRequest();\n    // validateAPIreturn();\n  }, []);\n\n  const checkValid = async () => {\n    const schema = object({\n      isBig: boolean(),\n      count: number().when(\"isBig\", (isBig, schema) => {\n        return isBig ? schema.min(5) : schema.min(0);\n      }),\n    });\n\n    // Validate data against the schema\n    schema\n      .validate({ isBig: false, count: \"6\" })\n      .then((ab) => {\n        console.log(\"ðŸš€ ~ useEffect ~ ab:\", ab);\n      })\n      .catch((error) => {\n        console.error(\"Validation failed:\", error);\n      });\n\n    // Define user schema\n    const userSchema = object({\n      name: string().required(),\n      age: number().required().positive().integer(),\n      email: string().email(),\n      website: string().url().nullable(),\n      createdOn: date().default(() => new Date()),\n    });\n\n    // Simulate fetching user data and validate against user schema\n    const fetchUser = async () => {\n      // Simulated user data\n      return {\n        name: \"John Doe\",\n        age: 30,\n        email: \"john.doe@example.com\",\n        website: \"https://example.com\",\n        createdOn: new Date(),\n      };\n    };\n\n    // Parse and validate user data\n    fetchUser()\n      .then((user) => userSchema.validate(user))\n      .then((validUser) => {\n        console.log(\"ðŸš€ ~ checkValid ~ user:\", validUser);\n      })\n      .catch((error) => {\n        console.error(\"User data validation failed:\", error);\n      });\n    // const getError = () => {\n    //   setTimeout(() => {\n    //     throw new Error(\"crash Example1 page>>>>>\");\n    //   }, 2);\n    // };\n  };\n\n  const apiRequest = async () => {\n    fetch(\"https://api.example.com/data\")\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        return response.json();\n      })\n      .then((data) => {\n        // Handle successful API response\n        console.log(data);\n      })\n      .catch((error: any) => {\n        // Handle API errors\n        console.error(\"Error:\", error.message);\n        showBoundary(error);\n        // Display error message to the user\n        // alert(\"An error occurred while fetching data from the API.\");\n      });\n  };\n\n  const apiResponseSchema = Yup.object({\n    id: Yup.number().required(),\n    name: Yup.string().required(),\n    email: Yup.string().email().required(),\n  });\n\n  const apiResponse = {\n    id: \"\",\n    name: \"John Doe\",\n    email: \"john@example.com\",\n  };\n\n  const validateAPIreturn = () => {\n    apiResponseSchema\n      .validate(apiResponse)\n      .then((validatedResponse) => {\n        // If validation succeeds, handle the validated response\n        console.log(\"Validated Response:\", validatedResponse);\n      })\n      .catch((validationError) => {\n        // If validation fails, handle the validation error\n        console.error(\"Validation Error:\", validationError.message);\n        showBoundary(validationError);\n        // Handle error display or other error handling logic\n      });\n  };\n\n  return <div>API error</div>;\n};\n\nexport default HandleApiRespondError;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}