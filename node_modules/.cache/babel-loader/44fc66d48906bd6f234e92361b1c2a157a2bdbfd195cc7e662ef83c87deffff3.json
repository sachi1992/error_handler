{"ast":null,"code":"import { uuid4, timestampInSeconds, logger, dropUndefinedKeys } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { getMetricSummaryJsonForSpan } from '../metrics/metric-summary.js';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_PROFILE_ID } from '../semanticAttributes.js';\nimport { getRootSpan } from '../utils/getRootSpan.js';\nimport { TRACE_FLAG_SAMPLED, TRACE_FLAG_NONE, spanToJSON, spanTimeInputToSeconds, spanToTraceHeader, spanToTraceContext } from '../utils/spanUtils.js';\nimport { setHttpStatus } from './spanstatus.js';\n\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\nclass SpanRecorder {\n  constructor(maxlen = 1000) {\n    this._maxlen = maxlen;\n    this.spans = [];\n  }\n\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n  add(span) {\n    if (this.spans.length > this._maxlen) {\n      // eslint-disable-next-line deprecation/deprecation\n      span.spanRecorder = undefined;\n    } else {\n      this.spans.push(span);\n    }\n  }\n}\n\n/**\n * Span contains all data about a span\n */\nclass Span {\n  /**\n   * Tags for the span.\n   * @deprecated Use `spanToJSON(span).atttributes` instead.\n   */\n\n  /**\n   * Data for the span.\n   * @deprecated Use `spanToJSON(span).atttributes` instead.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  /**\n   * List of spans that were finalized\n   *\n   * @deprecated This property will no longer be public. Span recording will be handled internally.\n   */\n\n  /**\n   * @inheritDoc\n   * @deprecated Use top level `Sentry.getRootSpan()` instead\n   */\n\n  /**\n   * The instrumenter that created this span.\n   *\n   * TODO (v8): This can probably be replaced by an `instanceOf` check of the span class.\n   *            the instrumenter can only be sentry or otel so we can check the span instance\n   *            to verify which one it is and remove this field entirely.\n   *\n   * @deprecated This field will be removed.\n   */\n\n  /** Epoch timestamp in seconds when the span started. */\n\n  /** Epoch timestamp in seconds when the span ended. */\n\n  /** Internal keeper of the status */\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  constructor(spanContext = {}) {\n    this._traceId = spanContext.traceId || uuid4();\n    this._spanId = spanContext.spanId || uuid4().substring(16);\n    this._startTime = spanContext.startTimestamp || timestampInSeconds();\n    // eslint-disable-next-line deprecation/deprecation\n    this.tags = spanContext.tags ? {\n      ...spanContext.tags\n    } : {};\n    // eslint-disable-next-line deprecation/deprecation\n    this.data = spanContext.data ? {\n      ...spanContext.data\n    } : {};\n    // eslint-disable-next-line deprecation/deprecation\n    this.instrumenter = spanContext.instrumenter || 'sentry';\n    this._attributes = {};\n    this.setAttributes({\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanContext.origin || 'manual',\n      [SEMANTIC_ATTRIBUTE_SENTRY_OP]: spanContext.op,\n      ...spanContext.attributes\n    });\n\n    // eslint-disable-next-line deprecation/deprecation\n    this._name = spanContext.name || spanContext.description;\n    if (spanContext.parentSpanId) {\n      this._parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this._sampled = spanContext.sampled;\n    }\n    if (spanContext.status) {\n      this._status = spanContext.status;\n    }\n    if (spanContext.endTimestamp) {\n      this._endTime = spanContext.endTimestamp;\n    }\n    if (spanContext.exclusiveTime) {\n      this._exclusiveTime = spanContext.exclusiveTime;\n    }\n    this._measurements = spanContext.measurements ? {\n      ...spanContext.measurements\n    } : {};\n  }\n\n  // This rule conflicts with another eslint rule :(\n  /* eslint-disable @typescript-eslint/member-ordering */\n\n  /**\n   * An alias for `description` of the Span.\n   * @deprecated Use `spanToJSON(span).description` instead.\n   */\n  get name() {\n    return this._name || '';\n  }\n\n  /**\n   * Update the name of the span.\n   * @deprecated Use `spanToJSON(span).description` instead.\n   */\n  set name(name) {\n    this.updateName(name);\n  }\n\n  /**\n   * Get the description of the Span.\n   * @deprecated Use `spanToJSON(span).description` instead.\n   */\n  get description() {\n    return this._name;\n  }\n\n  /**\n   * Get the description of the Span.\n   * @deprecated Use `spanToJSON(span).description` instead.\n   */\n  set description(description) {\n    this._name = description;\n  }\n\n  /**\n   * The ID of the trace.\n   * @deprecated Use `spanContext().traceId` instead.\n   */\n  get traceId() {\n    return this._traceId;\n  }\n\n  /**\n   * The ID of the trace.\n   * @deprecated You cannot update the traceId of a span after span creation.\n   */\n  set traceId(traceId) {\n    this._traceId = traceId;\n  }\n\n  /**\n   * The ID of the span.\n   * @deprecated Use `spanContext().spanId` instead.\n   */\n  get spanId() {\n    return this._spanId;\n  }\n\n  /**\n   * The ID of the span.\n   * @deprecated You cannot update the spanId of a span after span creation.\n   */\n  set spanId(spanId) {\n    this._spanId = spanId;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `startSpan` functions instead.\n   */\n  set parentSpanId(string) {\n    this._parentSpanId = string;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `spanToJSON(span).parent_span_id` instead.\n   */\n  get parentSpanId() {\n    return this._parentSpanId;\n  }\n\n  /**\n   * Was this span chosen to be sent as part of the sample?\n   * @deprecated Use `isRecording()` instead.\n   */\n  get sampled() {\n    return this._sampled;\n  }\n\n  /**\n   * Was this span chosen to be sent as part of the sample?\n   * @deprecated You cannot update the sampling decision of a span after span creation.\n   */\n  set sampled(sampled) {\n    this._sampled = sampled;\n  }\n\n  /**\n   * Attributes for the span.\n   * @deprecated Use `spanToJSON(span).atttributes` instead.\n   */\n  get attributes() {\n    return this._attributes;\n  }\n\n  /**\n   * Attributes for the span.\n   * @deprecated Use `setAttributes()` instead.\n   */\n  set attributes(attributes) {\n    this._attributes = attributes;\n  }\n\n  /**\n   * Timestamp in seconds (epoch time) indicating when the span started.\n   * @deprecated Use `spanToJSON()` instead.\n   */\n  get startTimestamp() {\n    return this._startTime;\n  }\n\n  /**\n   * Timestamp in seconds (epoch time) indicating when the span started.\n   * @deprecated In v8, you will not be able to update the span start time after creation.\n   */\n  set startTimestamp(startTime) {\n    this._startTime = startTime;\n  }\n\n  /**\n   * Timestamp in seconds when the span ended.\n   * @deprecated Use `spanToJSON()` instead.\n   */\n  get endTimestamp() {\n    return this._endTime;\n  }\n\n  /**\n   * Timestamp in seconds when the span ended.\n   * @deprecated Set the end time via `span.end()` instead.\n   */\n  set endTimestamp(endTime) {\n    this._endTime = endTime;\n  }\n\n  /**\n   * The status of the span.\n   *\n   * @deprecated Use `spanToJSON().status` instead to get the status.\n   */\n  get status() {\n    return this._status;\n  }\n\n  /**\n   * The status of the span.\n   *\n   * @deprecated Use `.setStatus()` instead to set or update the status.\n   */\n  set status(status) {\n    this._status = status;\n  }\n\n  /**\n   * Operation of the span\n   *\n   * @deprecated Use `spanToJSON().op` to read the op instead.\n   */\n  get op() {\n    return this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP];\n  }\n\n  /**\n   * Operation of the span\n   *\n   * @deprecated Use `startSpan()` functions to set or `span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'op')\n   *             to update the span instead.\n   */\n  set op(op) {\n    this.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, op);\n  }\n\n  /**\n   * The origin of the span, giving context about what created the span.\n   *\n   * @deprecated Use `spanToJSON().origin` to read the origin instead.\n   */\n  get origin() {\n    return this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN];\n  }\n\n  /**\n   * The origin of the span, giving context about what created the span.\n   *\n   * @deprecated Use `startSpan()` functions to set the origin instead.\n   */\n  set origin(origin) {\n    this.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, origin);\n  }\n\n  /* eslint-enable @typescript-eslint/member-ordering */\n\n  /** @inheritdoc */\n  spanContext() {\n    const {\n      _spanId: spanId,\n      _traceId: traceId,\n      _sampled: sampled\n    } = this;\n    return {\n      spanId,\n      traceId,\n      traceFlags: sampled ? TRACE_FLAG_SAMPLED : TRACE_FLAG_NONE\n    };\n  }\n\n  /**\n   * Creates a new `Span` while setting the current `Span.id` as `parentSpanId`.\n   * Also the `sampled` decision will be inherited.\n   *\n   * @deprecated Use `startSpan()`, `startSpanManual()` or `startInactiveSpan()` instead.\n   */\n  startChild(spanContext) {\n    const childSpan = new Span({\n      ...spanContext,\n      parentSpanId: this._spanId,\n      sampled: this._sampled,\n      traceId: this._traceId\n    });\n\n    // eslint-disable-next-line deprecation/deprecation\n    childSpan.spanRecorder = this.spanRecorder;\n    // eslint-disable-next-line deprecation/deprecation\n    if (childSpan.spanRecorder) {\n      // eslint-disable-next-line deprecation/deprecation\n      childSpan.spanRecorder.add(childSpan);\n    }\n    const rootSpan = getRootSpan(this);\n    // TODO: still set span.transaction here until we have a more permanent solution\n    // Probably similarly to the weakmap we hold in node-experimental\n    // eslint-disable-next-line deprecation/deprecation\n    childSpan.transaction = rootSpan;\n    if (DEBUG_BUILD && rootSpan) {\n      const opStr = spanContext && spanContext.op || '< unknown op >';\n      const nameStr = spanToJSON(childSpan).description || '< unknown name >';\n      const idStr = rootSpan.spanContext().spanId;\n      const logMessage = `[Tracing] Starting '${opStr}' span on transaction '${nameStr}' (${idStr}).`;\n      logger.log(logMessage);\n      this._logMessage = logMessage;\n    }\n    return childSpan;\n  }\n\n  /**\n   * Sets the tag attribute on the current span.\n   *\n   * Can also be used to unset a tag, by passing `undefined`.\n   *\n   * @param key Tag key\n   * @param value Tag value\n   * @deprecated Use `setAttribute()` instead.\n   */\n  setTag(key, value) {\n    // eslint-disable-next-line deprecation/deprecation\n    this.tags = {\n      ...this.tags,\n      [key]: value\n    };\n    return this;\n  }\n\n  /**\n   * Sets the data attribute on the current span\n   * @param key Data key\n   * @param value Data value\n   * @deprecated Use `setAttribute()` instead.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  setData(key, value) {\n    // eslint-disable-next-line deprecation/deprecation\n    this.data = {\n      ...this.data,\n      [key]: value\n    };\n    return this;\n  }\n\n  /** @inheritdoc */\n  setAttribute(key, value) {\n    if (value === undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._attributes[key];\n    } else {\n      this._attributes[key] = value;\n    }\n  }\n\n  /** @inheritdoc */\n  setAttributes(attributes) {\n    Object.keys(attributes).forEach(key => this.setAttribute(key, attributes[key]));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setStatus(value) {\n    this._status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use top-level `setHttpStatus()` instead.\n   */\n  setHttpStatus(httpStatus) {\n    setHttpStatus(this, httpStatus);\n    return this;\n  }\n\n  /**\n   * @inheritdoc\n   *\n   * @deprecated Use `.updateName()` instead.\n   */\n  setName(name) {\n    this.updateName(name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateName(name) {\n    this._name = name;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `spanToJSON(span).status === 'ok'` instead.\n   */\n  isSuccess() {\n    return this._status === 'ok';\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `.end()` instead.\n   */\n  finish(endTimestamp) {\n    return this.end(endTimestamp);\n  }\n\n  /** @inheritdoc */\n  end(endTimestamp) {\n    // If already ended, skip\n    if (this._endTime) {\n      return;\n    }\n    const rootSpan = getRootSpan(this);\n    if (DEBUG_BUILD &&\n    // Don't call this for transactions\n    rootSpan && rootSpan.spanContext().spanId !== this._spanId) {\n      const logMessage = this._logMessage;\n      if (logMessage) {\n        logger.log(logMessage.replace('Starting', 'Finishing'));\n      }\n    }\n    this._endTime = spanTimeInputToSeconds(endTimestamp);\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `spanToTraceHeader()` instead.\n   */\n  toTraceparent() {\n    return spanToTraceHeader(this);\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `spanToJSON()` or access the fields directly instead.\n   */\n  toContext() {\n    return dropUndefinedKeys({\n      data: this._getData(),\n      description: this._name,\n      endTimestamp: this._endTime,\n      // eslint-disable-next-line deprecation/deprecation\n      op: this.op,\n      parentSpanId: this._parentSpanId,\n      sampled: this._sampled,\n      spanId: this._spanId,\n      startTimestamp: this._startTime,\n      status: this._status,\n      // eslint-disable-next-line deprecation/deprecation\n      tags: this.tags,\n      traceId: this._traceId\n    });\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Update the fields directly instead.\n   */\n  updateWithContext(spanContext) {\n    // eslint-disable-next-line deprecation/deprecation\n    this.data = spanContext.data || {};\n    // eslint-disable-next-line deprecation/deprecation\n    this._name = spanContext.name || spanContext.description;\n    this._endTime = spanContext.endTimestamp;\n    // eslint-disable-next-line deprecation/deprecation\n    this.op = spanContext.op;\n    this._parentSpanId = spanContext.parentSpanId;\n    this._sampled = spanContext.sampled;\n    this._spanId = spanContext.spanId || this._spanId;\n    this._startTime = spanContext.startTimestamp || this._startTime;\n    this._status = spanContext.status;\n    // eslint-disable-next-line deprecation/deprecation\n    this.tags = spanContext.tags || {};\n    this._traceId = spanContext.traceId || this._traceId;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `spanToTraceContext()` util function instead.\n   */\n  getTraceContext() {\n    return spanToTraceContext(this);\n  }\n\n  /**\n   * Get JSON representation of this span.\n   *\n   * @hidden\n   * @internal This method is purely for internal purposes and should not be used outside\n   * of SDK code. If you need to get a JSON representation of a span,\n   * use `spanToJSON(span)` instead.\n   */\n  getSpanJSON() {\n    return dropUndefinedKeys({\n      data: this._getData(),\n      description: this._name,\n      op: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP],\n      parent_span_id: this._parentSpanId,\n      span_id: this._spanId,\n      start_timestamp: this._startTime,\n      status: this._status,\n      // eslint-disable-next-line deprecation/deprecation\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this._endTime,\n      trace_id: this._traceId,\n      origin: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN],\n      _metrics_summary: getMetricSummaryJsonForSpan(this),\n      profile_id: this._attributes[SEMANTIC_ATTRIBUTE_PROFILE_ID],\n      exclusive_time: this._exclusiveTime,\n      measurements: Object.keys(this._measurements).length > 0 ? this._measurements : undefined\n    });\n  }\n\n  /** @inheritdoc */\n  isRecording() {\n    return !this._endTime && !!this._sampled;\n  }\n\n  /**\n   * Convert the object to JSON.\n   * @deprecated Use `spanToJSON(span)` instead.\n   */\n  toJSON() {\n    return this.getSpanJSON();\n  }\n\n  /**\n   * Get the merged data for this span.\n   * For now, this combines `data` and `attributes` together,\n   * until eventually we can ingest `attributes` directly.\n   */\n  _getData() {\n    // eslint-disable-next-line deprecation/deprecation\n    const {\n      data,\n      _attributes: attributes\n    } = this;\n    const hasData = Object.keys(data).length > 0;\n    const hasAttributes = Object.keys(attributes).length > 0;\n    if (!hasData && !hasAttributes) {\n      return undefined;\n    }\n    if (hasData && hasAttributes) {\n      return {\n        ...data,\n        ...attributes\n      };\n    }\n    return hasData ? data : attributes;\n  }\n}\nexport { Span, SpanRecorder };","map":{"version":3,"names":["SpanRecorder","constructor","maxlen","_maxlen","spans","add","span","length","spanRecorder","undefined","push","Span","spanContext","_traceId","traceId","uuid4","_spanId","spanId","substring","_startTime","startTimestamp","timestampInSeconds","tags","data","instrumenter","_attributes","setAttributes","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","origin","SEMANTIC_ATTRIBUTE_SENTRY_OP","op","attributes","_name","name","description","parentSpanId","_parentSpanId","_sampled","sampled","status","_status","endTimestamp","_endTime","exclusiveTime","_exclusiveTime","_measurements","measurements","updateName","string","startTime","endTime","setAttribute","traceFlags","TRACE_FLAG_SAMPLED","TRACE_FLAG_NONE","startChild","childSpan","rootSpan","getRootSpan","transaction","DEBUG_BUILD","opStr","nameStr","spanToJSON","idStr","logMessage","logger","log","_logMessage","setTag","key","value","setData","Object","keys","forEach","setStatus","setHttpStatus","httpStatus","setName","isSuccess","finish","end","replace","spanTimeInputToSeconds","toTraceparent","spanToTraceHeader","toContext","dropUndefinedKeys","_getData","updateWithContext","getTraceContext","spanToTraceContext","getSpanJSON","parent_span_id","span_id","start_timestamp","timestamp","trace_id","_metrics_summary","getMetricSummaryJsonForSpan","profile_id","SEMANTIC_ATTRIBUTE_PROFILE_ID","exclusive_time","isRecording","toJSON","hasData","hasAttributes"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/tracing/span.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type {\n  Instrumenter,\n  Measurements,\n  Primitive,\n  Span as SpanInterface,\n  SpanAttributeValue,\n  SpanAttributes,\n  SpanContext,\n  SpanContextData,\n  SpanJSON,\n  SpanOrigin,\n  SpanTimeInput,\n  TraceContext,\n  Transaction,\n} from '@sentry/types';\nimport { dropUndefinedKeys, logger, timestampInSeconds, uuid4 } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { getMetricSummaryJsonForSpan } from '../metrics/metric-summary';\nimport {\n  SEMANTIC_ATTRIBUTE_PROFILE_ID,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n} from '../semanticAttributes';\nimport { getRootSpan } from '../utils/getRootSpan';\nimport {\n  TRACE_FLAG_NONE,\n  TRACE_FLAG_SAMPLED,\n  spanTimeInputToSeconds,\n  spanToJSON,\n  spanToTraceContext,\n  spanToTraceHeader,\n} from '../utils/spanUtils';\nimport type { SpanStatusType } from './spanstatus';\nimport { setHttpStatus } from './spanstatus';\n\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\nexport class SpanRecorder {\n  public spans: Span[];\n\n  private readonly _maxlen: number;\n\n  public constructor(maxlen: number = 1000) {\n    this._maxlen = maxlen;\n    this.spans = [];\n  }\n\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n  public add(span: Span): void {\n    if (this.spans.length > this._maxlen) {\n      // eslint-disable-next-line deprecation/deprecation\n      span.spanRecorder = undefined;\n    } else {\n      this.spans.push(span);\n    }\n  }\n}\n\n/**\n * Span contains all data about a span\n */\nexport class Span implements SpanInterface {\n  /**\n   * Tags for the span.\n   * @deprecated Use `spanToJSON(span).atttributes` instead.\n   */\n  public tags: { [key: string]: Primitive };\n\n  /**\n   * Data for the span.\n   * @deprecated Use `spanToJSON(span).atttributes` instead.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public data: { [key: string]: any };\n\n  /**\n   * List of spans that were finalized\n   *\n   * @deprecated This property will no longer be public. Span recording will be handled internally.\n   */\n  public spanRecorder?: SpanRecorder;\n\n  /**\n   * @inheritDoc\n   * @deprecated Use top level `Sentry.getRootSpan()` instead\n   */\n  public transaction?: Transaction;\n\n  /**\n   * The instrumenter that created this span.\n   *\n   * TODO (v8): This can probably be replaced by an `instanceOf` check of the span class.\n   *            the instrumenter can only be sentry or otel so we can check the span instance\n   *            to verify which one it is and remove this field entirely.\n   *\n   * @deprecated This field will be removed.\n   */\n  public instrumenter: Instrumenter;\n\n  protected _traceId: string;\n  protected _spanId: string;\n  protected _parentSpanId?: string | undefined;\n  protected _sampled: boolean | undefined;\n  protected _name?: string | undefined;\n  protected _attributes: SpanAttributes;\n  /** Epoch timestamp in seconds when the span started. */\n  protected _startTime: number;\n  /** Epoch timestamp in seconds when the span ended. */\n  protected _endTime?: number | undefined;\n  /** Internal keeper of the status */\n  protected _status?: SpanStatusType | string | undefined;\n  protected _exclusiveTime?: number;\n\n  protected _measurements: Measurements;\n\n  private _logMessage?: string;\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(spanContext: SpanContext = {}) {\n    this._traceId = spanContext.traceId || uuid4();\n    this._spanId = spanContext.spanId || uuid4().substring(16);\n    this._startTime = spanContext.startTimestamp || timestampInSeconds();\n    // eslint-disable-next-line deprecation/deprecation\n    this.tags = spanContext.tags ? { ...spanContext.tags } : {};\n    // eslint-disable-next-line deprecation/deprecation\n    this.data = spanContext.data ? { ...spanContext.data } : {};\n    // eslint-disable-next-line deprecation/deprecation\n    this.instrumenter = spanContext.instrumenter || 'sentry';\n\n    this._attributes = {};\n    this.setAttributes({\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanContext.origin || 'manual',\n      [SEMANTIC_ATTRIBUTE_SENTRY_OP]: spanContext.op,\n      ...spanContext.attributes,\n    });\n\n    // eslint-disable-next-line deprecation/deprecation\n    this._name = spanContext.name || spanContext.description;\n\n    if (spanContext.parentSpanId) {\n      this._parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this._sampled = spanContext.sampled;\n    }\n    if (spanContext.status) {\n      this._status = spanContext.status;\n    }\n    if (spanContext.endTimestamp) {\n      this._endTime = spanContext.endTimestamp;\n    }\n    if (spanContext.exclusiveTime) {\n      this._exclusiveTime = spanContext.exclusiveTime;\n    }\n    this._measurements = spanContext.measurements ? { ...spanContext.measurements } : {};\n  }\n\n  // This rule conflicts with another eslint rule :(\n  /* eslint-disable @typescript-eslint/member-ordering */\n\n  /**\n   * An alias for `description` of the Span.\n   * @deprecated Use `spanToJSON(span).description` instead.\n   */\n  public get name(): string {\n    return this._name || '';\n  }\n\n  /**\n   * Update the name of the span.\n   * @deprecated Use `spanToJSON(span).description` instead.\n   */\n  public set name(name: string) {\n    this.updateName(name);\n  }\n\n  /**\n   * Get the description of the Span.\n   * @deprecated Use `spanToJSON(span).description` instead.\n   */\n  public get description(): string | undefined {\n    return this._name;\n  }\n\n  /**\n   * Get the description of the Span.\n   * @deprecated Use `spanToJSON(span).description` instead.\n   */\n  public set description(description: string | undefined) {\n    this._name = description;\n  }\n\n  /**\n   * The ID of the trace.\n   * @deprecated Use `spanContext().traceId` instead.\n   */\n  public get traceId(): string {\n    return this._traceId;\n  }\n\n  /**\n   * The ID of the trace.\n   * @deprecated You cannot update the traceId of a span after span creation.\n   */\n  public set traceId(traceId: string) {\n    this._traceId = traceId;\n  }\n\n  /**\n   * The ID of the span.\n   * @deprecated Use `spanContext().spanId` instead.\n   */\n  public get spanId(): string {\n    return this._spanId;\n  }\n\n  /**\n   * The ID of the span.\n   * @deprecated You cannot update the spanId of a span after span creation.\n   */\n  public set spanId(spanId: string) {\n    this._spanId = spanId;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `startSpan` functions instead.\n   */\n  public set parentSpanId(string) {\n    this._parentSpanId = string;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `spanToJSON(span).parent_span_id` instead.\n   */\n  public get parentSpanId(): string | undefined {\n    return this._parentSpanId;\n  }\n\n  /**\n   * Was this span chosen to be sent as part of the sample?\n   * @deprecated Use `isRecording()` instead.\n   */\n  public get sampled(): boolean | undefined {\n    return this._sampled;\n  }\n\n  /**\n   * Was this span chosen to be sent as part of the sample?\n   * @deprecated You cannot update the sampling decision of a span after span creation.\n   */\n  public set sampled(sampled: boolean | undefined) {\n    this._sampled = sampled;\n  }\n\n  /**\n   * Attributes for the span.\n   * @deprecated Use `spanToJSON(span).atttributes` instead.\n   */\n  public get attributes(): SpanAttributes {\n    return this._attributes;\n  }\n\n  /**\n   * Attributes for the span.\n   * @deprecated Use `setAttributes()` instead.\n   */\n  public set attributes(attributes: SpanAttributes) {\n    this._attributes = attributes;\n  }\n\n  /**\n   * Timestamp in seconds (epoch time) indicating when the span started.\n   * @deprecated Use `spanToJSON()` instead.\n   */\n  public get startTimestamp(): number {\n    return this._startTime;\n  }\n\n  /**\n   * Timestamp in seconds (epoch time) indicating when the span started.\n   * @deprecated In v8, you will not be able to update the span start time after creation.\n   */\n  public set startTimestamp(startTime: number) {\n    this._startTime = startTime;\n  }\n\n  /**\n   * Timestamp in seconds when the span ended.\n   * @deprecated Use `spanToJSON()` instead.\n   */\n  public get endTimestamp(): number | undefined {\n    return this._endTime;\n  }\n\n  /**\n   * Timestamp in seconds when the span ended.\n   * @deprecated Set the end time via `span.end()` instead.\n   */\n  public set endTimestamp(endTime: number | undefined) {\n    this._endTime = endTime;\n  }\n\n  /**\n   * The status of the span.\n   *\n   * @deprecated Use `spanToJSON().status` instead to get the status.\n   */\n  public get status(): SpanStatusType | string | undefined {\n    return this._status;\n  }\n\n  /**\n   * The status of the span.\n   *\n   * @deprecated Use `.setStatus()` instead to set or update the status.\n   */\n  public set status(status: SpanStatusType | string | undefined) {\n    this._status = status;\n  }\n\n  /**\n   * Operation of the span\n   *\n   * @deprecated Use `spanToJSON().op` to read the op instead.\n   */\n  public get op(): string | undefined {\n    return this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] as string | undefined;\n  }\n\n  /**\n   * Operation of the span\n   *\n   * @deprecated Use `startSpan()` functions to set or `span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'op')\n   *             to update the span instead.\n   */\n  public set op(op: string | undefined) {\n    this.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, op);\n  }\n\n  /**\n   * The origin of the span, giving context about what created the span.\n   *\n   * @deprecated Use `spanToJSON().origin` to read the origin instead.\n   */\n  public get origin(): SpanOrigin | undefined {\n    return this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] as SpanOrigin | undefined;\n  }\n\n  /**\n   * The origin of the span, giving context about what created the span.\n   *\n   * @deprecated Use `startSpan()` functions to set the origin instead.\n   */\n  public set origin(origin: SpanOrigin | undefined) {\n    this.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, origin);\n  }\n\n  /* eslint-enable @typescript-eslint/member-ordering */\n\n  /** @inheritdoc */\n  public spanContext(): SpanContextData {\n    const { _spanId: spanId, _traceId: traceId, _sampled: sampled } = this;\n    return {\n      spanId,\n      traceId,\n      traceFlags: sampled ? TRACE_FLAG_SAMPLED : TRACE_FLAG_NONE,\n    };\n  }\n\n  /**\n   * Creates a new `Span` while setting the current `Span.id` as `parentSpanId`.\n   * Also the `sampled` decision will be inherited.\n   *\n   * @deprecated Use `startSpan()`, `startSpanManual()` or `startInactiveSpan()` instead.\n   */\n  public startChild(\n    spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'sampled' | 'traceId' | 'parentSpanId'>>,\n  ): SpanInterface {\n    const childSpan = new Span({\n      ...spanContext,\n      parentSpanId: this._spanId,\n      sampled: this._sampled,\n      traceId: this._traceId,\n    });\n\n    // eslint-disable-next-line deprecation/deprecation\n    childSpan.spanRecorder = this.spanRecorder;\n    // eslint-disable-next-line deprecation/deprecation\n    if (childSpan.spanRecorder) {\n      // eslint-disable-next-line deprecation/deprecation\n      childSpan.spanRecorder.add(childSpan);\n    }\n\n    const rootSpan = getRootSpan(this);\n    // TODO: still set span.transaction here until we have a more permanent solution\n    // Probably similarly to the weakmap we hold in node-experimental\n    // eslint-disable-next-line deprecation/deprecation\n    childSpan.transaction = rootSpan as Transaction;\n\n    if (DEBUG_BUILD && rootSpan) {\n      const opStr = (spanContext && spanContext.op) || '< unknown op >';\n      const nameStr = spanToJSON(childSpan).description || '< unknown name >';\n      const idStr = rootSpan.spanContext().spanId;\n\n      const logMessage = `[Tracing] Starting '${opStr}' span on transaction '${nameStr}' (${idStr}).`;\n      logger.log(logMessage);\n      this._logMessage = logMessage;\n    }\n\n    return childSpan;\n  }\n\n  /**\n   * Sets the tag attribute on the current span.\n   *\n   * Can also be used to unset a tag, by passing `undefined`.\n   *\n   * @param key Tag key\n   * @param value Tag value\n   * @deprecated Use `setAttribute()` instead.\n   */\n  public setTag(key: string, value: Primitive): this {\n    // eslint-disable-next-line deprecation/deprecation\n    this.tags = { ...this.tags, [key]: value };\n    return this;\n  }\n\n  /**\n   * Sets the data attribute on the current span\n   * @param key Data key\n   * @param value Data value\n   * @deprecated Use `setAttribute()` instead.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setData(key: string, value: any): this {\n    // eslint-disable-next-line deprecation/deprecation\n    this.data = { ...this.data, [key]: value };\n    return this;\n  }\n\n  /** @inheritdoc */\n  public setAttribute(key: string, value: SpanAttributeValue | undefined): void {\n    if (value === undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._attributes[key];\n    } else {\n      this._attributes[key] = value;\n    }\n  }\n\n  /** @inheritdoc */\n  public setAttributes(attributes: SpanAttributes): void {\n    Object.keys(attributes).forEach(key => this.setAttribute(key, attributes[key]));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setStatus(value: SpanStatusType): this {\n    this._status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use top-level `setHttpStatus()` instead.\n   */\n  public setHttpStatus(httpStatus: number): this {\n    setHttpStatus(this, httpStatus);\n    return this;\n  }\n\n  /**\n   * @inheritdoc\n   *\n   * @deprecated Use `.updateName()` instead.\n   */\n  public setName(name: string): void {\n    this.updateName(name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateName(name: string): this {\n    this._name = name;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `spanToJSON(span).status === 'ok'` instead.\n   */\n  public isSuccess(): boolean {\n    return this._status === 'ok';\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `.end()` instead.\n   */\n  public finish(endTimestamp?: number): void {\n    return this.end(endTimestamp);\n  }\n\n  /** @inheritdoc */\n  public end(endTimestamp?: SpanTimeInput): void {\n    // If already ended, skip\n    if (this._endTime) {\n      return;\n    }\n    const rootSpan = getRootSpan(this);\n    if (\n      DEBUG_BUILD &&\n      // Don't call this for transactions\n      rootSpan &&\n      rootSpan.spanContext().spanId !== this._spanId\n    ) {\n      const logMessage = this._logMessage;\n      if (logMessage) {\n        logger.log((logMessage as string).replace('Starting', 'Finishing'));\n      }\n    }\n\n    this._endTime = spanTimeInputToSeconds(endTimestamp);\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `spanToTraceHeader()` instead.\n   */\n  public toTraceparent(): string {\n    return spanToTraceHeader(this);\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `spanToJSON()` or access the fields directly instead.\n   */\n  public toContext(): SpanContext {\n    return dropUndefinedKeys({\n      data: this._getData(),\n      description: this._name,\n      endTimestamp: this._endTime,\n      // eslint-disable-next-line deprecation/deprecation\n      op: this.op,\n      parentSpanId: this._parentSpanId,\n      sampled: this._sampled,\n      spanId: this._spanId,\n      startTimestamp: this._startTime,\n      status: this._status,\n      // eslint-disable-next-line deprecation/deprecation\n      tags: this.tags,\n      traceId: this._traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Update the fields directly instead.\n   */\n  public updateWithContext(spanContext: SpanContext): this {\n    // eslint-disable-next-line deprecation/deprecation\n    this.data = spanContext.data || {};\n    // eslint-disable-next-line deprecation/deprecation\n    this._name = spanContext.name || spanContext.description;\n    this._endTime = spanContext.endTimestamp;\n    // eslint-disable-next-line deprecation/deprecation\n    this.op = spanContext.op;\n    this._parentSpanId = spanContext.parentSpanId;\n    this._sampled = spanContext.sampled;\n    this._spanId = spanContext.spanId || this._spanId;\n    this._startTime = spanContext.startTimestamp || this._startTime;\n    this._status = spanContext.status;\n    // eslint-disable-next-line deprecation/deprecation\n    this.tags = spanContext.tags || {};\n    this._traceId = spanContext.traceId || this._traceId;\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `spanToTraceContext()` util function instead.\n   */\n  public getTraceContext(): TraceContext {\n    return spanToTraceContext(this);\n  }\n\n  /**\n   * Get JSON representation of this span.\n   *\n   * @hidden\n   * @internal This method is purely for internal purposes and should not be used outside\n   * of SDK code. If you need to get a JSON representation of a span,\n   * use `spanToJSON(span)` instead.\n   */\n  public getSpanJSON(): SpanJSON {\n    return dropUndefinedKeys({\n      data: this._getData(),\n      description: this._name,\n      op: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] as string | undefined,\n      parent_span_id: this._parentSpanId,\n      span_id: this._spanId,\n      start_timestamp: this._startTime,\n      status: this._status,\n      // eslint-disable-next-line deprecation/deprecation\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this._endTime,\n      trace_id: this._traceId,\n      origin: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] as SpanOrigin | undefined,\n      _metrics_summary: getMetricSummaryJsonForSpan(this),\n      profile_id: this._attributes[SEMANTIC_ATTRIBUTE_PROFILE_ID] as string | undefined,\n      exclusive_time: this._exclusiveTime,\n      measurements: Object.keys(this._measurements).length > 0 ? this._measurements : undefined,\n    });\n  }\n\n  /** @inheritdoc */\n  public isRecording(): boolean {\n    return !this._endTime && !!this._sampled;\n  }\n\n  /**\n   * Convert the object to JSON.\n   * @deprecated Use `spanToJSON(span)` instead.\n   */\n  public toJSON(): SpanJSON {\n    return this.getSpanJSON();\n  }\n\n  /**\n   * Get the merged data for this span.\n   * For now, this combines `data` and `attributes` together,\n   * until eventually we can ingest `attributes` directly.\n   */\n  private _getData():\n    | {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        [key: string]: any;\n      }\n    | undefined {\n    // eslint-disable-next-line deprecation/deprecation\n    const { data, _attributes: attributes } = this;\n\n    const hasData = Object.keys(data).length > 0;\n    const hasAttributes = Object.keys(attributes).length > 0;\n\n    if (!hasData && !hasAttributes) {\n      return undefined;\n    }\n\n    if (hasData && hasAttributes) {\n      return {\n        ...data,\n        ...attributes,\n      };\n    }\n\n    return hasData ? data : attributes;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}