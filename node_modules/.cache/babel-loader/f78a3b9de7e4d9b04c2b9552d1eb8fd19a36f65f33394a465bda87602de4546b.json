{"ast":null,"code":"import { extractPathForTransaction, addRequestDataToEvent } from '@sentry/utils';\nimport { convertIntegrationFnToClass, defineIntegration } from '../integration.js';\nimport { spanToJSON } from '../utils/spanUtils.js';\nconst DEFAULT_OPTIONS = {\n  include: {\n    cookies: true,\n    data: true,\n    headers: true,\n    ip: false,\n    query_string: true,\n    url: true,\n    user: {\n      id: true,\n      username: true,\n      email: true\n    }\n  },\n  transactionNamingScheme: 'methodPath'\n};\nconst INTEGRATION_NAME = 'RequestData';\nconst _requestDataIntegration = (options = {}) => {\n  const _addRequestData = addRequestDataToEvent;\n  const _options = {\n    ...DEFAULT_OPTIONS,\n    ...options,\n    include: {\n      // @ts-expect-error It's mad because `method` isn't a known `include` key. (It's only here and not set by default in\n      // `addRequestDataToEvent` for legacy reasons. TODO (v8): Change that.)\n      method: true,\n      ...DEFAULT_OPTIONS.include,\n      ...options.include,\n      user: options.include && typeof options.include.user === 'boolean' ? options.include.user : {\n        ...DEFAULT_OPTIONS.include.user,\n        // Unclear why TS still thinks `options.include.user` could be a boolean at this point\n        ...(options.include || {}).user\n      }\n    }\n  };\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {},\n    // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(event, _hint, client) {\n      // Note: In the long run, most of the logic here should probably move into the request data utility functions. For\n      // the moment it lives here, though, until https://github.com/getsentry/sentry-javascript/issues/5718 is addressed.\n      // (TL;DR: Those functions touch many parts of the repo in many different ways, and need to be clened up. Once\n      // that's happened, it will be easier to add this logic in without worrying about unexpected side effects.)\n      const {\n        transactionNamingScheme\n      } = _options;\n      const {\n        sdkProcessingMetadata = {}\n      } = event;\n      const req = sdkProcessingMetadata.request;\n      if (!req) {\n        return event;\n      }\n\n      // The Express request handler takes a similar `include` option to that which can be passed to this integration.\n      // If passed there, we store it in `sdkProcessingMetadata`. TODO(v8): Force express and GCP people to use this\n      // integration, so that all of this passing and conversion isn't necessary\n      const addRequestDataOptions = sdkProcessingMetadata.requestDataOptionsFromExpressHandler || sdkProcessingMetadata.requestDataOptionsFromGCPWrapper || convertReqDataIntegrationOptsToAddReqDataOpts(_options);\n      const processedEvent = _addRequestData(event, req, addRequestDataOptions);\n\n      // Transaction events already have the right `transaction` value\n      if (event.type === 'transaction' || transactionNamingScheme === 'handler') {\n        return processedEvent;\n      }\n\n      // In all other cases, use the request's associated transaction (if any) to overwrite the event's `transaction`\n      // value with a high-quality one\n      const reqWithTransaction = req;\n      const transaction = reqWithTransaction._sentryTransaction;\n      if (transaction) {\n        const name = spanToJSON(transaction).description || '';\n\n        // TODO (v8): Remove the nextjs check and just base it on `transactionNamingScheme` for all SDKs. (We have to\n        // keep it the way it is for the moment, because changing the names of transactions in Sentry has the potential\n        // to break things like alert rules.)\n        const shouldIncludeMethodInTransactionName = getSDKName(client) === 'sentry.javascript.nextjs' ? name.startsWith('/api') : transactionNamingScheme !== 'path';\n        const [transactionValue] = extractPathForTransaction(req, {\n          path: true,\n          method: shouldIncludeMethodInTransactionName,\n          customRoute: name\n        });\n        processedEvent.transaction = transactionValue;\n      }\n      return processedEvent;\n    }\n  };\n};\nconst requestDataIntegration = defineIntegration(_requestDataIntegration);\n\n/**\n * Add data about a request to an event. Primarily for use in Node-based SDKs, but included in `@sentry/integrations`\n * so it can be used in cross-platform SDKs like `@sentry/nextjs`.\n * @deprecated Use `requestDataIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nconst RequestData = convertIntegrationFnToClass(INTEGRATION_NAME, requestDataIntegration);\n\n/** Convert this integration's options to match what `addRequestDataToEvent` expects */\n/** TODO: Can possibly be deleted once https://github.com/getsentry/sentry-javascript/issues/5718 is fixed */\nfunction convertReqDataIntegrationOptsToAddReqDataOpts(integrationOptions) {\n  const {\n    transactionNamingScheme,\n    include: {\n      ip,\n      user,\n      ...requestOptions\n    }\n  } = integrationOptions;\n  const requestIncludeKeys = [];\n  for (const [key, value] of Object.entries(requestOptions)) {\n    if (value) {\n      requestIncludeKeys.push(key);\n    }\n  }\n  let addReqDataUserOpt;\n  if (user === undefined) {\n    addReqDataUserOpt = true;\n  } else if (typeof user === 'boolean') {\n    addReqDataUserOpt = user;\n  } else {\n    const userIncludeKeys = [];\n    for (const [key, value] of Object.entries(user)) {\n      if (value) {\n        userIncludeKeys.push(key);\n      }\n    }\n    addReqDataUserOpt = userIncludeKeys;\n  }\n  return {\n    include: {\n      ip,\n      user: addReqDataUserOpt,\n      request: requestIncludeKeys.length !== 0 ? requestIncludeKeys : undefined,\n      transaction: transactionNamingScheme\n    }\n  };\n}\nfunction getSDKName(client) {\n  try {\n    // For a long chain like this, it's fewer bytes to combine a try-catch with assuming everything is there than to\n    // write out a long chain of `a && a.b && a.b.c && ...`\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return client.getOptions()._metadata.sdk.name;\n  } catch (err) {\n    // In theory we should never get here\n    return undefined;\n  }\n}\nexport { RequestData, requestDataIntegration };","map":{"version":3,"names":["DEFAULT_OPTIONS","include","cookies","data","headers","ip","query_string","url","user","id","username","email","transactionNamingScheme","INTEGRATION_NAME","_requestDataIntegration","options","_addRequestData","addRequestDataToEvent","_options","method","name","setupOnce","processEvent","event","_hint","client","sdkProcessingMetadata","req","request","addRequestDataOptions","requestDataOptionsFromExpressHandler","requestDataOptionsFromGCPWrapper","convertReqDataIntegrationOptsToAddReqDataOpts","processedEvent","type","reqWithTransaction","transaction","_sentryTransaction","spanToJSON","description","shouldIncludeMethodInTransactionName","getSDKName","startsWith","transactionValue","extractPathForTransaction","path","customRoute","requestDataIntegration","defineIntegration","RequestData","convertIntegrationFnToClass","integrationOptions","requestOptions","requestIncludeKeys","key","value","Object","entries","push","addReqDataUserOpt","undefined","userIncludeKeys","length","getOptions","_metadata","sdk","err"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/integrations/requestdata.ts"],"sourcesContent":["import type {\n  Client,\n  Event,\n  EventHint,\n  Integration,\n  IntegrationClass,\n  IntegrationFn,\n  Transaction,\n} from '@sentry/types';\nimport type { AddRequestDataToEventOptions, TransactionNamingScheme } from '@sentry/utils';\nimport { addRequestDataToEvent, extractPathForTransaction } from '@sentry/utils';\nimport { convertIntegrationFnToClass, defineIntegration } from '../integration';\nimport { spanToJSON } from '../utils/spanUtils';\n\nexport type RequestDataIntegrationOptions = {\n  /**\n   * Controls what data is pulled from the request and added to the event\n   */\n  include?: {\n    cookies?: boolean;\n    data?: boolean;\n    headers?: boolean;\n    ip?: boolean;\n    query_string?: boolean;\n    url?: boolean;\n    user?:\n      | boolean\n      | {\n          id?: boolean;\n          username?: boolean;\n          email?: boolean;\n        };\n  };\n\n  /** Whether to identify transactions by parameterized path, parameterized path with method, or handler name */\n  transactionNamingScheme?: TransactionNamingScheme;\n};\n\nconst DEFAULT_OPTIONS = {\n  include: {\n    cookies: true,\n    data: true,\n    headers: true,\n    ip: false,\n    query_string: true,\n    url: true,\n    user: {\n      id: true,\n      username: true,\n      email: true,\n    },\n  },\n  transactionNamingScheme: 'methodPath',\n};\n\nconst INTEGRATION_NAME = 'RequestData';\n\nconst _requestDataIntegration = ((options: RequestDataIntegrationOptions = {}) => {\n  const _addRequestData = addRequestDataToEvent;\n  const _options: Required<RequestDataIntegrationOptions> = {\n    ...DEFAULT_OPTIONS,\n    ...options,\n    include: {\n      // @ts-expect-error It's mad because `method` isn't a known `include` key. (It's only here and not set by default in\n      // `addRequestDataToEvent` for legacy reasons. TODO (v8): Change that.)\n      method: true,\n      ...DEFAULT_OPTIONS.include,\n      ...options.include,\n      user:\n        options.include && typeof options.include.user === 'boolean'\n          ? options.include.user\n          : {\n              ...DEFAULT_OPTIONS.include.user,\n              // Unclear why TS still thinks `options.include.user` could be a boolean at this point\n              ...((options.include || {}).user as Record<string, boolean>),\n            },\n    },\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(event, _hint, client) {\n      // Note: In the long run, most of the logic here should probably move into the request data utility functions. For\n      // the moment it lives here, though, until https://github.com/getsentry/sentry-javascript/issues/5718 is addressed.\n      // (TL;DR: Those functions touch many parts of the repo in many different ways, and need to be clened up. Once\n      // that's happened, it will be easier to add this logic in without worrying about unexpected side effects.)\n      const { transactionNamingScheme } = _options;\n\n      const { sdkProcessingMetadata = {} } = event;\n      const req = sdkProcessingMetadata.request;\n\n      if (!req) {\n        return event;\n      }\n\n      // The Express request handler takes a similar `include` option to that which can be passed to this integration.\n      // If passed there, we store it in `sdkProcessingMetadata`. TODO(v8): Force express and GCP people to use this\n      // integration, so that all of this passing and conversion isn't necessary\n      const addRequestDataOptions =\n        sdkProcessingMetadata.requestDataOptionsFromExpressHandler ||\n        sdkProcessingMetadata.requestDataOptionsFromGCPWrapper ||\n        convertReqDataIntegrationOptsToAddReqDataOpts(_options);\n\n      const processedEvent = _addRequestData(event, req, addRequestDataOptions);\n\n      // Transaction events already have the right `transaction` value\n      if (event.type === 'transaction' || transactionNamingScheme === 'handler') {\n        return processedEvent;\n      }\n\n      // In all other cases, use the request's associated transaction (if any) to overwrite the event's `transaction`\n      // value with a high-quality one\n      const reqWithTransaction = req as { _sentryTransaction?: Transaction };\n      const transaction = reqWithTransaction._sentryTransaction;\n      if (transaction) {\n        const name = spanToJSON(transaction).description || '';\n\n        // TODO (v8): Remove the nextjs check and just base it on `transactionNamingScheme` for all SDKs. (We have to\n        // keep it the way it is for the moment, because changing the names of transactions in Sentry has the potential\n        // to break things like alert rules.)\n        const shouldIncludeMethodInTransactionName =\n          getSDKName(client) === 'sentry.javascript.nextjs'\n            ? name.startsWith('/api')\n            : transactionNamingScheme !== 'path';\n\n        const [transactionValue] = extractPathForTransaction(req, {\n          path: true,\n          method: shouldIncludeMethodInTransactionName,\n          customRoute: name,\n        });\n\n        processedEvent.transaction = transactionValue;\n      }\n\n      return processedEvent;\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const requestDataIntegration = defineIntegration(_requestDataIntegration);\n\n/**\n * Add data about a request to an event. Primarily for use in Node-based SDKs, but included in `@sentry/integrations`\n * so it can be used in cross-platform SDKs like `@sentry/nextjs`.\n * @deprecated Use `requestDataIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const RequestData = convertIntegrationFnToClass(INTEGRATION_NAME, requestDataIntegration) as IntegrationClass<\n  Integration & { processEvent: (event: Event, hint: EventHint, client: Client) => Event }\n> & {\n  new (options?: {\n    /**\n     * Controls what data is pulled from the request and added to the event\n     */\n    include?: {\n      cookies?: boolean;\n      data?: boolean;\n      headers?: boolean;\n      ip?: boolean;\n      query_string?: boolean;\n      url?: boolean;\n      user?:\n        | boolean\n        | {\n            id?: boolean;\n            username?: boolean;\n            email?: boolean;\n          };\n    };\n\n    /** Whether to identify transactions by parameterized path, parameterized path with method, or handler name */\n    transactionNamingScheme?: TransactionNamingScheme;\n  }): Integration;\n};\n\n/** Convert this integration's options to match what `addRequestDataToEvent` expects */\n/** TODO: Can possibly be deleted once https://github.com/getsentry/sentry-javascript/issues/5718 is fixed */\nfunction convertReqDataIntegrationOptsToAddReqDataOpts(\n  integrationOptions: Required<RequestDataIntegrationOptions>,\n): AddRequestDataToEventOptions {\n  const {\n    transactionNamingScheme,\n    include: { ip, user, ...requestOptions },\n  } = integrationOptions;\n\n  const requestIncludeKeys: string[] = [];\n  for (const [key, value] of Object.entries(requestOptions)) {\n    if (value) {\n      requestIncludeKeys.push(key);\n    }\n  }\n\n  let addReqDataUserOpt;\n  if (user === undefined) {\n    addReqDataUserOpt = true;\n  } else if (typeof user === 'boolean') {\n    addReqDataUserOpt = user;\n  } else {\n    const userIncludeKeys: string[] = [];\n    for (const [key, value] of Object.entries(user)) {\n      if (value) {\n        userIncludeKeys.push(key);\n      }\n    }\n    addReqDataUserOpt = userIncludeKeys;\n  }\n\n  return {\n    include: {\n      ip,\n      user: addReqDataUserOpt,\n      request: requestIncludeKeys.length !== 0 ? requestIncludeKeys : undefined,\n      transaction: transactionNamingScheme,\n    },\n  };\n}\n\nfunction getSDKName(client: Client): string | undefined {\n  try {\n    // For a long chain like this, it's fewer bytes to combine a try-catch with assuming everything is there than to\n    // write out a long chain of `a && a.b && a.b.c && ...`\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return client.getOptions()._metadata!.sdk!.name;\n  } catch (err) {\n    // In theory we should never get here\n    return undefined;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}