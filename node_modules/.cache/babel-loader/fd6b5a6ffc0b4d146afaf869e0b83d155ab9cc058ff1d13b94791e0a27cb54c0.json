{"ast":null,"code":"import { defineIntegration, convertIntegrationFnToClass, getClient, captureEvent } from '@sentry/core';\nimport { addGlobalErrorInstrumentationHandler, isString, addGlobalUnhandledRejectionInstrumentationHandler, isPrimitive, isErrorEvent, getLocationHref, logger } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { eventFromUnknownInput } from '../eventbuilder.js';\nimport { shouldIgnoreOnError } from '../helpers.js';\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\nconst INTEGRATION_NAME = 'GlobalHandlers';\nconst _globalHandlersIntegration = (options = {}) => {\n  const _options = {\n    onerror: true,\n    onunhandledrejection: true,\n    ...options\n  };\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      Error.stackTraceLimit = 50;\n    },\n    setup(client) {\n      if (_options.onerror) {\n        _installGlobalOnErrorHandler(client);\n        globalHandlerLog('onerror');\n      }\n      if (_options.onunhandledrejection) {\n        _installGlobalOnUnhandledRejectionHandler(client);\n        globalHandlerLog('onunhandledrejection');\n      }\n    }\n  };\n};\nconst globalHandlersIntegration = defineIntegration(_globalHandlersIntegration);\n\n/**\n * Global handlers.\n * @deprecated Use `globalHandlersIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nconst GlobalHandlers = convertIntegrationFnToClass(INTEGRATION_NAME, globalHandlersIntegration);\nfunction _installGlobalOnErrorHandler(client) {\n  addGlobalErrorInstrumentationHandler(data => {\n    const {\n      stackParser,\n      attachStacktrace\n    } = getOptions();\n    if (getClient() !== client || shouldIgnoreOnError()) {\n      return;\n    }\n    const {\n      msg,\n      url,\n      line,\n      column,\n      error\n    } = data;\n    const event = error === undefined && isString(msg) ? _eventFromIncompleteOnError(msg, url, line, column) : _enhanceEventWithInitialFrame(eventFromUnknownInput(stackParser, error || msg, undefined, attachStacktrace, false), url, line, column);\n    event.level = 'error';\n    captureEvent(event, {\n      originalException: error,\n      mechanism: {\n        handled: false,\n        type: 'onerror'\n      }\n    });\n  });\n}\nfunction _installGlobalOnUnhandledRejectionHandler(client) {\n  addGlobalUnhandledRejectionInstrumentationHandler(e => {\n    const {\n      stackParser,\n      attachStacktrace\n    } = getOptions();\n    if (getClient() !== client || shouldIgnoreOnError()) {\n      return;\n    }\n    const error = _getUnhandledRejectionError(e);\n    const event = isPrimitive(error) ? _eventFromRejectionWithPrimitive(error) : eventFromUnknownInput(stackParser, error, undefined, attachStacktrace, true);\n    event.level = 'error';\n    captureEvent(event, {\n      originalException: error,\n      mechanism: {\n        handled: false,\n        type: 'onunhandledrejection'\n      }\n    });\n  });\n}\nfunction _getUnhandledRejectionError(error) {\n  if (isPrimitive(error)) {\n    return error;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const e = error;\n\n  // dig the object of the rejection out of known event types\n  try {\n    // PromiseRejectionEvents store the object of the rejection under 'reason'\n    // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n    if ('reason' in e) {\n      return e.reason;\n    }\n\n    // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n    // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n    // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n    // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n    // https://github.com/getsentry/sentry-javascript/issues/2380\n    else if ('detail' in e && 'reason' in e.detail) {\n      return e.detail.reason;\n    }\n  } catch (e2) {} // eslint-disable-line no-empty\n\n  return error;\n}\n\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason) {\n  return {\n    exception: {\n      values: [{\n        type: 'UnhandledRejection',\n        // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n        value: `Non-Error promise rejection captured with value: ${String(reason)}`\n      }]\n    }\n  };\n}\n\n/**\n * This function creates a stack from an old, error-less onerror handler.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _eventFromIncompleteOnError(msg, url, line, column) {\n  const ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n  // If 'message' is ErrorEvent, get real message from inside\n  let message = isErrorEvent(msg) ? msg.message : msg;\n  let name = 'Error';\n  const groups = message.match(ERROR_TYPES_RE);\n  if (groups) {\n    name = groups[1];\n    message = groups[2];\n  }\n  const event = {\n    exception: {\n      values: [{\n        type: name,\n        value: message\n      }]\n    }\n  };\n  return _enhanceEventWithInitialFrame(event, url, line, column);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _enhanceEventWithInitialFrame(event, url, line, column) {\n  // event.exception\n  const e = event.exception = event.exception || {};\n  // event.exception.values\n  const ev = e.values = e.values || [];\n  // event.exception.values[0]\n  const ev0 = ev[0] = ev[0] || {};\n  // event.exception.values[0].stacktrace\n  const ev0s = ev0.stacktrace = ev0.stacktrace || {};\n  // event.exception.values[0].stacktrace.frames\n  const ev0sf = ev0s.frames = ev0s.frames || [];\n  const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno,\n      filename,\n      function: '?',\n      in_app: true,\n      lineno\n    });\n  }\n  return event;\n}\nfunction globalHandlerLog(type) {\n  DEBUG_BUILD && logger.log(`Global Handler attached: ${type}`);\n}\nfunction getOptions() {\n  const client = getClient();\n  const options = client && client.getOptions() || {\n    stackParser: () => [],\n    attachStacktrace: false\n  };\n  return options;\n}\nexport { GlobalHandlers, globalHandlersIntegration };","map":{"version":3,"names":["INTEGRATION_NAME","_globalHandlersIntegration","options","_options","onerror","onunhandledrejection","name","setupOnce","Error","stackTraceLimit","setup","client","_installGlobalOnErrorHandler","globalHandlerLog","_installGlobalOnUnhandledRejectionHandler","globalHandlersIntegration","defineIntegration","GlobalHandlers","convertIntegrationFnToClass","addGlobalErrorInstrumentationHandler","data","stackParser","attachStacktrace","getOptions","getClient","shouldIgnoreOnError","msg","url","line","column","error","event","undefined","isString","_eventFromIncompleteOnError","_enhanceEventWithInitialFrame","eventFromUnknownInput","level","captureEvent","originalException","mechanism","handled","type","addGlobalUnhandledRejectionInstrumentationHandler","e","_getUnhandledRejectionError","isPrimitive","_eventFromRejectionWithPrimitive","reason","detail","e2","exception","values","value","String","ERROR_TYPES_RE","message","isErrorEvent","groups","match","ev","ev0","ev0s","stacktrace","ev0sf","frames","colno","isNaN","parseInt","lineno","filename","length","getLocationHref","push","function","in_app","DEBUG_BUILD","logger","log"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/src/integrations/globalhandlers.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { captureEvent, convertIntegrationFnToClass, defineIntegration, getClient } from '@sentry/core';\nimport type {\n  Client,\n  Event,\n  Integration,\n  IntegrationClass,\n  IntegrationFn,\n  Primitive,\n  StackParser,\n} from '@sentry/types';\nimport {\n  addGlobalErrorInstrumentationHandler,\n  addGlobalUnhandledRejectionInstrumentationHandler,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport type { BrowserClient } from '../client';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\ntype GlobalHandlersIntegrationsOptionKeys = 'onerror' | 'onunhandledrejection';\n\ntype GlobalHandlersIntegrations = Record<GlobalHandlersIntegrationsOptionKeys, boolean>;\n\nconst INTEGRATION_NAME = 'GlobalHandlers';\n\nconst _globalHandlersIntegration = ((options: Partial<GlobalHandlersIntegrations> = {}) => {\n  const _options = {\n    onerror: true,\n    onunhandledrejection: true,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      Error.stackTraceLimit = 50;\n    },\n    setup(client) {\n      if (_options.onerror) {\n        _installGlobalOnErrorHandler(client);\n        globalHandlerLog('onerror');\n      }\n      if (_options.onunhandledrejection) {\n        _installGlobalOnUnhandledRejectionHandler(client);\n        globalHandlerLog('onunhandledrejection');\n      }\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const globalHandlersIntegration = defineIntegration(_globalHandlersIntegration);\n\n/**\n * Global handlers.\n * @deprecated Use `globalHandlersIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const GlobalHandlers = convertIntegrationFnToClass(\n  INTEGRATION_NAME,\n  globalHandlersIntegration,\n) as IntegrationClass<Integration & { setup: (client: Client) => void }> & {\n  new (options?: Partial<GlobalHandlersIntegrations>): Integration;\n};\n\nfunction _installGlobalOnErrorHandler(client: Client): void {\n  addGlobalErrorInstrumentationHandler(data => {\n    const { stackParser, attachStacktrace } = getOptions();\n\n    if (getClient() !== client || shouldIgnoreOnError()) {\n      return;\n    }\n\n    const { msg, url, line, column, error } = data;\n\n    const event =\n      error === undefined && isString(msg)\n        ? _eventFromIncompleteOnError(msg, url, line, column)\n        : _enhanceEventWithInitialFrame(\n            eventFromUnknownInput(stackParser, error || msg, undefined, attachStacktrace, false),\n            url,\n            line,\n            column,\n          );\n\n    event.level = 'error';\n\n    captureEvent(event, {\n      originalException: error,\n      mechanism: {\n        handled: false,\n        type: 'onerror',\n      },\n    });\n  });\n}\n\nfunction _installGlobalOnUnhandledRejectionHandler(client: Client): void {\n  addGlobalUnhandledRejectionInstrumentationHandler(e => {\n    const { stackParser, attachStacktrace } = getOptions();\n\n    if (getClient() !== client || shouldIgnoreOnError()) {\n      return;\n    }\n\n    const error = _getUnhandledRejectionError(e as unknown);\n\n    const event = isPrimitive(error)\n      ? _eventFromRejectionWithPrimitive(error)\n      : eventFromUnknownInput(stackParser, error, undefined, attachStacktrace, true);\n\n    event.level = 'error';\n\n    captureEvent(event, {\n      originalException: error,\n      mechanism: {\n        handled: false,\n        type: 'onunhandledrejection',\n      },\n    });\n  });\n}\n\nfunction _getUnhandledRejectionError(error: unknown): unknown {\n  if (isPrimitive(error)) {\n    return error;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const e = error as any;\n\n  // dig the object of the rejection out of known event types\n  try {\n    // PromiseRejectionEvents store the object of the rejection under 'reason'\n    // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n    if ('reason' in e) {\n      return e.reason;\n    }\n\n    // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n    // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n    // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n    // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n    // https://github.com/getsentry/sentry-javascript/issues/2380\n    else if ('detail' in e && 'reason' in e.detail) {\n      return e.detail.reason;\n    }\n  } catch {} // eslint-disable-line no-empty\n\n  return error;\n}\n\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason: Primitive): Event {\n  return {\n    exception: {\n      values: [\n        {\n          type: 'UnhandledRejection',\n          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n          value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n        },\n      ],\n    },\n  };\n}\n\n/**\n * This function creates a stack from an old, error-less onerror handler.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n  const ERROR_TYPES_RE =\n    /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n  // If 'message' is ErrorEvent, get real message from inside\n  let message = isErrorEvent(msg) ? msg.message : msg;\n  let name = 'Error';\n\n  const groups = message.match(ERROR_TYPES_RE);\n  if (groups) {\n    name = groups[1];\n    message = groups[2];\n  }\n\n  const event = {\n    exception: {\n      values: [\n        {\n          type: name,\n          value: message,\n        },\n      ],\n    },\n  };\n\n  return _enhanceEventWithInitialFrame(event, url, line, column);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n  // event.exception\n  const e = (event.exception = event.exception || {});\n  // event.exception.values\n  const ev = (e.values = e.values || []);\n  // event.exception.values[0]\n  const ev0 = (ev[0] = ev[0] || {});\n  // event.exception.values[0].stacktrace\n  const ev0s = (ev0.stacktrace = ev0.stacktrace || {});\n  // event.exception.values[0].stacktrace.frames\n  const ev0sf = (ev0s.frames = ev0s.frames || []);\n\n  const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno,\n      filename,\n      function: '?',\n      in_app: true,\n      lineno,\n    });\n  }\n\n  return event;\n}\n\nfunction globalHandlerLog(type: string): void {\n  DEBUG_BUILD && logger.log(`Global Handler attached: ${type}`);\n}\n\nfunction getOptions(): { stackParser: StackParser; attachStacktrace?: boolean } {\n  const client = getClient<BrowserClient>();\n  const options = (client && client.getOptions()) || {\n    stackParser: () => [],\n    attachStacktrace: false,\n  };\n  return options;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}