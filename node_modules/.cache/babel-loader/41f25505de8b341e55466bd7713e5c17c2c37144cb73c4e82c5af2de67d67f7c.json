{"ast":null,"code":"import { addTracingExtensions, getMainCarrier } from '@sentry/core';\nimport { isNodeEnv, loadModule, dynamicRequire } from '@sentry/utils';\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations() {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  const packageToIntegrationMapping = {\n    mongodb() {\n      const integration = dynamicRequire(module, './node/integrations/mongo');\n      return new integration.Mongo();\n    },\n    mongoose() {\n      const integration = dynamicRequire(module, './node/integrations/mongo');\n      return new integration.Mongo();\n    },\n    mysql() {\n      const integration = dynamicRequire(module, './node/integrations/mysql');\n      return new integration.Mysql();\n    },\n    pg() {\n      const integration = dynamicRequire(module, './node/integrations/postgres');\n      return new integration.Postgres();\n    }\n  };\n  const mappedPackages = Object.keys(packageToIntegrationMapping).filter(moduleName => !!loadModule(moduleName)).map(pkg => {\n    try {\n      return packageToIntegrationMapping[pkg]();\n    } catch (e) {\n      return undefined;\n    }\n  }).filter(p => p);\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [...(carrier.__SENTRY__.integrations || []), ...mappedPackages];\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nfunction addExtensionMethods() {\n  addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n}\nexport { addExtensionMethods };","map":{"version":3,"names":["_autoloadDatabaseIntegrations","carrier","getMainCarrier","__SENTRY__","packageToIntegrationMapping","mongodb","integration","dynamicRequire","module","Mongo","mongoose","mysql","Mysql","pg","Postgres","mappedPackages","Object","keys","filter","moduleName","loadModule","map","pkg","e","undefined","p","length","integrations","addExtensionMethods","addTracingExtensions","isNodeEnv"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry-internal/src/extensions.ts"],"sourcesContent":["import { addTracingExtensions, getMainCarrier } from '@sentry/core';\nimport type { Integration, IntegrationClass } from '@sentry/types';\nimport { dynamicRequire, isNodeEnv, loadModule } from '@sentry/utils';\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  const packageToIntegrationMapping: Record<string, () => Integration> = {\n    mongodb() {\n      const integration = dynamicRequire(module, './node/integrations/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo();\n    },\n    mongoose() {\n      const integration = dynamicRequire(module, './node/integrations/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo();\n    },\n    mysql() {\n      const integration = dynamicRequire(module, './node/integrations/mysql') as {\n        Mysql: IntegrationClass<Integration>;\n      };\n      return new integration.Mysql();\n    },\n    pg() {\n      const integration = dynamicRequire(module, './node/integrations/postgres') as {\n        Postgres: IntegrationClass<Integration>;\n      };\n      return new integration.Postgres();\n    },\n  };\n\n  const mappedPackages = Object.keys(packageToIntegrationMapping)\n    .filter(moduleName => !!loadModule(moduleName))\n    .map(pkg => {\n      try {\n        return packageToIntegrationMapping[pkg]();\n      } catch (e) {\n        return undefined;\n      }\n    })\n    .filter(p => p) as Integration[];\n\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [...(carrier.__SENTRY__.integrations || []), ...mappedPackages];\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n}\n"],"mappings":";;;AAIA;AACA;AACA;AACA,SAASA,6BAA6BA,CAAA,EAAS;EAC7C,MAAMC,OAAA,GAAUC,cAAc,EAAE;EAChC,IAAI,CAACD,OAAO,CAACE,UAAU,EAAE;IACvB;EACJ;EAEE,MAAMC,2BAA2B,GAAsC;IACrEC,OAAOA,CAAA,EAAG;MACR,MAAMC,WAAA,GAAcC,cAAc,CAACC,MAAM,EAAE,2BAA2B,CAAE;MAGxE,OAAO,IAAIF,WAAW,CAACG,KAAK,EAAE;IACpC,CAAK;IACDC,QAAQA,CAAA,EAAG;MACT,MAAMJ,WAAA,GAAcC,cAAc,CAACC,MAAM,EAAE,2BAA2B,CAAE;MAGxE,OAAO,IAAIF,WAAW,CAACG,KAAK,EAAE;IACpC,CAAK;IACDE,KAAKA,CAAA,EAAG;MACN,MAAML,WAAA,GAAcC,cAAc,CAACC,MAAM,EAAE,2BAA2B,CAAE;MAGxE,OAAO,IAAIF,WAAW,CAACM,KAAK,EAAE;IACpC,CAAK;IACDC,EAAEA,CAAA,EAAG;MACH,MAAMP,WAAA,GAAcC,cAAc,CAACC,MAAM,EAAE,8BAA8B,CAAE;MAG3E,OAAO,IAAIF,WAAW,CAACQ,QAAQ,EAAE;IACvC;EACA,CAAG;EAED,MAAMC,cAAe,GAAEC,MAAM,CAACC,IAAI,CAACb,2BAA2B,EAC3Dc,MAAM,CAACC,UAAW,IAAG,CAAC,CAACC,UAAU,CAACD,UAAU,CAAC,EAC7CE,GAAG,CAACC,GAAA,IAAO;IACV,IAAI;MACF,OAAOlB,2BAA2B,CAACkB,GAAG,CAAC,EAAE;IACjD,CAAQ,QAAOC,CAAC,EAAE;MACV,OAAOC,SAAS;IACxB;EACA,CAAK,EACAN,MAAM,CAACO,CAAE,IAAGA,CAAC,CAAE;EAElB,IAAIV,cAAc,CAACW,MAAO,GAAE,CAAC,EAAE;IAC7BzB,OAAO,CAACE,UAAU,CAACwB,YAAA,GAAe,CAAC,IAAI1B,OAAO,CAACE,UAAU,CAACwB,YAAA,IAAgB,EAAE,CAAC,EAAE,GAAGZ,cAAc,CAAC;EACrG;AACA;;AAEA;AACA;AACA;AACO,SAASa,mBAAmBA,CAAA,EAAS;EAC1CC,oBAAoB,EAAE;;EAExB;EACE,IAAIC,SAAS,EAAE,EAAE;IACf9B,6BAA6B,EAAE;EACnC;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}