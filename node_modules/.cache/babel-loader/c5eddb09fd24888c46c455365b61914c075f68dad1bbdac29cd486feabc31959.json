{"ast":null,"code":"import { dropUndefinedKeys } from './object.js';\nimport { filenameIsInApp } from './node-stack-trace.js';\n\n/**\n * A node.js watchdog timer\n * @param pollInterval The interval that we expect to get polled at\n * @param anrThreshold The threshold for when we consider ANR\n * @param callback The callback to call for ANR\n * @returns An object with `poll` and `enabled` functions {@link WatchdogReturn}\n */\nfunction watchdogTimer(createTimer, pollInterval, anrThreshold, callback) {\n  const timer = createTimer();\n  let triggered = false;\n  let enabled = true;\n  setInterval(() => {\n    const diffMs = timer.getTimeMs();\n    if (triggered === false && diffMs > pollInterval + anrThreshold) {\n      triggered = true;\n      if (enabled) {\n        callback();\n      }\n    }\n    if (diffMs < pollInterval + anrThreshold) {\n      triggered = false;\n    }\n  }, 20);\n  return {\n    poll: () => {\n      timer.reset();\n    },\n    enabled: state => {\n      enabled = state;\n    }\n  };\n}\n\n// types copied from inspector.d.ts\n\n/**\n * Converts Debugger.CallFrame to Sentry StackFrame\n */\nfunction callFrameToStackFrame(frame, url, getModuleFromFilename) {\n  const filename = url ? url.replace(/^file:\\/\\//, '') : undefined;\n\n  // CallFrame row/col are 0 based, whereas StackFrame are 1 based\n  const colno = frame.location.columnNumber ? frame.location.columnNumber + 1 : undefined;\n  const lineno = frame.location.lineNumber ? frame.location.lineNumber + 1 : undefined;\n  return dropUndefinedKeys({\n    filename,\n    module: getModuleFromFilename(filename),\n    function: frame.functionName || '?',\n    colno,\n    lineno,\n    in_app: filename ? filenameIsInApp(filename) : undefined\n  });\n}\nexport { callFrameToStackFrame, watchdogTimer };","map":{"version":3,"names":["watchdogTimer","createTimer","pollInterval","anrThreshold","callback","timer","triggered","enabled","setInterval","diffMs","getTimeMs","poll","reset","state","callFrameToStackFrame","frame","url","getModuleFromFilename","filename","replace","undefined","colno","location","columnNumber","lineno","lineNumber","dropUndefinedKeys","module","function","functionName","in_app","filenameIsInApp"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/anr.ts"],"sourcesContent":["import type { StackFrame } from '@sentry/types';\n\nimport { dropUndefinedKeys } from './object';\nimport { filenameIsInApp } from './stacktrace';\n\ntype WatchdogReturn = {\n  /** Resets the watchdog timer */\n  poll: () => void;\n  /** Enables or disables the watchdog timer */\n  enabled: (state: boolean) => void;\n};\n\ntype CreateTimerImpl = () => { getTimeMs: () => number; reset: () => void };\n\n/**\n * A node.js watchdog timer\n * @param pollInterval The interval that we expect to get polled at\n * @param anrThreshold The threshold for when we consider ANR\n * @param callback The callback to call for ANR\n * @returns An object with `poll` and `enabled` functions {@link WatchdogReturn}\n */\nexport function watchdogTimer(\n  createTimer: CreateTimerImpl,\n  pollInterval: number,\n  anrThreshold: number,\n  callback: () => void,\n): WatchdogReturn {\n  const timer = createTimer();\n  let triggered = false;\n  let enabled = true;\n\n  setInterval(() => {\n    const diffMs = timer.getTimeMs();\n\n    if (triggered === false && diffMs > pollInterval + anrThreshold) {\n      triggered = true;\n      if (enabled) {\n        callback();\n      }\n    }\n\n    if (diffMs < pollInterval + anrThreshold) {\n      triggered = false;\n    }\n  }, 20);\n\n  return {\n    poll: () => {\n      timer.reset();\n    },\n    enabled: (state: boolean) => {\n      enabled = state;\n    },\n  };\n}\n\n// types copied from inspector.d.ts\ninterface Location {\n  scriptId: string;\n  lineNumber: number;\n  columnNumber?: number;\n}\n\ninterface CallFrame {\n  functionName: string;\n  location: Location;\n  url: string;\n}\n\n/**\n * Converts Debugger.CallFrame to Sentry StackFrame\n */\nexport function callFrameToStackFrame(\n  frame: CallFrame,\n  url: string | undefined,\n  getModuleFromFilename: (filename: string | undefined) => string | undefined,\n): StackFrame {\n  const filename = url ? url.replace(/^file:\\/\\//, '') : undefined;\n\n  // CallFrame row/col are 0 based, whereas StackFrame are 1 based\n  const colno = frame.location.columnNumber ? frame.location.columnNumber + 1 : undefined;\n  const lineno = frame.location.lineNumber ? frame.location.lineNumber + 1 : undefined;\n\n  return dropUndefinedKeys({\n    filename,\n    module: getModuleFromFilename(filename),\n    function: frame.functionName || '?',\n    colno,\n    lineno,\n    in_app: filename ? filenameIsInApp(filename) : undefined,\n  });\n}\n"],"mappings":";;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,aAAaA,CAC3BC,WAAW,EACXC,YAAY,EACZC,YAAY,EACZC,QAAQ,EACQ;EAChB,MAAMC,KAAA,GAAQJ,WAAW,EAAE;EAC3B,IAAIK,SAAU,GAAE,KAAK;EACrB,IAAIC,OAAQ,GAAE,IAAI;EAElBC,WAAW,CAAC,MAAM;IAChB,MAAMC,MAAO,GAAEJ,KAAK,CAACK,SAAS,EAAE;IAEhC,IAAIJ,SAAA,KAAc,SAASG,MAAA,GAASP,YAAA,GAAeC,YAAY,EAAE;MAC/DG,SAAA,GAAY,IAAI;MAChB,IAAIC,OAAO,EAAE;QACXH,QAAQ,EAAE;MAClB;IACA;IAEI,IAAIK,MAAA,GAASP,YAAa,GAAEC,YAAY,EAAE;MACxCG,SAAA,GAAY,KAAK;IACvB;EACA,CAAG,EAAE,EAAE,CAAC;EAEN,OAAO;IACLK,IAAI,EAAEA,CAAA,KAAM;MACVN,KAAK,CAACO,KAAK,EAAE;IACnB,CAAK;IACDL,OAAO,EAAGM,KAAK,IAAc;MAC3BN,OAAA,GAAUM,KAAK;IACrB;EACA,CAAG;AACH;;AAEA;;AAaA;AACA;AACA;AACO,SAASC,qBAAqBA,CACnCC,KAAK,EACLC,GAAG,EACHC,qBAAqB,EACT;EACZ,MAAMC,QAAA,GAAWF,GAAA,GAAMA,GAAG,CAACG,OAAO,CAAC,YAAY,EAAE,EAAE,IAAIC,SAAS;;EAElE;EACE,MAAMC,KAAM,GAAEN,KAAK,CAACO,QAAQ,CAACC,YAAA,GAAeR,KAAK,CAACO,QAAQ,CAACC,YAAA,GAAe,IAAIH,SAAS;EACvF,MAAMI,MAAO,GAAET,KAAK,CAACO,QAAQ,CAACG,UAAA,GAAaV,KAAK,CAACO,QAAQ,CAACG,UAAA,GAAa,IAAIL,SAAS;EAEpF,OAAOM,iBAAiB,CAAC;IACvBR,QAAQ;IACRS,MAAM,EAAEV,qBAAqB,CAACC,QAAQ,CAAC;IACvCU,QAAQ,EAAEb,KAAK,CAACc,YAAA,IAAgB,GAAG;IACnCR,KAAK;IACLG,MAAM;IACNM,MAAM,EAAEZ,QAAS,GAAEa,eAAe,CAACb,QAAQ,CAAE,GAAEE;EACnD,CAAG,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}