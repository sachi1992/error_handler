{"ast":null,"code":"import { startSpan, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, getCurrentHub } from '@sentry/core';\nimport { addNonEnumerableProperty, logger } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../../common/debug-build.js';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils.js';\nfunction isValidPrismaClient(possibleClient) {\n  return !!possibleClient && !!possibleClient['$use'];\n}\n\n/** Tracing integration for @prisma/client package */\nclass Prisma {\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = 'Prisma';\n  }\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n  constructor(options = {}) {\n    this.name = Prisma.id;\n\n    // We instrument the PrismaClient inside the constructor and not inside `setupOnce` because in some cases of server-side\n    // bundling (Next.js) multiple Prisma clients can be instantiated, even though users don't intend to. When instrumenting\n    // in setupOnce we can only ever instrument one client.\n    // https://github.com/getsentry/sentry-javascript/issues/7216#issuecomment-1602375012\n    // In the future we might explore providing a dedicated PrismaClient middleware instead of this hack.\n    if (isValidPrismaClient(options.client) && !options.client._sentryInstrumented) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      addNonEnumerableProperty(options.client, '_sentryInstrumented', true);\n      const clientData = {};\n      try {\n        const engineConfig = options.client._engineConfig;\n        if (engineConfig) {\n          const {\n            activeProvider,\n            clientVersion\n          } = engineConfig;\n          if (activeProvider) {\n            clientData['db.system'] = activeProvider;\n          }\n          if (clientVersion) {\n            clientData['db.prisma.version'] = clientVersion;\n          }\n        }\n      } catch (e) {\n        // ignore\n      }\n      options.client.$use((params, next) => {\n        // eslint-disable-next-line deprecation/deprecation\n        if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n          return next(params);\n        }\n        const action = params.action;\n        const model = params.model;\n        return startSpan({\n          name: model ? `${model} ${action}` : action,\n          onlyIfParent: true,\n          op: 'db.prisma',\n          attributes: {\n            [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.db.prisma'\n          },\n          data: {\n            ...clientData,\n            'db.operation': action\n          }\n        }, () => next(params));\n      });\n    } else {\n      DEBUG_BUILD && logger.warn('Unsupported Prisma client provided to PrismaIntegration. Provided client:', options.client);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setupOnce() {\n    // Noop - here for backwards compatibility\n  }\n}\nPrisma.__initStatic();\nexport { Prisma };","map":{"version":3,"names":["isValidPrismaClient","possibleClient","Prisma","__initStatic","id","constructor","options","name","client","_sentryInstrumented","addNonEnumerableProperty","clientData","engineConfig","_engineConfig","activeProvider","clientVersion","e","$use","params","next","shouldDisableAutoInstrumentation","getCurrentHub","action","model","startSpan","onlyIfParent","op","attributes","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","data","DEBUG_BUILD","logger","warn","setupOnce"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry-internal/src/node/integrations/prisma.ts"],"sourcesContent":["import { SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, getCurrentHub, startSpan } from '@sentry/core';\nimport type { Integration } from '@sentry/types';\nimport { addNonEnumerableProperty, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../../common/debug-build';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ntype PrismaAction =\n  | 'findUnique'\n  | 'findMany'\n  | 'findFirst'\n  | 'create'\n  | 'createMany'\n  | 'update'\n  | 'updateMany'\n  | 'upsert'\n  | 'delete'\n  | 'deleteMany'\n  | 'executeRaw'\n  | 'queryRaw'\n  | 'aggregate'\n  | 'count'\n  | 'runCommandRaw';\n\ninterface PrismaMiddlewareParams {\n  model?: unknown;\n  action: PrismaAction;\n  args: unknown;\n  dataPath: string[];\n  runInTransaction: boolean;\n}\n\ntype PrismaMiddleware<T = unknown> = (\n  params: PrismaMiddlewareParams,\n  next: (params: PrismaMiddlewareParams) => Promise<T>,\n) => Promise<T>;\n\ninterface PrismaClient {\n  _sentryInstrumented?: boolean;\n  _engineConfig?: {\n    activeProvider?: string;\n    clientVersion?: string;\n  };\n  $use: (cb: PrismaMiddleware) => void;\n}\n\nfunction isValidPrismaClient(possibleClient: unknown): possibleClient is PrismaClient {\n  return !!possibleClient && !!(possibleClient as PrismaClient)['$use'];\n}\n\n/** Tracing integration for @prisma/client package */\nexport class Prisma implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Prisma';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { client?: unknown } = {}) {\n    this.name = Prisma.id;\n\n    // We instrument the PrismaClient inside the constructor and not inside `setupOnce` because in some cases of server-side\n    // bundling (Next.js) multiple Prisma clients can be instantiated, even though users don't intend to. When instrumenting\n    // in setupOnce we can only ever instrument one client.\n    // https://github.com/getsentry/sentry-javascript/issues/7216#issuecomment-1602375012\n    // In the future we might explore providing a dedicated PrismaClient middleware instead of this hack.\n    if (isValidPrismaClient(options.client) && !options.client._sentryInstrumented) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      addNonEnumerableProperty(options.client as any, '_sentryInstrumented', true);\n\n      const clientData: Record<string, string | number> = {};\n      try {\n        const engineConfig = (options.client as PrismaClient)._engineConfig;\n        if (engineConfig) {\n          const { activeProvider, clientVersion } = engineConfig;\n          if (activeProvider) {\n            clientData['db.system'] = activeProvider;\n          }\n          if (clientVersion) {\n            clientData['db.prisma.version'] = clientVersion;\n          }\n        }\n      } catch (e) {\n        // ignore\n      }\n\n      options.client.$use((params, next: (params: PrismaMiddlewareParams) => Promise<unknown>) => {\n        // eslint-disable-next-line deprecation/deprecation\n        if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n          return next(params);\n        }\n\n        const action = params.action;\n        const model = params.model;\n\n        return startSpan(\n          {\n            name: model ? `${model} ${action}` : action,\n            onlyIfParent: true,\n            op: 'db.prisma',\n            attributes: {\n              [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.db.prisma',\n            },\n            data: { ...clientData, 'db.operation': action },\n          },\n          () => next(params),\n        );\n      });\n    } else {\n      DEBUG_BUILD &&\n        logger.warn('Unsupported Prisma client provided to PrismaIntegration. Provided client:', options.client);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // Noop - here for backwards compatibility\n  }\n}\n"],"mappings":";;;;AA8CA,SAASA,mBAAmBA,CAACC,cAAc,EAA2C;EACpF,OAAO,CAAC,CAACA,cAAA,IAAkB,CAAC,CAAEA,cAAe,CAAiB,MAAM,CAAC;AACvE;;AAEA;AACO,MAAMC,MAAA,CAA8B;EAC3C;AACA;AACA;EACS,OAAAC,aAAA;IAAA,KAAOC,EAAE,GAAW;EAAQ;;EAErC;AACA;AACA;;EAGA;AACA;AACA;EACSC,WAAWA,CAACC,OAAO,GAAyB,EAAE,EAAE;IACrD,IAAI,CAACC,IAAA,GAAOL,MAAM,CAACE,EAAE;;IAEzB;IACA;IACA;IACA;IACA;IACI,IAAIJ,mBAAmB,CAACM,OAAO,CAACE,MAAM,CAAE,IAAG,CAACF,OAAO,CAACE,MAAM,CAACC,mBAAmB,EAAE;MACpF;MACMC,wBAAwB,CAACJ,OAAO,CAACE,MAAA,EAAe,qBAAqB,EAAE,IAAI,CAAC;MAE5E,MAAMG,UAAU,GAAoC,EAAE;MACtD,IAAI;QACF,MAAMC,YAAA,GAAgBN,OAAO,CAACE,MAAA,CAAwBK,aAAa;QACnE,IAAID,YAAY,EAAE;UAChB,MAAM;YAAEE,cAAc;YAAEC;UAAc,IAAIH,YAAY;UACtD,IAAIE,cAAc,EAAE;YAClBH,UAAU,CAAC,WAAW,IAAIG,cAAc;UACpD;UACU,IAAIC,aAAa,EAAE;YACjBJ,UAAU,CAAC,mBAAmB,IAAII,aAAa;UAC3D;QACA;MACA,CAAQ,QAAOC,CAAC,EAAE;QAClB;MAAA;MAGMV,OAAO,CAACE,MAAM,CAACS,IAAI,CAAC,CAACC,MAAM,EAAEC,IAAI,KAA2D;QAClG;QACQ,IAAIC,gCAAgC,CAACC,aAAa,CAAC,EAAE;UACnD,OAAOF,IAAI,CAACD,MAAM,CAAC;QAC7B;QAEQ,MAAMI,MAAA,GAASJ,MAAM,CAACI,MAAM;QAC5B,MAAMC,KAAA,GAAQL,MAAM,CAACK,KAAK;QAE1B,OAAOC,SAAS,CACd;UACEjB,IAAI,EAAEgB,KAAM,GAAG,GAAAA,KAAA,IAAAD,MAAA,KAAAA,MAAA;UACAG,YAAA;UACAC,EAAA;UACAC,UAAA;YACA,CAAAC,gCAAA;UACA;UACAC,IAAA;YAAA,GAAAlB,UAAA;YAAA,gBAAAW;UAAA;QACA,GACA,MAAAH,IAAA,CAAAD,MAAA,CACA;MACA;IACA;MACAY,WAAA,IACAC,MAAA,CAAAC,IAAA,8EAAA1B,OAAA,CAAAE,MAAA;IACA;EACA;;EAEA;AACA;AACA;EACAyB,UAAA;IACA;EAAA;AAEA;AAAA/B,MAAA,CAAAC,YAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}