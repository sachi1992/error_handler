{"ast":null,"code":"import { forEachEnvelopeItem } from '@sentry/utils';\nimport { convertIntegrationFnToClass, defineIntegration } from '../integration.js';\nimport { stripMetadataFromStackFrames, addMetadataToStackFrames } from '../metadata.js';\nconst INTEGRATION_NAME = 'ModuleMetadata';\nconst _moduleMetadataIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {},\n    // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client) {\n      if (typeof client.on !== 'function') {\n        return;\n      }\n\n      // We need to strip metadata from stack frames before sending them to Sentry since these are client side only.\n      client.on('beforeEnvelope', envelope => {\n        forEachEnvelopeItem(envelope, (item, type) => {\n          if (type === 'event') {\n            const event = Array.isArray(item) ? item[1] : undefined;\n            if (event) {\n              stripMetadataFromStackFrames(event);\n              item[1] = event;\n            }\n          }\n        });\n      });\n    },\n    processEvent(event, _hint, client) {\n      const stackParser = client.getOptions().stackParser;\n      addMetadataToStackFrames(stackParser, event);\n      return event;\n    }\n  };\n};\nconst moduleMetadataIntegration = defineIntegration(_moduleMetadataIntegration);\n\n/**\n * Adds module metadata to stack frames.\n *\n * Metadata can be injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.\n *\n * When this integration is added, the metadata passed to the bundler plugin is added to the stack frames of all events\n * under the `module_metadata` property. This can be used to help in tagging or routing of events from different teams\n * our sources\n *\n * @deprecated Use `moduleMetadataIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nconst ModuleMetadata = convertIntegrationFnToClass(INTEGRATION_NAME, moduleMetadataIntegration);\nexport { ModuleMetadata, moduleMetadataIntegration };","map":{"version":3,"names":["INTEGRATION_NAME","_moduleMetadataIntegration","name","setupOnce","setup","client","on","envelope","forEachEnvelopeItem","item","type","event","Array","isArray","undefined","stripMetadataFromStackFrames","processEvent","_hint","stackParser","getOptions","addMetadataToStackFrames","moduleMetadataIntegration","defineIntegration","ModuleMetadata","convertIntegrationFnToClass"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/integrations/metadata.ts"],"sourcesContent":["import type { Client, Event, EventHint, EventItem, Integration, IntegrationClass, IntegrationFn } from '@sentry/types';\nimport { forEachEnvelopeItem } from '@sentry/utils';\nimport { convertIntegrationFnToClass, defineIntegration } from '../integration';\n\nimport { addMetadataToStackFrames, stripMetadataFromStackFrames } from '../metadata';\n\nconst INTEGRATION_NAME = 'ModuleMetadata';\n\nconst _moduleMetadataIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client) {\n      if (typeof client.on !== 'function') {\n        return;\n      }\n\n      // We need to strip metadata from stack frames before sending them to Sentry since these are client side only.\n      client.on('beforeEnvelope', envelope => {\n        forEachEnvelopeItem(envelope, (item, type) => {\n          if (type === 'event') {\n            const event = Array.isArray(item) ? (item as EventItem)[1] : undefined;\n\n            if (event) {\n              stripMetadataFromStackFrames(event);\n              item[1] = event;\n            }\n          }\n        });\n      });\n    },\n\n    processEvent(event, _hint, client) {\n      const stackParser = client.getOptions().stackParser;\n      addMetadataToStackFrames(stackParser, event);\n      return event;\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const moduleMetadataIntegration = defineIntegration(_moduleMetadataIntegration);\n\n/**\n * Adds module metadata to stack frames.\n *\n * Metadata can be injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.\n *\n * When this integration is added, the metadata passed to the bundler plugin is added to the stack frames of all events\n * under the `module_metadata` property. This can be used to help in tagging or routing of events from different teams\n * our sources\n *\n * @deprecated Use `moduleMetadataIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const ModuleMetadata = convertIntegrationFnToClass(\n  INTEGRATION_NAME,\n  moduleMetadataIntegration,\n) as IntegrationClass<\n  Integration & {\n    setup: (client: Client) => void;\n    processEvent: (event: Event, hint: EventHint, client: Client) => Event;\n  }\n>;\n"],"mappings":";;;AAMA,MAAMA,gBAAA,GAAmB,gBAAgB;AAEzC,MAAMC,0BAA2B,GAAGA,CAAA,KAAM;EACxC,OAAO;IACLC,IAAI,EAAEF,gBAAgB;IAC1B;IACIG,SAASA,CAAA,EAAG,EAAE;IAAA;IACdC,KAAKA,CAACC,MAAM,EAAE;MACZ,IAAI,OAAOA,MAAM,CAACC,EAAG,KAAI,UAAU,EAAE;QACnC;MACR;;MAEA;MACMD,MAAM,CAACC,EAAE,CAAC,gBAAgB,EAAEC,QAAA,IAAY;QACtCC,mBAAmB,CAACD,QAAQ,EAAE,CAACE,IAAI,EAAEC,IAAI,KAAK;UAC5C,IAAIA,IAAK,KAAI,OAAO,EAAE;YACpB,MAAMC,KAAM,GAAEC,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAE,GAAGA,IAAK,CAAc,CAAC,IAAIK,SAAS;YAEtE,IAAIH,KAAK,EAAE;cACTI,4BAA4B,CAACJ,KAAK,CAAC;cACnCF,IAAI,CAAC,CAAC,IAAIE,KAAK;YAC7B;UACA;QACA,CAAS,CAAC;MACV,CAAO,CAAC;IACR,CAAK;IAEDK,YAAYA,CAACL,KAAK,EAAEM,KAAK,EAAEZ,MAAM,EAAE;MACjC,MAAMa,WAAA,GAAcb,MAAM,CAACc,UAAU,EAAE,CAACD,WAAW;MACnDE,wBAAwB,CAACF,WAAW,EAAEP,KAAK,CAAC;MAC5C,OAAOA,KAAK;IAClB;EACA,CAAG;AACH,CAAG;MAEUU,yBAA0B,GAAEC,iBAAiB,CAACrB,0BAA0B;;AAErF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMsB,cAAe,GAAEC,2BAA2B,CACvDxB,gBAAgB,EAChBqB,yBACF,CAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}