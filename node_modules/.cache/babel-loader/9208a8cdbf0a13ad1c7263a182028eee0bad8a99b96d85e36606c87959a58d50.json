{"ast":null,"code":"import { dsnToString, dropUndefinedKeys, createEnvelope } from '@sentry/utils';\n\n/**\n * Create envelope from check in item.\n */\nfunction createCheckInEnvelope(checkIn, dynamicSamplingContext, metadata, tunnel, dsn) {\n  const headers = {\n    sent_at: new Date().toISOString()\n  };\n  if (metadata && metadata.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version\n    };\n  }\n  if (!!tunnel && !!dsn) {\n    headers.dsn = dsnToString(dsn);\n  }\n  if (dynamicSamplingContext) {\n    headers.trace = dropUndefinedKeys(dynamicSamplingContext);\n  }\n  const item = createCheckInEnvelopeItem(checkIn);\n  return createEnvelope(headers, [item]);\n}\nfunction createCheckInEnvelopeItem(checkIn) {\n  const checkInHeaders = {\n    type: 'check_in'\n  };\n  return [checkInHeaders, checkIn];\n}\nexport { createCheckInEnvelope };","map":{"version":3,"names":["createCheckInEnvelope","checkIn","dynamicSamplingContext","metadata","tunnel","dsn","headers","sent_at","Date","toISOString","sdk","name","version","dsnToString","trace","dropUndefinedKeys","item","createCheckInEnvelopeItem","createEnvelope","checkInHeaders","type"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/checkin.ts"],"sourcesContent":["import type {\n  CheckInEnvelope,\n  CheckInItem,\n  DsnComponents,\n  DynamicSamplingContext,\n  SdkMetadata,\n  SerializedCheckIn,\n} from '@sentry/types';\nimport { createEnvelope, dropUndefinedKeys, dsnToString } from '@sentry/utils';\n\n/**\n * Create envelope from check in item.\n */\nexport function createCheckInEnvelope(\n  checkIn: SerializedCheckIn,\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n  dsn?: DsnComponents,\n): CheckInEnvelope {\n  const headers: CheckInEnvelope[0] = {\n    sent_at: new Date().toISOString(),\n  };\n\n  if (metadata && metadata.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version,\n    };\n  }\n\n  if (!!tunnel && !!dsn) {\n    headers.dsn = dsnToString(dsn);\n  }\n\n  if (dynamicSamplingContext) {\n    headers.trace = dropUndefinedKeys(dynamicSamplingContext) as DynamicSamplingContext;\n  }\n\n  const item = createCheckInEnvelopeItem(checkIn);\n  return createEnvelope<CheckInEnvelope>(headers, [item]);\n}\n\nfunction createCheckInEnvelopeItem(checkIn: SerializedCheckIn): CheckInItem {\n  const checkInHeaders: CheckInItem[0] = {\n    type: 'check_in',\n  };\n  return [checkInHeaders, checkIn];\n}\n"],"mappings":";;AAUA;AACA;AACA;AACO,SAASA,qBAAqBA,CACnCC,OAAO,EACPC,sBAAsB,EACtBC,QAAQ,EACRC,MAAM,EACNC,GAAG,EACc;EACjB,MAAMC,OAAO,GAAuB;IAClCC,OAAO,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;EACnC,CAAG;EAED,IAAIN,QAAA,IAAYA,QAAQ,CAACO,GAAG,EAAE;IAC5BJ,OAAO,CAACI,GAAA,GAAM;MACZC,IAAI,EAAER,QAAQ,CAACO,GAAG,CAACC,IAAI;MACvBC,OAAO,EAAET,QAAQ,CAACO,GAAG,CAACE;IAC5B,CAAK;EACL;EAEE,IAAI,CAAC,CAACR,MAAA,IAAU,CAAC,CAACC,GAAG,EAAE;IACrBC,OAAO,CAACD,GAAA,GAAMQ,WAAW,CAACR,GAAG,CAAC;EAClC;EAEE,IAAIH,sBAAsB,EAAE;IAC1BI,OAAO,CAACQ,KAAA,GAAQC,iBAAiB,CAACb,sBAAsB,CAAE;EAC9D;EAEE,MAAMc,IAAK,GAAEC,yBAAyB,CAAChB,OAAO,CAAC;EAC/C,OAAOiB,cAAc,CAAkBZ,OAAO,EAAE,CAACU,IAAI,CAAC,CAAC;AACzD;AAEA,SAASC,yBAAyBA,CAAChB,OAAO,EAAkC;EAC1E,MAAMkB,cAAc,GAAmB;IACrCC,IAAI,EAAE;EACV,CAAG;EACD,OAAO,CAACD,cAAc,EAAElB,OAAO,CAAC;AAClC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}