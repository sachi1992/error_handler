{"ast":null,"code":"import { DEBUG_BUILD } from './debug-build.js';\nimport { isString } from './is.js';\nimport { logger } from './logger.js';\nconst BAGGAGE_HEADER_NAME = 'baggage';\nconst SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';\nconst SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */\nconst MAX_BAGGAGE_STRING_LENGTH = 8192;\n\n/**\n * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n * from it.\n *\n * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n */\nfunction baggageHeaderToDynamicSamplingContext(\n// Very liberal definition of what any incoming header might look like\nbaggageHeader) {\n  if (!isString(baggageHeader) && !Array.isArray(baggageHeader)) {\n    return undefined;\n  }\n\n  // Intermediary object to store baggage key value pairs of incoming baggage headers on.\n  // It is later used to read Sentry-DSC-values from.\n  let baggageObject = {};\n  if (Array.isArray(baggageHeader)) {\n    // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n    baggageObject = baggageHeader.reduce((acc, curr) => {\n      const currBaggageObject = baggageHeaderToObject(curr);\n      for (const key of Object.keys(currBaggageObject)) {\n        acc[key] = currBaggageObject[key];\n      }\n      return acc;\n    }, {});\n  } else {\n    // Return undefined if baggage header is an empty string (technically an empty baggage header is not spec conform but\n    // this is how we choose to handle it)\n    if (!baggageHeader) {\n      return undefined;\n    }\n    baggageObject = baggageHeaderToObject(baggageHeader);\n  }\n\n  // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n  const dynamicSamplingContext = Object.entries(baggageObject).reduce((acc, [key, value]) => {\n    if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n      const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n      acc[nonPrefixedKey] = value;\n    }\n    return acc;\n  }, {});\n\n  // Only return a dynamic sampling context object if there are keys in it.\n  // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n  if (Object.keys(dynamicSamplingContext).length > 0) {\n    return dynamicSamplingContext;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n *\n * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n * `undefined` the function will return `undefined`.\n * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n */\nfunction dynamicSamplingContextToSentryBaggageHeader(\n// this also takes undefined for convenience and bundle size in other places\ndynamicSamplingContext) {\n  if (!dynamicSamplingContext) {\n    return undefined;\n  }\n\n  // Prefix all DSC keys with \"sentry-\" and put them into a new object\n  const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce((acc, [dscKey, dscValue]) => {\n    if (dscValue) {\n      acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;\n    }\n    return acc;\n  }, {});\n  return objectToBaggageHeader(sentryPrefixedDSC);\n}\n\n/**\n * Will parse a baggage header, which is a simple key-value map, into a flat object.\n *\n * @param baggageHeader The baggage header to parse.\n * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n */\nfunction baggageHeaderToObject(baggageHeader) {\n  return baggageHeader.split(',').map(baggageEntry => baggageEntry.split('=').map(keyOrValue => decodeURIComponent(keyOrValue.trim()))).reduce((acc, [key, value]) => {\n    acc[key] = value;\n    return acc;\n  }, {});\n}\n\n/**\n * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n *\n * @param object The object to turn into a baggage header.\n * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n * is not spec compliant.\n */\nfunction objectToBaggageHeader(object) {\n  if (Object.keys(object).length === 0) {\n    // An empty baggage header is not spec compliant: We return undefined.\n    return undefined;\n  }\n  return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex) => {\n    const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;\n    const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;\n    if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n      DEBUG_BUILD && logger.warn(`Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`);\n      return baggageHeader;\n    } else {\n      return newBaggageHeader;\n    }\n  }, '');\n}\nexport { BAGGAGE_HEADER_NAME, MAX_BAGGAGE_STRING_LENGTH, SENTRY_BAGGAGE_KEY_PREFIX, SENTRY_BAGGAGE_KEY_PREFIX_REGEX, baggageHeaderToDynamicSamplingContext, dynamicSamplingContextToSentryBaggageHeader };","map":{"version":3,"names":["BAGGAGE_HEADER_NAME","SENTRY_BAGGAGE_KEY_PREFIX","SENTRY_BAGGAGE_KEY_PREFIX_REGEX","MAX_BAGGAGE_STRING_LENGTH","baggageHeaderToDynamicSamplingContext","baggageHeader","isString","Array","isArray","undefined","baggageObject","reduce","acc","curr","currBaggageObject","baggageHeaderToObject","key","Object","keys","dynamicSamplingContext","entries","value","match","nonPrefixedKey","slice","length","dynamicSamplingContextToSentryBaggageHeader","sentryPrefixedDSC","dscKey","dscValue","objectToBaggageHeader","split","map","baggageEntry","keyOrValue","decodeURIComponent","trim","object","objectKey","objectValue","currentIndex","encodeURIComponent","newBaggageHeader","DEBUG_BUILD","logger","warn"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/baggage.ts"],"sourcesContent":["import type { DynamicSamplingContext } from '@sentry/types';\n\nimport { DEBUG_BUILD } from './debug-build';\nimport { isString } from './is';\nimport { logger } from './logger';\n\nexport const BAGGAGE_HEADER_NAME = 'baggage';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */\nexport const MAX_BAGGAGE_STRING_LENGTH = 8192;\n\n/**\n * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n * from it.\n *\n * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n */\nexport function baggageHeaderToDynamicSamplingContext(\n  // Very liberal definition of what any incoming header might look like\n  baggageHeader: string | string[] | number | null | undefined | boolean,\n): Partial<DynamicSamplingContext> | undefined {\n  if (!isString(baggageHeader) && !Array.isArray(baggageHeader)) {\n    return undefined;\n  }\n\n  // Intermediary object to store baggage key value pairs of incoming baggage headers on.\n  // It is later used to read Sentry-DSC-values from.\n  let baggageObject: Readonly<Record<string, string>> = {};\n\n  if (Array.isArray(baggageHeader)) {\n    // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n    baggageObject = baggageHeader.reduce<Record<string, string>>((acc, curr) => {\n      const currBaggageObject = baggageHeaderToObject(curr);\n      for (const key of Object.keys(currBaggageObject)) {\n        acc[key] = currBaggageObject[key];\n      }\n      return acc;\n    }, {});\n  } else {\n    // Return undefined if baggage header is an empty string (technically an empty baggage header is not spec conform but\n    // this is how we choose to handle it)\n    if (!baggageHeader) {\n      return undefined;\n    }\n\n    baggageObject = baggageHeaderToObject(baggageHeader);\n  }\n\n  // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n  const dynamicSamplingContext = Object.entries(baggageObject).reduce<Record<string, string>>((acc, [key, value]) => {\n    if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n      const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n      acc[nonPrefixedKey] = value;\n    }\n    return acc;\n  }, {});\n\n  // Only return a dynamic sampling context object if there are keys in it.\n  // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n  if (Object.keys(dynamicSamplingContext).length > 0) {\n    return dynamicSamplingContext as Partial<DynamicSamplingContext>;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n *\n * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n * `undefined` the function will return `undefined`.\n * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n */\nexport function dynamicSamplingContextToSentryBaggageHeader(\n  // this also takes undefined for convenience and bundle size in other places\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>,\n): string | undefined {\n  if (!dynamicSamplingContext) {\n    return undefined;\n  }\n\n  // Prefix all DSC keys with \"sentry-\" and put them into a new object\n  const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce<Record<string, string>>(\n    (acc, [dscKey, dscValue]) => {\n      if (dscValue) {\n        acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;\n      }\n      return acc;\n    },\n    {},\n  );\n\n  return objectToBaggageHeader(sentryPrefixedDSC);\n}\n\n/**\n * Will parse a baggage header, which is a simple key-value map, into a flat object.\n *\n * @param baggageHeader The baggage header to parse.\n * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n */\nfunction baggageHeaderToObject(baggageHeader: string): Record<string, string> {\n  return baggageHeader\n    .split(',')\n    .map(baggageEntry => baggageEntry.split('=').map(keyOrValue => decodeURIComponent(keyOrValue.trim())))\n    .reduce<Record<string, string>>((acc, [key, value]) => {\n      acc[key] = value;\n      return acc;\n    }, {});\n}\n\n/**\n * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n *\n * @param object The object to turn into a baggage header.\n * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n * is not spec compliant.\n */\nfunction objectToBaggageHeader(object: Record<string, string>): string | undefined {\n  if (Object.keys(object).length === 0) {\n    // An empty baggage header is not spec compliant: We return undefined.\n    return undefined;\n  }\n\n  return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex) => {\n    const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;\n    const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;\n    if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`,\n        );\n      return baggageHeader;\n    } else {\n      return newBaggageHeader;\n    }\n  }, '');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}