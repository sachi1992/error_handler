{"ast":null,"code":"import { getActiveTransaction, spanToJSON, setMeasurement, getClient, Span, createSpanEnvelope, hasTracingEnabled, isValidSampleRate } from '@sentry/core';\nimport { browserPerformanceTimeOrigin, htmlTreeAsString, getComponentName, logger, parseUrl } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../../common/debug-build.js';\nimport { addPerformanceInstrumentationHandler, addClsInstrumentationHandler, addLcpInstrumentationHandler, addFidInstrumentationHandler, addTtfbInstrumentationHandler, addInpInstrumentationHandler } from '../instrument.js';\nimport { WINDOW } from '../types.js';\nimport { getVisibilityWatcher } from '../web-vitals/lib/getVisibilityWatcher.js';\nimport { _startChild, isMeasurementValue } from './utils.js';\nimport { getNavigationEntry } from '../web-vitals/lib/getNavigationEntry.js';\nconst MAX_INT_AS_BYTES = 2147483647;\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nfunction msToSec(time) {\n  return time / 1000;\n}\nfunction getBrowserPerformanceAPI() {\n  // @ts-expect-error we want to make sure all of these are available, even if TS is sure they are\n  return WINDOW && WINDOW.addEventListener && WINDOW.performance;\n}\nlet _performanceCursor = 0;\nlet _measurements = {};\nlet _lcpEntry;\nlet _clsEntry;\n\n/**\n * Start tracking web vitals.\n * The callback returned by this function can be used to stop tracking & ensure all measurements are final & captured.\n *\n * @returns A function that forces web vitals collection\n */\nfunction startTrackingWebVitals() {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin) {\n    // @ts-expect-error we want to make sure all of these are available, even if TS is sure they are\n    if (performance.mark) {\n      WINDOW.performance.mark('sentry-tracing-init');\n    }\n    const fidCallback = _trackFID();\n    const clsCallback = _trackCLS();\n    const lcpCallback = _trackLCP();\n    const ttfbCallback = _trackTtfb();\n    return () => {\n      fidCallback();\n      clsCallback();\n      lcpCallback();\n      ttfbCallback();\n    };\n  }\n  return () => undefined;\n}\n\n/**\n * Start tracking long tasks.\n */\nfunction startTrackingLongTasks() {\n  addPerformanceInstrumentationHandler('longtask', ({\n    entries\n  }) => {\n    for (const entry of entries) {\n      // eslint-disable-next-line deprecation/deprecation\n      const transaction = getActiveTransaction();\n      if (!transaction) {\n        return;\n      }\n      const startTime = msToSec(browserPerformanceTimeOrigin + entry.startTime);\n      const duration = msToSec(entry.duration);\n\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.startChild({\n        description: 'Main UI thread blocked',\n        op: 'ui.long-task',\n        origin: 'auto.ui.browser.metrics',\n        startTimestamp: startTime,\n        endTimestamp: startTime + duration\n      });\n    }\n  });\n}\n\n/**\n * Start tracking interaction events.\n */\nfunction startTrackingInteractions() {\n  addPerformanceInstrumentationHandler('event', ({\n    entries\n  }) => {\n    for (const entry of entries) {\n      // eslint-disable-next-line deprecation/deprecation\n      const transaction = getActiveTransaction();\n      if (!transaction) {\n        return;\n      }\n      if (entry.name === 'click') {\n        const startTime = msToSec(browserPerformanceTimeOrigin + entry.startTime);\n        const duration = msToSec(entry.duration);\n        const span = {\n          description: htmlTreeAsString(entry.target),\n          op: `ui.interaction.${entry.name}`,\n          origin: 'auto.ui.browser.metrics',\n          startTimestamp: startTime,\n          endTimestamp: startTime + duration\n        };\n        const componentName = getComponentName(entry.target);\n        if (componentName) {\n          span.attributes = {\n            'ui.component_name': componentName\n          };\n        }\n\n        // eslint-disable-next-line deprecation/deprecation\n        transaction.startChild(span);\n      }\n    }\n  });\n}\n\n/**\n * Start tracking INP webvital events.\n */\nfunction startTrackingINP(interactionIdtoRouteNameMapping) {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin) {\n    const inpCallback = _trackINP(interactionIdtoRouteNameMapping);\n    return () => {\n      inpCallback();\n    };\n  }\n  return () => undefined;\n}\n\n/** Starts tracking the Cumulative Layout Shift on the current page. */\nfunction _trackCLS() {\n  return addClsInstrumentationHandler(({\n    metric\n  }) => {\n    const entry = metric.entries[metric.entries.length - 1];\n    if (!entry) {\n      return;\n    }\n    DEBUG_BUILD && logger.log('[Measurements] Adding CLS');\n    _measurements['cls'] = {\n      value: metric.value,\n      unit: ''\n    };\n    _clsEntry = entry;\n  }, true);\n}\n\n/** Starts tracking the Largest Contentful Paint on the current page. */\nfunction _trackLCP() {\n  return addLcpInstrumentationHandler(({\n    metric\n  }) => {\n    const entry = metric.entries[metric.entries.length - 1];\n    if (!entry) {\n      return;\n    }\n    DEBUG_BUILD && logger.log('[Measurements] Adding LCP');\n    _measurements['lcp'] = {\n      value: metric.value,\n      unit: 'millisecond'\n    };\n    _lcpEntry = entry;\n  }, true);\n}\n\n/** Starts tracking the First Input Delay on the current page. */\nfunction _trackFID() {\n  return addFidInstrumentationHandler(({\n    metric\n  }) => {\n    const entry = metric.entries[metric.entries.length - 1];\n    if (!entry) {\n      return;\n    }\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n    const startTime = msToSec(entry.startTime);\n    DEBUG_BUILD && logger.log('[Measurements] Adding FID');\n    _measurements['fid'] = {\n      value: metric.value,\n      unit: 'millisecond'\n    };\n    _measurements['mark.fid'] = {\n      value: timeOrigin + startTime,\n      unit: 'second'\n    };\n  });\n}\nfunction _trackTtfb() {\n  return addTtfbInstrumentationHandler(({\n    metric\n  }) => {\n    const entry = metric.entries[metric.entries.length - 1];\n    if (!entry) {\n      return;\n    }\n    DEBUG_BUILD && logger.log('[Measurements] Adding TTFB');\n    _measurements['ttfb'] = {\n      value: metric.value,\n      unit: 'millisecond'\n    };\n  });\n}\nconst INP_ENTRY_MAP = {\n  click: 'click',\n  pointerdown: 'click',\n  pointerup: 'click',\n  mousedown: 'click',\n  mouseup: 'click',\n  touchstart: 'click',\n  touchend: 'click',\n  mouseover: 'hover',\n  mouseout: 'hover',\n  mouseenter: 'hover',\n  mouseleave: 'hover',\n  pointerover: 'hover',\n  pointerout: 'hover',\n  pointerenter: 'hover',\n  pointerleave: 'hover',\n  dragstart: 'drag',\n  dragend: 'drag',\n  drag: 'drag',\n  dragenter: 'drag',\n  dragleave: 'drag',\n  dragover: 'drag',\n  drop: 'drag',\n  keydown: 'press',\n  keyup: 'press',\n  keypress: 'press',\n  input: 'press'\n};\n\n/** Starts tracking the Interaction to Next Paint on the current page. */\nfunction _trackINP(interactionIdToRouteNameMapping) {\n  return addInpInstrumentationHandler(({\n    metric\n  }) => {\n    if (metric.value === undefined) {\n      return;\n    }\n    const entry = metric.entries.find(entry => entry.duration === metric.value && INP_ENTRY_MAP[entry.name] !== undefined);\n    const client = getClient();\n    if (!entry || !client) {\n      return;\n    }\n    const interactionType = INP_ENTRY_MAP[entry.name];\n    const options = client.getOptions();\n    /** Build the INP span, create an envelope from the span, and then send the envelope */\n    const startTime = msToSec(browserPerformanceTimeOrigin + entry.startTime);\n    const duration = msToSec(metric.value);\n    const interaction = entry.interactionId !== undefined ? interactionIdToRouteNameMapping[entry.interactionId] : undefined;\n    if (interaction === undefined) {\n      return;\n    }\n    const {\n      routeName,\n      parentContext,\n      activeTransaction,\n      user,\n      replayId\n    } = interaction;\n    const userDisplay = user !== undefined ? user.email || user.id || user.ip_address : undefined;\n    // eslint-disable-next-line deprecation/deprecation\n    const profileId = activeTransaction !== undefined ? activeTransaction.getProfileId() : undefined;\n    const span = new Span({\n      startTimestamp: startTime,\n      endTimestamp: startTime + duration,\n      op: `ui.interaction.${interactionType}`,\n      name: htmlTreeAsString(entry.target),\n      attributes: {\n        release: options.release,\n        environment: options.environment,\n        transaction: routeName,\n        ...(userDisplay !== undefined && userDisplay !== '' ? {\n          user: userDisplay\n        } : {}),\n        ...(profileId !== undefined ? {\n          profile_id: profileId\n        } : {}),\n        ...(replayId !== undefined ? {\n          replay_id: replayId\n        } : {})\n      },\n      exclusiveTime: metric.value,\n      measurements: {\n        inp: {\n          value: metric.value,\n          unit: 'millisecond'\n        }\n      }\n    });\n\n    /** Check to see if the span should be sampled */\n    const sampleRate = getSampleRate(parentContext, options);\n    if (!sampleRate) {\n      return;\n    }\n    if (Math.random() < sampleRate) {\n      const envelope = span ? createSpanEnvelope([span], client.getDsn()) : undefined;\n      const transport = client && client.getTransport();\n      if (transport && envelope) {\n        transport.send(envelope).then(null, reason => {\n          DEBUG_BUILD && logger.error('Error while sending interaction:', reason);\n        });\n      }\n      return;\n    }\n  });\n}\n\n/** Add performance related spans to a transaction */\nfunction addPerformanceEntries(transaction) {\n  const performance = getBrowserPerformanceAPI();\n  if (!performance || !WINDOW.performance.getEntries || !browserPerformanceTimeOrigin) {\n    // Gatekeeper if performance API not available\n    return;\n  }\n  DEBUG_BUILD && logger.log('[Tracing] Adding & adjusting spans using Performance API');\n  const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n  const performanceEntries = performance.getEntries();\n  const {\n    op,\n    start_timestamp: transactionStartTime\n  } = spanToJSON(transaction);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  performanceEntries.slice(_performanceCursor).forEach(entry => {\n    const startTime = msToSec(entry.startTime);\n    const duration = msToSec(entry.duration);\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (transaction.op === 'navigation' && transactionStartTime && timeOrigin + startTime < transactionStartTime) {\n      return;\n    }\n    switch (entry.entryType) {\n      case 'navigation':\n        {\n          _addNavigationSpans(transaction, entry, timeOrigin);\n          break;\n        }\n      case 'mark':\n      case 'paint':\n      case 'measure':\n        {\n          _addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n\n          // capture web vitals\n          const firstHidden = getVisibilityWatcher();\n          // Only report if the page wasn't hidden prior to the web vital.\n          const shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n          if (entry.name === 'first-paint' && shouldRecord) {\n            DEBUG_BUILD && logger.log('[Measurements] Adding FP');\n            _measurements['fp'] = {\n              value: entry.startTime,\n              unit: 'millisecond'\n            };\n          }\n          if (entry.name === 'first-contentful-paint' && shouldRecord) {\n            DEBUG_BUILD && logger.log('[Measurements] Adding FCP');\n            _measurements['fcp'] = {\n              value: entry.startTime,\n              unit: 'millisecond'\n            };\n          }\n          break;\n        }\n      case 'resource':\n        {\n          _addResourceSpans(transaction, entry, entry.name, startTime, duration, timeOrigin);\n          break;\n        }\n      // Ignore other entry types.\n    }\n  });\n  _performanceCursor = Math.max(performanceEntries.length - 1, 0);\n  _trackNavigator(transaction);\n\n  // Measurements are only available for pageload transactions\n  if (op === 'pageload') {\n    _addTtfbRequestTimeToMeasurements(_measurements);\n    ['fcp', 'fp', 'lcp'].forEach(name => {\n      if (!_measurements[name] || !transactionStartTime || timeOrigin >= transactionStartTime) {\n        return;\n      }\n      // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n      // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n      // to be adjusted to be relative to transaction.startTimestamp.\n      const oldValue = _measurements[name].value;\n      const measurementTimestamp = timeOrigin + msToSec(oldValue);\n\n      // normalizedValue should be in milliseconds\n      const normalizedValue = Math.abs((measurementTimestamp - transactionStartTime) * 1000);\n      const delta = normalizedValue - oldValue;\n      DEBUG_BUILD && logger.log(`[Measurements] Normalized ${name} from ${oldValue} to ${normalizedValue} (${delta})`);\n      _measurements[name].value = normalizedValue;\n    });\n    const fidMark = _measurements['mark.fid'];\n    if (fidMark && _measurements['fid']) {\n      // create span for FID\n      _startChild(transaction, {\n        description: 'first input delay',\n        endTimestamp: fidMark.value + msToSec(_measurements['fid'].value),\n        op: 'ui.action',\n        origin: 'auto.ui.browser.metrics',\n        startTimestamp: fidMark.value\n      });\n\n      // Delete mark.fid as we don't want it to be part of final payload\n      delete _measurements['mark.fid'];\n    }\n\n    // If FCP is not recorded we should not record the cls value\n    // according to the new definition of CLS.\n    if (!('fcp' in _measurements)) {\n      delete _measurements.cls;\n    }\n    Object.keys(_measurements).forEach(measurementName => {\n      setMeasurement(measurementName, _measurements[measurementName].value, _measurements[measurementName].unit);\n    });\n    _tagMetricInfo(transaction);\n  }\n  _lcpEntry = undefined;\n  _clsEntry = undefined;\n  _measurements = {};\n}\n\n/** Create measure related spans */\nfunction _addMeasureSpans(transaction,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nentry, startTime, duration, timeOrigin) {\n  const measureStartTimestamp = timeOrigin + startTime;\n  const measureEndTimestamp = measureStartTimestamp + duration;\n  _startChild(transaction, {\n    description: entry.name,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType,\n    origin: 'auto.resource.browser.metrics',\n    startTimestamp: measureStartTimestamp\n  });\n  return measureStartTimestamp;\n}\n\n/** Instrument navigation entries */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addNavigationSpans(transaction, entry, timeOrigin) {\n  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(event => {\n    _addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);\n  });\n  _addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');\n  _addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');\n  _addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');\n  _addRequest(transaction, entry, timeOrigin);\n}\n\n/** Create performance navigation related spans */\nfunction _addPerformanceNavigationTiming(transaction,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nentry, event, timeOrigin, description, eventEnd) {\n  const end = eventEnd ? entry[eventEnd] : entry[`${event}End`];\n  const start = entry[`${event}Start`];\n  if (!start || !end) {\n    return;\n  }\n  _startChild(transaction, {\n    op: 'browser',\n    origin: 'auto.browser.browser.metrics',\n    description: description || event,\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end)\n  });\n}\n\n/** Create request and response related spans */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addRequest(transaction, entry, timeOrigin) {\n  if (entry.responseEnd) {\n    // It is possible that we are collecting these metrics when the page hasn't finished loading yet, for example when the HTML slowly streams in.\n    // In this case, ie. when the document request hasn't finished yet, `entry.responseEnd` will be 0.\n    // In order not to produce faulty spans, where the end timestamp is before the start timestamp, we will only collect\n    // these spans when the responseEnd value is available. The backend (Relay) would drop the entire transaction if it contained faulty spans.\n    _startChild(transaction, {\n      op: 'browser',\n      origin: 'auto.browser.browser.metrics',\n      description: 'request',\n      startTimestamp: timeOrigin + msToSec(entry.requestStart),\n      endTimestamp: timeOrigin + msToSec(entry.responseEnd)\n    });\n    _startChild(transaction, {\n      op: 'browser',\n      origin: 'auto.browser.browser.metrics',\n      description: 'response',\n      startTimestamp: timeOrigin + msToSec(entry.responseStart),\n      endTimestamp: timeOrigin + msToSec(entry.responseEnd)\n    });\n  }\n}\n\n/** Create resource-related spans */\nfunction _addResourceSpans(transaction, entry, resourceUrl, startTime, duration, timeOrigin) {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n  const parsedUrl = parseUrl(resourceUrl);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const data = {};\n  setResourceEntrySizeData(data, entry, 'transferSize', 'http.response_transfer_size');\n  setResourceEntrySizeData(data, entry, 'encodedBodySize', 'http.response_content_length');\n  setResourceEntrySizeData(data, entry, 'decodedBodySize', 'http.decoded_response_content_length');\n  if ('renderBlockingStatus' in entry) {\n    data['resource.render_blocking_status'] = entry.renderBlockingStatus;\n  }\n  if (parsedUrl.protocol) {\n    data['url.scheme'] = parsedUrl.protocol.split(':').pop(); // the protocol returned by parseUrl includes a :, but OTEL spec does not, so we remove it.\n  }\n  if (parsedUrl.host) {\n    data['server.address'] = parsedUrl.host;\n  }\n  data['url.same_origin'] = resourceUrl.includes(WINDOW.location.origin);\n  const startTimestamp = timeOrigin + startTime;\n  const endTimestamp = startTimestamp + duration;\n  _startChild(transaction, {\n    description: resourceUrl.replace(WINDOW.location.origin, ''),\n    endTimestamp,\n    op: entry.initiatorType ? `resource.${entry.initiatorType}` : 'resource.other',\n    origin: 'auto.resource.browser.metrics',\n    startTimestamp,\n    data\n  });\n}\n\n/**\n * Capture the information of the user agent.\n */\nfunction _trackNavigator(transaction) {\n  const navigator = WINDOW.navigator;\n  if (!navigator) {\n    return;\n  }\n\n  // track network connectivity\n  const connection = navigator.connection;\n  if (connection) {\n    if (connection.effectiveType) {\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag('effectiveConnectionType', connection.effectiveType);\n    }\n    if (connection.type) {\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag('connectionType', connection.type);\n    }\n    if (isMeasurementValue(connection.rtt)) {\n      _measurements['connection.rtt'] = {\n        value: connection.rtt,\n        unit: 'millisecond'\n      };\n    }\n  }\n  if (isMeasurementValue(navigator.deviceMemory)) {\n    // TODO: Can we rewrite this to an attribute?\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.setTag('deviceMemory', `${navigator.deviceMemory} GB`);\n  }\n  if (isMeasurementValue(navigator.hardwareConcurrency)) {\n    // TODO: Can we rewrite this to an attribute?\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n  }\n}\n\n/** Add LCP / CLS data to transaction to allow debugging */\nfunction _tagMetricInfo(transaction) {\n  if (_lcpEntry) {\n    DEBUG_BUILD && logger.log('[Measurements] Adding LCP Data');\n\n    // Capture Properties of the LCP element that contributes to the LCP.\n\n    if (_lcpEntry.element) {\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag('lcp.element', htmlTreeAsString(_lcpEntry.element));\n    }\n    if (_lcpEntry.id) {\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag('lcp.id', _lcpEntry.id);\n    }\n    if (_lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag('lcp.url', _lcpEntry.url.trim().slice(0, 200));\n    }\n\n    // TODO: Can we rewrite this to an attribute?\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.setTag('lcp.size', _lcpEntry.size);\n  }\n\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n  if (_clsEntry && _clsEntry.sources) {\n    DEBUG_BUILD && logger.log('[Measurements] Adding CLS Data');\n    _clsEntry.sources.forEach((source, index) =>\n    // TODO: Can we rewrite this to an attribute?\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.setTag(`cls.source.${index + 1}`, htmlTreeAsString(source.node)));\n  }\n}\nfunction setResourceEntrySizeData(data, entry, key, dataKey) {\n  const entryVal = entry[key];\n  if (entryVal != null && entryVal < MAX_INT_AS_BYTES) {\n    data[dataKey] = entryVal;\n  }\n}\n\n/**\n * Add ttfb request time information to measurements.\n *\n * ttfb information is added via vendored web vitals library.\n */\nfunction _addTtfbRequestTimeToMeasurements(_measurements) {\n  const navEntry = getNavigationEntry();\n  const {\n    responseStart,\n    requestStart\n  } = navEntry;\n  if (requestStart <= responseStart) {\n    DEBUG_BUILD && logger.log('[Measurements] Adding TTFB Request Time');\n    _measurements['ttfb.requestTime'] = {\n      value: responseStart - requestStart,\n      unit: 'millisecond'\n    };\n  }\n}\n\n/** Taken from @sentry/core sampling.ts */\nfunction getSampleRate(transactionContext, options) {\n  if (!hasTracingEnabled(options)) {\n    return false;\n  }\n  let sampleRate;\n  if (transactionContext !== undefined && typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler({\n      transactionContext,\n      name: transactionContext.name,\n      parentSampled: transactionContext.parentSampled,\n      attributes: {\n        // eslint-disable-next-line deprecation/deprecation\n        ...transactionContext.data,\n        ...transactionContext.attributes\n      },\n      location: WINDOW.location\n    });\n  } else if (transactionContext !== undefined && transactionContext.sampled !== undefined) {\n    sampleRate = transactionContext.sampled;\n  } else if (typeof options.tracesSampleRate !== 'undefined') {\n    sampleRate = options.tracesSampleRate;\n  } else {\n    sampleRate = 1;\n  }\n  if (!isValidSampleRate(sampleRate)) {\n    DEBUG_BUILD && logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    return false;\n  }\n  return sampleRate;\n}\nexport { _addMeasureSpans, _addResourceSpans, addPerformanceEntries, startTrackingINP, startTrackingInteractions, startTrackingLongTasks, startTrackingWebVitals };","map":{"version":3,"names":["MAX_INT_AS_BYTES","msToSec","time","getBrowserPerformanceAPI","WINDOW","addEventListener","performance","_performanceCursor","_measurements","_lcpEntry","_clsEntry","startTrackingWebVitals","browserPerformanceTimeOrigin","mark","fidCallback","_trackFID","clsCallback","_trackCLS","lcpCallback","_trackLCP","ttfbCallback","_trackTtfb","undefined","startTrackingLongTasks","addPerformanceInstrumentationHandler","entries","entry","transaction","getActiveTransaction","startTime","duration","startChild","description","op","origin","startTimestamp","endTimestamp","startTrackingInteractions","name","span","htmlTreeAsString","target","componentName","getComponentName","attributes","startTrackingINP","interactionIdtoRouteNameMapping","inpCallback","_trackINP","addClsInstrumentationHandler","metric","length","DEBUG_BUILD","logger","log","value","unit","addLcpInstrumentationHandler","addFidInstrumentationHandler","timeOrigin","addTtfbInstrumentationHandler","INP_ENTRY_MAP","click","pointerdown","pointerup","mousedown","mouseup","touchstart","touchend","mouseover","mouseout","mouseenter","mouseleave","pointerover","pointerout","pointerenter","pointerleave","dragstart","dragend","drag","dragenter","dragleave","dragover","drop","keydown","keyup","keypress","input","interactionIdToRouteNameMapping","addInpInstrumentationHandler","find","client","getClient","interactionType","options","getOptions","interaction","interactionId","routeName","parentContext","activeTransaction","user","replayId","userDisplay","email","id","ip_address","profileId","getProfileId","Span","release","environment","profile_id","replay_id","exclusiveTime","measurements","inp","sampleRate","getSampleRate","Math","random","envelope","createSpanEnvelope","getDsn","transport","getTransport","send","then","reason","error","addPerformanceEntries","getEntries","performanceEntries","start_timestamp","transactionStartTime","spanToJSON","slice","forEach","entryType","_addNavigationSpans","_addMeasureSpans","firstHidden","getVisibilityWatcher","shouldRecord","firstHiddenTime","_addResourceSpans","max","_trackNavigator","_addTtfbRequestTimeToMeasurements","oldValue","measurementTimestamp","normalizedValue","abs","delta","fidMark","_startChild","cls","Object","keys","measurementName","setMeasurement","_tagMetricInfo","measureStartTimestamp","measureEndTimestamp","event","_addPerformanceNavigationTiming","_addRequest","eventEnd","end","start","responseEnd","requestStart","responseStart","resourceUrl","initiatorType","parsedUrl","parseUrl","data","setResourceEntrySizeData","renderBlockingStatus","protocol","split","pop","host","includes","location","replace","navigator","connection","effectiveType","setTag","type","isMeasurementValue","rtt","deviceMemory","hardwareConcurrency","String","element","url","trim","size","sources","source","index","node","key","dataKey","entryVal","navEntry","getNavigationEntry","transactionContext","hasTracingEnabled","tracesSampler","parentSampled","sampled","tracesSampleRate","isValidSampleRate","warn"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry-internal/src/browser/metrics/index.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type { IdleTransaction, Transaction } from '@sentry/core';\nimport {\n  Span,\n  getActiveTransaction,\n  getClient,\n  hasTracingEnabled,\n  isValidSampleRate,\n  setMeasurement,\n} from '@sentry/core';\nimport type { ClientOptions, Measurements, SpanContext, TransactionContext } from '@sentry/types';\nimport { browserPerformanceTimeOrigin, getComponentName, htmlTreeAsString, logger, parseUrl } from '@sentry/utils';\n\nimport { spanToJSON } from '@sentry/core';\nimport { DEBUG_BUILD } from '../../common/debug-build';\nimport {\n  addClsInstrumentationHandler,\n  addFidInstrumentationHandler,\n  addInpInstrumentationHandler,\n  addLcpInstrumentationHandler,\n  addPerformanceInstrumentationHandler,\n  addTtfbInstrumentationHandler,\n} from '../instrument';\nimport { WINDOW } from '../types';\nimport { getVisibilityWatcher } from '../web-vitals/lib/getVisibilityWatcher';\nimport type {\n  InteractionRouteNameMapping,\n  NavigatorDeviceMemory,\n  NavigatorNetworkInformation,\n} from '../web-vitals/types';\nimport { _startChild, isMeasurementValue } from './utils';\n\nimport { createSpanEnvelope } from '@sentry/core';\nimport { getNavigationEntry } from '../web-vitals/lib/getNavigationEntry';\nimport type { TTFBMetric } from '../web-vitals/types/ttfb';\n\nconst MAX_INT_AS_BYTES = 2147483647;\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nfunction msToSec(time: number): number {\n  return time / 1000;\n}\n\nfunction getBrowserPerformanceAPI(): Performance | undefined {\n  // @ts-expect-error we want to make sure all of these are available, even if TS is sure they are\n  return WINDOW && WINDOW.addEventListener && WINDOW.performance;\n}\n\nlet _performanceCursor: number = 0;\n\nlet _measurements: Measurements = {};\nlet _lcpEntry: LargestContentfulPaint | undefined;\nlet _clsEntry: LayoutShift | undefined;\n\n/**\n * Start tracking web vitals.\n * The callback returned by this function can be used to stop tracking & ensure all measurements are final & captured.\n *\n * @returns A function that forces web vitals collection\n */\nexport function startTrackingWebVitals(): () => void {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin) {\n    // @ts-expect-error we want to make sure all of these are available, even if TS is sure they are\n    if (performance.mark) {\n      WINDOW.performance.mark('sentry-tracing-init');\n    }\n    const fidCallback = _trackFID();\n    const clsCallback = _trackCLS();\n    const lcpCallback = _trackLCP();\n    const ttfbCallback = _trackTtfb();\n\n    return (): void => {\n      fidCallback();\n      clsCallback();\n      lcpCallback();\n      ttfbCallback();\n    };\n  }\n\n  return () => undefined;\n}\n\n/**\n * Start tracking long tasks.\n */\nexport function startTrackingLongTasks(): void {\n  addPerformanceInstrumentationHandler('longtask', ({ entries }) => {\n    for (const entry of entries) {\n      // eslint-disable-next-line deprecation/deprecation\n      const transaction = getActiveTransaction() as IdleTransaction | undefined;\n      if (!transaction) {\n        return;\n      }\n      const startTime = msToSec((browserPerformanceTimeOrigin as number) + entry.startTime);\n      const duration = msToSec(entry.duration);\n\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.startChild({\n        description: 'Main UI thread blocked',\n        op: 'ui.long-task',\n        origin: 'auto.ui.browser.metrics',\n        startTimestamp: startTime,\n        endTimestamp: startTime + duration,\n      });\n    }\n  });\n}\n\n/**\n * Start tracking interaction events.\n */\nexport function startTrackingInteractions(): void {\n  addPerformanceInstrumentationHandler('event', ({ entries }) => {\n    for (const entry of entries) {\n      // eslint-disable-next-line deprecation/deprecation\n      const transaction = getActiveTransaction() as IdleTransaction | undefined;\n      if (!transaction) {\n        return;\n      }\n\n      if (entry.name === 'click') {\n        const startTime = msToSec((browserPerformanceTimeOrigin as number) + entry.startTime);\n        const duration = msToSec(entry.duration);\n\n        const span: SpanContext = {\n          description: htmlTreeAsString(entry.target),\n          op: `ui.interaction.${entry.name}`,\n          origin: 'auto.ui.browser.metrics',\n          startTimestamp: startTime,\n          endTimestamp: startTime + duration,\n        };\n\n        const componentName = getComponentName(entry.target);\n        if (componentName) {\n          span.attributes = { 'ui.component_name': componentName };\n        }\n\n        // eslint-disable-next-line deprecation/deprecation\n        transaction.startChild(span);\n      }\n    }\n  });\n}\n\n/**\n * Start tracking INP webvital events.\n */\nexport function startTrackingINP(interactionIdtoRouteNameMapping: InteractionRouteNameMapping): () => void {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin) {\n    const inpCallback = _trackINP(interactionIdtoRouteNameMapping);\n\n    return (): void => {\n      inpCallback();\n    };\n  }\n\n  return () => undefined;\n}\n\n/** Starts tracking the Cumulative Layout Shift on the current page. */\nfunction _trackCLS(): () => void {\n  return addClsInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries[metric.entries.length - 1];\n    if (!entry) {\n      return;\n    }\n\n    DEBUG_BUILD && logger.log('[Measurements] Adding CLS');\n    _measurements['cls'] = { value: metric.value, unit: '' };\n    _clsEntry = entry as LayoutShift;\n  }, true);\n}\n\n/** Starts tracking the Largest Contentful Paint on the current page. */\nfunction _trackLCP(): () => void {\n  return addLcpInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries[metric.entries.length - 1];\n    if (!entry) {\n      return;\n    }\n\n    DEBUG_BUILD && logger.log('[Measurements] Adding LCP');\n    _measurements['lcp'] = { value: metric.value, unit: 'millisecond' };\n    _lcpEntry = entry as LargestContentfulPaint;\n  }, true);\n}\n\n/** Starts tracking the First Input Delay on the current page. */\nfunction _trackFID(): () => void {\n  return addFidInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries[metric.entries.length - 1];\n    if (!entry) {\n      return;\n    }\n\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin as number);\n    const startTime = msToSec(entry.startTime);\n    DEBUG_BUILD && logger.log('[Measurements] Adding FID');\n    _measurements['fid'] = { value: metric.value, unit: 'millisecond' };\n    _measurements['mark.fid'] = { value: timeOrigin + startTime, unit: 'second' };\n  });\n}\n\nfunction _trackTtfb(): () => void {\n  return addTtfbInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries[metric.entries.length - 1];\n    if (!entry) {\n      return;\n    }\n\n    DEBUG_BUILD && logger.log('[Measurements] Adding TTFB');\n    _measurements['ttfb'] = { value: metric.value, unit: 'millisecond' };\n  });\n}\n\nconst INP_ENTRY_MAP: Record<string, 'click' | 'hover' | 'drag' | 'press'> = {\n  click: 'click',\n  pointerdown: 'click',\n  pointerup: 'click',\n  mousedown: 'click',\n  mouseup: 'click',\n  touchstart: 'click',\n  touchend: 'click',\n  mouseover: 'hover',\n  mouseout: 'hover',\n  mouseenter: 'hover',\n  mouseleave: 'hover',\n  pointerover: 'hover',\n  pointerout: 'hover',\n  pointerenter: 'hover',\n  pointerleave: 'hover',\n  dragstart: 'drag',\n  dragend: 'drag',\n  drag: 'drag',\n  dragenter: 'drag',\n  dragleave: 'drag',\n  dragover: 'drag',\n  drop: 'drag',\n  keydown: 'press',\n  keyup: 'press',\n  keypress: 'press',\n  input: 'press',\n};\n\n/** Starts tracking the Interaction to Next Paint on the current page. */\nfunction _trackINP(interactionIdToRouteNameMapping: InteractionRouteNameMapping): () => void {\n  return addInpInstrumentationHandler(({ metric }) => {\n    if (metric.value === undefined) {\n      return;\n    }\n    const entry = metric.entries.find(\n      entry => entry.duration === metric.value && INP_ENTRY_MAP[entry.name] !== undefined,\n    );\n    const client = getClient();\n    if (!entry || !client) {\n      return;\n    }\n    const interactionType = INP_ENTRY_MAP[entry.name];\n    const options = client.getOptions();\n    /** Build the INP span, create an envelope from the span, and then send the envelope */\n    const startTime = msToSec((browserPerformanceTimeOrigin as number) + entry.startTime);\n    const duration = msToSec(metric.value);\n    const interaction =\n      entry.interactionId !== undefined ? interactionIdToRouteNameMapping[entry.interactionId] : undefined;\n    if (interaction === undefined) {\n      return;\n    }\n    const { routeName, parentContext, activeTransaction, user, replayId } = interaction;\n    const userDisplay = user !== undefined ? user.email || user.id || user.ip_address : undefined;\n    // eslint-disable-next-line deprecation/deprecation\n    const profileId = activeTransaction !== undefined ? activeTransaction.getProfileId() : undefined;\n    const span = new Span({\n      startTimestamp: startTime,\n      endTimestamp: startTime + duration,\n      op: `ui.interaction.${interactionType}`,\n      name: htmlTreeAsString(entry.target),\n      attributes: {\n        release: options.release,\n        environment: options.environment,\n        transaction: routeName,\n        ...(userDisplay !== undefined && userDisplay !== '' ? { user: userDisplay } : {}),\n        ...(profileId !== undefined ? { profile_id: profileId } : {}),\n        ...(replayId !== undefined ? { replay_id: replayId } : {}),\n      },\n      exclusiveTime: metric.value,\n      measurements: {\n        inp: { value: metric.value, unit: 'millisecond' },\n      },\n    });\n\n    /** Check to see if the span should be sampled */\n    const sampleRate = getSampleRate(parentContext, options);\n    if (!sampleRate) {\n      return;\n    }\n\n    if (Math.random() < (sampleRate as number | boolean)) {\n      const envelope = span ? createSpanEnvelope([span], client.getDsn()) : undefined;\n      const transport = client && client.getTransport();\n      if (transport && envelope) {\n        transport.send(envelope).then(null, reason => {\n          DEBUG_BUILD && logger.error('Error while sending interaction:', reason);\n        });\n      }\n      return;\n    }\n  });\n}\n\n/** Add performance related spans to a transaction */\nexport function addPerformanceEntries(transaction: Transaction): void {\n  const performance = getBrowserPerformanceAPI();\n  if (!performance || !WINDOW.performance.getEntries || !browserPerformanceTimeOrigin) {\n    // Gatekeeper if performance API not available\n    return;\n  }\n\n  DEBUG_BUILD && logger.log('[Tracing] Adding & adjusting spans using Performance API');\n  const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n\n  const performanceEntries = performance.getEntries();\n\n  const { op, start_timestamp: transactionStartTime } = spanToJSON(transaction);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  performanceEntries.slice(_performanceCursor).forEach((entry: Record<string, any>) => {\n    const startTime = msToSec(entry.startTime);\n    const duration = msToSec(entry.duration);\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (transaction.op === 'navigation' && transactionStartTime && timeOrigin + startTime < transactionStartTime) {\n      return;\n    }\n\n    switch (entry.entryType) {\n      case 'navigation': {\n        _addNavigationSpans(transaction, entry, timeOrigin);\n        break;\n      }\n      case 'mark':\n      case 'paint':\n      case 'measure': {\n        _addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n\n        // capture web vitals\n        const firstHidden = getVisibilityWatcher();\n        // Only report if the page wasn't hidden prior to the web vital.\n        const shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n\n        if (entry.name === 'first-paint' && shouldRecord) {\n          DEBUG_BUILD && logger.log('[Measurements] Adding FP');\n          _measurements['fp'] = { value: entry.startTime, unit: 'millisecond' };\n        }\n        if (entry.name === 'first-contentful-paint' && shouldRecord) {\n          DEBUG_BUILD && logger.log('[Measurements] Adding FCP');\n          _measurements['fcp'] = { value: entry.startTime, unit: 'millisecond' };\n        }\n        break;\n      }\n      case 'resource': {\n        _addResourceSpans(transaction, entry, entry.name as string, startTime, duration, timeOrigin);\n        break;\n      }\n      default:\n      // Ignore other entry types.\n    }\n  });\n\n  _performanceCursor = Math.max(performanceEntries.length - 1, 0);\n\n  _trackNavigator(transaction);\n\n  // Measurements are only available for pageload transactions\n  if (op === 'pageload') {\n    _addTtfbRequestTimeToMeasurements(_measurements);\n\n    ['fcp', 'fp', 'lcp'].forEach(name => {\n      if (!_measurements[name] || !transactionStartTime || timeOrigin >= transactionStartTime) {\n        return;\n      }\n      // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n      // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n      // to be adjusted to be relative to transaction.startTimestamp.\n      const oldValue = _measurements[name].value;\n      const measurementTimestamp = timeOrigin + msToSec(oldValue);\n\n      // normalizedValue should be in milliseconds\n      const normalizedValue = Math.abs((measurementTimestamp - transactionStartTime) * 1000);\n      const delta = normalizedValue - oldValue;\n\n      DEBUG_BUILD && logger.log(`[Measurements] Normalized ${name} from ${oldValue} to ${normalizedValue} (${delta})`);\n      _measurements[name].value = normalizedValue;\n    });\n\n    const fidMark = _measurements['mark.fid'];\n    if (fidMark && _measurements['fid']) {\n      // create span for FID\n      _startChild(transaction, {\n        description: 'first input delay',\n        endTimestamp: fidMark.value + msToSec(_measurements['fid'].value),\n        op: 'ui.action',\n        origin: 'auto.ui.browser.metrics',\n        startTimestamp: fidMark.value,\n      });\n\n      // Delete mark.fid as we don't want it to be part of final payload\n      delete _measurements['mark.fid'];\n    }\n\n    // If FCP is not recorded we should not record the cls value\n    // according to the new definition of CLS.\n    if (!('fcp' in _measurements)) {\n      delete _measurements.cls;\n    }\n\n    Object.keys(_measurements).forEach(measurementName => {\n      setMeasurement(measurementName, _measurements[measurementName].value, _measurements[measurementName].unit);\n    });\n\n    _tagMetricInfo(transaction);\n  }\n\n  _lcpEntry = undefined;\n  _clsEntry = undefined;\n  _measurements = {};\n}\n\n/** Create measure related spans */\nexport function _addMeasureSpans(\n  transaction: Transaction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  entry: Record<string, any>,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): number {\n  const measureStartTimestamp = timeOrigin + startTime;\n  const measureEndTimestamp = measureStartTimestamp + duration;\n\n  _startChild(transaction, {\n    description: entry.name as string,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType as string,\n    origin: 'auto.resource.browser.metrics',\n    startTimestamp: measureStartTimestamp,\n  });\n\n  return measureStartTimestamp;\n}\n\n/** Instrument navigation entries */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addNavigationSpans(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(event => {\n    _addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);\n  });\n  _addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');\n  _addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');\n  _addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');\n  _addRequest(transaction, entry, timeOrigin);\n}\n\n/** Create performance navigation related spans */\nfunction _addPerformanceNavigationTiming(\n  transaction: Transaction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  entry: Record<string, any>,\n  event: string,\n  timeOrigin: number,\n  description?: string,\n  eventEnd?: string,\n): void {\n  const end = eventEnd ? (entry[eventEnd] as number | undefined) : (entry[`${event}End`] as number | undefined);\n  const start = entry[`${event}Start`] as number | undefined;\n  if (!start || !end) {\n    return;\n  }\n  _startChild(transaction, {\n    op: 'browser',\n    origin: 'auto.browser.browser.metrics',\n    description: description || event,\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end),\n  });\n}\n\n/** Create request and response related spans */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addRequest(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  if (entry.responseEnd) {\n    // It is possible that we are collecting these metrics when the page hasn't finished loading yet, for example when the HTML slowly streams in.\n    // In this case, ie. when the document request hasn't finished yet, `entry.responseEnd` will be 0.\n    // In order not to produce faulty spans, where the end timestamp is before the start timestamp, we will only collect\n    // these spans when the responseEnd value is available. The backend (Relay) would drop the entire transaction if it contained faulty spans.\n    _startChild(transaction, {\n      op: 'browser',\n      origin: 'auto.browser.browser.metrics',\n      description: 'request',\n      startTimestamp: timeOrigin + msToSec(entry.requestStart as number),\n      endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n    });\n\n    _startChild(transaction, {\n      op: 'browser',\n      origin: 'auto.browser.browser.metrics',\n      description: 'response',\n      startTimestamp: timeOrigin + msToSec(entry.responseStart as number),\n      endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n    });\n  }\n}\n\nexport interface ResourceEntry extends Record<string, unknown> {\n  initiatorType?: string;\n  transferSize?: number;\n  encodedBodySize?: number;\n  decodedBodySize?: number;\n  renderBlockingStatus?: string;\n}\n\n/** Create resource-related spans */\nexport function _addResourceSpans(\n  transaction: Transaction,\n  entry: ResourceEntry,\n  resourceUrl: string,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): void {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n\n  const parsedUrl = parseUrl(resourceUrl);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const data: Record<string, any> = {};\n  setResourceEntrySizeData(data, entry, 'transferSize', 'http.response_transfer_size');\n  setResourceEntrySizeData(data, entry, 'encodedBodySize', 'http.response_content_length');\n  setResourceEntrySizeData(data, entry, 'decodedBodySize', 'http.decoded_response_content_length');\n\n  if ('renderBlockingStatus' in entry) {\n    data['resource.render_blocking_status'] = entry.renderBlockingStatus;\n  }\n  if (parsedUrl.protocol) {\n    data['url.scheme'] = parsedUrl.protocol.split(':').pop(); // the protocol returned by parseUrl includes a :, but OTEL spec does not, so we remove it.\n  }\n\n  if (parsedUrl.host) {\n    data['server.address'] = parsedUrl.host;\n  }\n\n  data['url.same_origin'] = resourceUrl.includes(WINDOW.location.origin);\n\n  const startTimestamp = timeOrigin + startTime;\n  const endTimestamp = startTimestamp + duration;\n\n  _startChild(transaction, {\n    description: resourceUrl.replace(WINDOW.location.origin, ''),\n    endTimestamp,\n    op: entry.initiatorType ? `resource.${entry.initiatorType}` : 'resource.other',\n    origin: 'auto.resource.browser.metrics',\n    startTimestamp,\n    data,\n  });\n}\n\n/**\n * Capture the information of the user agent.\n */\nfunction _trackNavigator(transaction: Transaction): void {\n  const navigator = WINDOW.navigator as null | (Navigator & NavigatorNetworkInformation & NavigatorDeviceMemory);\n  if (!navigator) {\n    return;\n  }\n\n  // track network connectivity\n  const connection = navigator.connection;\n  if (connection) {\n    if (connection.effectiveType) {\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag('effectiveConnectionType', connection.effectiveType);\n    }\n\n    if (connection.type) {\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag('connectionType', connection.type);\n    }\n\n    if (isMeasurementValue(connection.rtt)) {\n      _measurements['connection.rtt'] = { value: connection.rtt, unit: 'millisecond' };\n    }\n  }\n\n  if (isMeasurementValue(navigator.deviceMemory)) {\n    // TODO: Can we rewrite this to an attribute?\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.setTag('deviceMemory', `${navigator.deviceMemory} GB`);\n  }\n\n  if (isMeasurementValue(navigator.hardwareConcurrency)) {\n    // TODO: Can we rewrite this to an attribute?\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n  }\n}\n\n/** Add LCP / CLS data to transaction to allow debugging */\nfunction _tagMetricInfo(transaction: Transaction): void {\n  if (_lcpEntry) {\n    DEBUG_BUILD && logger.log('[Measurements] Adding LCP Data');\n\n    // Capture Properties of the LCP element that contributes to the LCP.\n\n    if (_lcpEntry.element) {\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag('lcp.element', htmlTreeAsString(_lcpEntry.element));\n    }\n\n    if (_lcpEntry.id) {\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag('lcp.id', _lcpEntry.id);\n    }\n\n    if (_lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag('lcp.url', _lcpEntry.url.trim().slice(0, 200));\n    }\n\n    // TODO: Can we rewrite this to an attribute?\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.setTag('lcp.size', _lcpEntry.size);\n  }\n\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n  if (_clsEntry && _clsEntry.sources) {\n    DEBUG_BUILD && logger.log('[Measurements] Adding CLS Data');\n    _clsEntry.sources.forEach((source, index) =>\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag(`cls.source.${index + 1}`, htmlTreeAsString(source.node)),\n    );\n  }\n}\n\nfunction setResourceEntrySizeData(\n  data: Record<string, unknown>,\n  entry: ResourceEntry,\n  key: keyof Pick<ResourceEntry, 'transferSize' | 'encodedBodySize' | 'decodedBodySize'>,\n  dataKey: 'http.response_transfer_size' | 'http.response_content_length' | 'http.decoded_response_content_length',\n): void {\n  const entryVal = entry[key];\n  if (entryVal != null && entryVal < MAX_INT_AS_BYTES) {\n    data[dataKey] = entryVal;\n  }\n}\n\n/**\n * Add ttfb request time information to measurements.\n *\n * ttfb information is added via vendored web vitals library.\n */\nfunction _addTtfbRequestTimeToMeasurements(_measurements: Measurements): void {\n  const navEntry = getNavigationEntry() as TTFBMetric['entries'][number];\n  const { responseStart, requestStart } = navEntry;\n\n  if (requestStart <= responseStart) {\n    DEBUG_BUILD && logger.log('[Measurements] Adding TTFB Request Time');\n    _measurements['ttfb.requestTime'] = {\n      value: responseStart - requestStart,\n      unit: 'millisecond',\n    };\n  }\n}\n\n/** Taken from @sentry/core sampling.ts */\nfunction getSampleRate(transactionContext: TransactionContext | undefined, options: ClientOptions): number | boolean {\n  if (!hasTracingEnabled(options)) {\n    return false;\n  }\n  let sampleRate;\n  if (transactionContext !== undefined && typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler({\n      transactionContext,\n      name: transactionContext.name,\n      parentSampled: transactionContext.parentSampled,\n      attributes: {\n        // eslint-disable-next-line deprecation/deprecation\n        ...transactionContext.data,\n        ...transactionContext.attributes,\n      },\n      location: WINDOW.location,\n    });\n  } else if (transactionContext !== undefined && transactionContext.sampled !== undefined) {\n    sampleRate = transactionContext.sampled;\n  } else if (typeof options.tracesSampleRate !== 'undefined') {\n    sampleRate = options.tracesSampleRate;\n  } else {\n    sampleRate = 1;\n  }\n  if (!isValidSampleRate(sampleRate)) {\n    DEBUG_BUILD && logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    return false;\n  }\n  return sampleRate;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}