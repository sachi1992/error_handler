{"ast":null,"code":"import { dynamicRequire } from '@sentry/utils';\nconst lazyLoadedNodePerformanceMonitoringIntegrations = [() => {\n  const integration = dynamicRequire(module, './apollo');\n  return new integration.Apollo();\n}, () => {\n  const integration = dynamicRequire(module, './apollo');\n  return new integration.Apollo({\n    useNestjs: true\n  });\n}, () => {\n  const integration = dynamicRequire(module, './graphql');\n  return new integration.GraphQL();\n}, () => {\n  const integration = dynamicRequire(module, './mongo');\n  return new integration.Mongo();\n}, () => {\n  const integration = dynamicRequire(module, './mongo');\n  return new integration.Mongo({\n    mongoose: true\n  });\n}, () => {\n  const integration = dynamicRequire(module, './mysql');\n  return new integration.Mysql();\n}, () => {\n  const integration = dynamicRequire(module, './postgres');\n  return new integration.Postgres();\n}];\nexport { lazyLoadedNodePerformanceMonitoringIntegrations };","map":{"version":3,"names":["lazyLoadedNodePerformanceMonitoringIntegrations","integration","dynamicRequire","module","Apollo","useNestjs","GraphQL","Mongo","mongoose","Mysql","Postgres"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry-internal/src/node/integrations/lazy.ts"],"sourcesContent":["import type { Integration, IntegrationClass } from '@sentry/types';\nimport { dynamicRequire } from '@sentry/utils';\n\nexport interface LazyLoadedIntegration<T = object> extends Integration {\n  /**\n   * Loads the integration's dependency and caches it so it doesn't have to be loaded again.\n   *\n   * If this returns undefined, the dependency could not be loaded.\n   */\n  loadDependency(): T | undefined;\n}\n\nexport const lazyLoadedNodePerformanceMonitoringIntegrations: (() => LazyLoadedIntegration)[] = [\n  () => {\n    const integration = dynamicRequire(module, './apollo') as {\n      Apollo: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Apollo();\n  },\n  () => {\n    const integration = dynamicRequire(module, './apollo') as {\n      Apollo: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Apollo({ useNestjs: true });\n  },\n  () => {\n    const integration = dynamicRequire(module, './graphql') as {\n      GraphQL: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.GraphQL();\n  },\n  () => {\n    const integration = dynamicRequire(module, './mongo') as {\n      Mongo: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Mongo();\n  },\n  () => {\n    const integration = dynamicRequire(module, './mongo') as {\n      Mongo: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Mongo({ mongoose: true });\n  },\n  () => {\n    const integration = dynamicRequire(module, './mysql') as {\n      Mysql: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Mysql();\n  },\n  () => {\n    const integration = dynamicRequire(module, './postgres') as {\n      Postgres: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Postgres();\n  },\n];\n"],"mappings":";AAYO,MAAMA,+CAA+C,GAAoC,CAC9F,MAAM;EACJ,MAAMC,WAAA,GAAcC,cAAc,CAACC,MAAM,EAAE,UAAU,CAAE;EAGvD,OAAO,IAAIF,WAAW,CAACG,MAAM,EAAE;AACnC,CAAG,EACD,MAAM;EACJ,MAAMH,WAAA,GAAcC,cAAc,CAACC,MAAM,EAAE,UAAU,CAAE;EAGvD,OAAO,IAAIF,WAAW,CAACG,MAAM,CAAC;IAAEC,SAAS,EAAE;EAAK,CAAC,CAAC;AACtD,CAAG,EACD,MAAM;EACJ,MAAMJ,WAAA,GAAcC,cAAc,CAACC,MAAM,EAAE,WAAW,CAAE;EAGxD,OAAO,IAAIF,WAAW,CAACK,OAAO,EAAE;AACpC,CAAG,EACD,MAAM;EACJ,MAAML,WAAA,GAAcC,cAAc,CAACC,MAAM,EAAE,SAAS,CAAE;EAGtD,OAAO,IAAIF,WAAW,CAACM,KAAK,EAAE;AAClC,CAAG,EACD,MAAM;EACJ,MAAMN,WAAA,GAAcC,cAAc,CAACC,MAAM,EAAE,SAAS,CAAE;EAGtD,OAAO,IAAIF,WAAW,CAACM,KAAK,CAAC;IAAEC,QAAQ,EAAE;EAAK,CAAC,CAAC;AACpD,CAAG,EACD,MAAM;EACJ,MAAMP,WAAA,GAAcC,cAAc,CAACC,MAAM,EAAE,SAAS,CAAE;EAGtD,OAAO,IAAIF,WAAW,CAACQ,KAAK,EAAE;AAClC,CAAG,EACD,MAAM;EACJ,MAAMR,WAAA,GAAcC,cAAc,CAACC,MAAM,EAAE,YAAY,CAAE;EAGzD,OAAO,IAAIF,WAAW,CAACS,QAAQ,EAAE;AACrC,CAAG,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}