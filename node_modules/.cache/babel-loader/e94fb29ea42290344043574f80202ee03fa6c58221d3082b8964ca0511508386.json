{"ast":null,"code":"import { DEBUG_BUILD } from './debug-build.js';\nimport { logger } from './logger.js';\nimport { getGlobalObject } from './worldwide.js';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject();\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsErrorEvent() {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsDOMError() {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-expect-error It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsDOMException() {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsFetch() {\n  if (!('fetch' in WINDOW)) {\n    return false;\n  }\n  try {\n    new Headers();\n    new Request('http://www.example.com');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isNativeFetch(func) {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nfunction supportsNativeFetch() {\n  if (typeof EdgeRuntime === 'string') {\n    return true;\n  }\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(WINDOW.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = WINDOW.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof doc.createElement === 'function') {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      DEBUG_BUILD && logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsReportingObserver() {\n  return 'ReportingObserver' in WINDOW;\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsReferrerPolicy() {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin'\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nexport { isNativeFetch, supportsDOMError, supportsDOMException, supportsErrorEvent, supportsFetch, supportsNativeFetch, supportsReferrerPolicy, supportsReportingObserver };","map":{"version":3,"names":["WINDOW","getGlobalObject","supportsErrorEvent","ErrorEvent","e","supportsDOMError","DOMError","supportsDOMException","DOMException","supportsFetch","Headers","Request","Response","isNativeFetch","func","test","toString","supportsNativeFetch","EdgeRuntime","fetch","result","doc","document","createElement","sandbox","hidden","head","appendChild","contentWindow","removeChild","err","DEBUG_BUILD","logger","warn","supportsReportingObserver","supportsReferrerPolicy","referrerPolicy"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/supports.ts"],"sourcesContent":["import { DEBUG_BUILD } from './debug-build';\nimport { logger } from './logger';\nimport { getGlobalObject } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\ndeclare const EdgeRuntime: string | undefined;\n\nexport { supportsHistory } from './vendor/supportsHistory';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-expect-error It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in WINDOW)) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('http://www.example.com');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (typeof EdgeRuntime === 'string') {\n    return true;\n  }\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(WINDOW.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = WINDOW.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === 'function') {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      DEBUG_BUILD &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in WINDOW;\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}