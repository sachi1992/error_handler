{"ast":null,"code":"import { isNaN, isVueViewModel, isSyntheticEvent } from './is.js';\nimport { memoBuilder } from './memo.js';\nimport { convertToPlainObject } from './object.js';\nimport { getFunctionName } from './stacktrace.js';\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction normalize(input, depth = 100, maxProperties = +Infinity) {\n  try {\n    // since we're at the outermost level, we don't provide a key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return {\n      ERROR: `**non-serializable** (${err})`\n    };\n  }\n}\n\n/** JSDoc */\nfunction normalizeToSize(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nobject,\n// Default Node.js REPL depth\ndepth = 3,\n// 100kB, as 200kB is max payload size, so half sounds reasonable\nmaxSize = 100 * 1024) {\n  const normalized = normalize(object, depth);\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n  return normalized;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(key, value, depth = +Infinity, maxProperties = +Infinity, memo = memoBuilder()) {\n  const [memoize, unmemoize] = memo;\n\n  // Get the simple cases out of the way first\n  if (value == null ||\n  // this matches null and undefined -> eqeq not eqeqeq\n  ['number', 'boolean', 'string'].includes(typeof value) && !isNaN(value)) {\n    return value;\n  }\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // From here on, we can assert that `value` is either an object or an array.\n\n  // Do not normalize objects that we know have already been normalized. As a general rule, the\n  // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n  // have already been normalized.\n  if (value['__sentry_skip_normalization__']) {\n    return value;\n  }\n\n  // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n  // We keep a certain amount of depth.\n  // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n  const remainingDepth = typeof value['__sentry_override_normalization_depth__'] === 'number' ? value['__sentry_override_normalization_depth__'] : depth;\n\n  // We're also done if we've reached the max depth\n  if (remainingDepth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // If the value has a `toJSON` method, we call it to extract more information\n  const valueWithToJSON = value;\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      const jsonValue = valueWithToJSON.toJSON();\n      // We need to normalize the return value of `.toJSON()` in case it has circular references\n      return visit('', jsonValue, remainingDepth - 1, maxProperties, memo);\n    } catch (err) {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = Array.isArray(value) ? [] : {};\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = convertToPlainObject(value);\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo);\n    numAdded++;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n/* eslint-disable complexity */\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(key,\n// this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n// our internal use, it'll do\nvalue) {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && value._events) {\n      return '[Domain]';\n    }\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n    if (isVueViewModel(value)) {\n      return '[VueViewModel]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n    if (typeof value === 'number' && value !== value) {\n      return '[NaN]';\n    }\n    if (typeof value === 'function') {\n      return `[Function: ${getFunctionName(value)}]`;\n    }\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    const objName = getConstructorName(value);\n\n    // Handle HTML Elements\n    if (/^HTML(\\w*)Element$/.test(objName)) {\n      return `[HTMLElement: ${objName}]`;\n    }\n    return `[object ${objName}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n/* eslint-enable complexity */\n\nfunction getConstructorName(value) {\n  const prototype = Object.getPrototypeOf(value);\n  return prototype ? prototype.constructor.name : 'null prototype';\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value) {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value) {\n  return utf8Length(JSON.stringify(value));\n}\n\n/**\n * Normalizes URLs in exceptions and stacktraces to a base path so Sentry can fingerprint\n * across platforms and working directory.\n *\n * @param url The URL to be normalized.\n * @param basePath The application base path.\n * @returns The normalized URL.\n */\nfunction normalizeUrlToBase(url, basePath) {\n  const escapedBase = basePath\n  // Backslash to forward\n  .replace(/\\\\/g, '/')\n  // Escape RegExp special characters\n  .replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n  let newUrl = url;\n  try {\n    newUrl = decodeURI(url);\n  } catch (_Oo) {\n    // Sometime this breaks\n  }\n  return newUrl.replace(/\\\\/g, '/').replace(/webpack:\\/?/g, '') // Remove intermediate base path\n  // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n  .replace(new RegExp(`(file://)?/*${escapedBase}/*`, 'ig'), 'app:///');\n}\nexport { normalize, normalizeToSize, normalizeUrlToBase, visit as walk };","map":{"version":3,"names":["normalize","input","depth","maxProperties","Infinity","visit","err","ERROR","normalizeToSize","object","maxSize","normalized","jsonSize","key","value","memo","memoBuilder","memoize","unmemoize","includes","isNaN","stringified","stringifyValue","startsWith","remainingDepth","replace","valueWithToJSON","toJSON","jsonValue","Array","isArray","numAdded","visitable","convertToPlainObject","visitKey","Object","prototype","hasOwnProperty","call","visitValue","_events","global","window","document","isVueViewModel","isSyntheticEvent","getFunctionName","String","objName","getConstructorName","test","getPrototypeOf","constructor","name","utf8Length","encodeURI","split","length","JSON","stringify","normalizeUrlToBase","url","basePath","escapedBase","newUrl","decodeURI","_Oo","RegExp"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry/src/normalize.ts"],"sourcesContent":["import type { Primitive } from '@sentry/types';\n\nimport { isNaN, isSyntheticEvent, isVueViewModel } from './is';\nimport type { MemoFunc } from './memo';\nimport { memoBuilder } from './memo';\nimport { convertToPlainObject } from './object';\nimport { getFunctionName } from './stacktrace';\n\ntype Prototype = { constructor: (...args: unknown[]) => unknown };\n// This is a hack to placate TS, relying on the fact that technically, arrays are objects with integer keys. Normally we\n// think of those keys as actual numbers, but `arr['0']` turns out to work just as well as `arr[0]`, and doing it this\n// way lets us use a single type in the places where behave as if we are only dealing with objects, even if some of them\n// might be arrays.\ntype ObjOrArray<T> = { [key: string]: T };\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function normalize(input: unknown, depth: number = 100, maxProperties: number = +Infinity): any {\n  try {\n    // since we're at the outermost level, we don't provide a key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return { ERROR: `**non-serializable** (${err})` };\n  }\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const normalized = normalize(object, depth);\n\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return normalized as T;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(\n  key: string,\n  value: unknown,\n  depth: number = +Infinity,\n  maxProperties: number = +Infinity,\n  memo: MemoFunc = memoBuilder(),\n): Primitive | ObjOrArray<unknown> {\n  const [memoize, unmemoize] = memo;\n\n  // Get the simple cases out of the way first\n  if (\n    value == null || // this matches null and undefined -> eqeq not eqeqeq\n    (['number', 'boolean', 'string'].includes(typeof value) && !isNaN(value))\n  ) {\n    return value as Primitive;\n  }\n\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // From here on, we can assert that `value` is either an object or an array.\n\n  // Do not normalize objects that we know have already been normalized. As a general rule, the\n  // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n  // have already been normalized.\n  if ((value as ObjOrArray<unknown>)['__sentry_skip_normalization__']) {\n    return value as ObjOrArray<unknown>;\n  }\n\n  // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n  // We keep a certain amount of depth.\n  // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n  const remainingDepth =\n    typeof (value as ObjOrArray<unknown>)['__sentry_override_normalization_depth__'] === 'number'\n      ? ((value as ObjOrArray<unknown>)['__sentry_override_normalization_depth__'] as number)\n      : depth;\n\n  // We're also done if we've reached the max depth\n  if (remainingDepth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // If the value has a `toJSON` method, we call it to extract more information\n  const valueWithToJSON = value as unknown & { toJSON?: () => unknown };\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      const jsonValue = valueWithToJSON.toJSON();\n      // We need to normalize the return value of `.toJSON()` in case it has circular references\n      return visit('', jsonValue, remainingDepth - 1, maxProperties, memo);\n    } catch (err) {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = (Array.isArray(value) ? [] : {}) as ObjOrArray<unknown>;\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = convertToPlainObject(value as ObjOrArray<unknown>);\n\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo);\n\n    numAdded++;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n/**\n * @deprecated This export will be removed in v8.\n */\nexport { visit as walk };\n\n/* eslint-disable complexity */\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(\n  key: unknown,\n  // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n  // our internal use, it'll do\n  value: Exclude<unknown, string | number | boolean | null>,\n): string {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && (value as { _events: unknown })._events) {\n      return '[Domain]';\n    }\n\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n\n    if (isVueViewModel(value)) {\n      return '[VueViewModel]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n\n    if (typeof value === 'number' && value !== value) {\n      return '[NaN]';\n    }\n\n    if (typeof value === 'function') {\n      return `[Function: ${getFunctionName(value)}]`;\n    }\n\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    const objName = getConstructorName(value);\n\n    // Handle HTML Elements\n    if (/^HTML(\\w*)Element$/.test(objName)) {\n      return `[HTMLElement: ${objName}]`;\n    }\n\n    return `[object ${objName}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n/* eslint-enable complexity */\n\nfunction getConstructorName(value: unknown): string {\n  const prototype: Prototype | null = Object.getPrototypeOf(value);\n\n  return prototype ? prototype.constructor.name : 'null prototype';\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n\n/**\n * Normalizes URLs in exceptions and stacktraces to a base path so Sentry can fingerprint\n * across platforms and working directory.\n *\n * @param url The URL to be normalized.\n * @param basePath The application base path.\n * @returns The normalized URL.\n */\nexport function normalizeUrlToBase(url: string, basePath: string): string {\n  const escapedBase = basePath\n    // Backslash to forward\n    .replace(/\\\\/g, '/')\n    // Escape RegExp special characters\n    .replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n\n  let newUrl = url;\n  try {\n    newUrl = decodeURI(url);\n  } catch (_Oo) {\n    // Sometime this breaks\n  }\n  return (\n    newUrl\n      .replace(/\\\\/g, '/')\n      .replace(/webpack:\\/?/g, '') // Remove intermediate base path\n      // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n      .replace(new RegExp(`(file://)?/*${escapedBase}/*`, 'ig'), 'app:///')\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}