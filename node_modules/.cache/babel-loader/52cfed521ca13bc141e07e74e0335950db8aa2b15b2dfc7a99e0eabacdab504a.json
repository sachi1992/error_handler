{"ast":null,"code":"/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nconst observe = (type, callback, opts) => {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      const po = new PerformanceObserver(list => {\n        callback(list.getEntries());\n      });\n      po.observe(Object.assign({\n        type,\n        buffered: true\n      }, opts || {}));\n      return po;\n    }\n  } catch (e) {\n    // Do nothing.\n  }\n  return;\n};\nexport { observe };","map":{"version":3,"names":["observe","type","callback","opts","PerformanceObserver","supportedEntryTypes","includes","po","list","getEntries","Object","assign","buffered","e"],"sources":["/Users/amandawarnakula/ParkwayLabs/TestApplications/error_handling/node_modules/@sentry-internal/src/browser/web-vitals/lib/observe.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FirstInputPolyfillEntry, NavigationTimingPolyfillEntry, PerformancePaintTiming } from '../types';\n\nexport interface PerformanceEntryHandler {\n  (entry: PerformanceEntry): void;\n}\n\ninterface PerformanceEntryMap {\n  event: PerformanceEventTiming[];\n  paint: PerformancePaintTiming[];\n  'layout-shift': LayoutShift[];\n  'largest-contentful-paint': LargestContentfulPaint[];\n  'first-input': PerformanceEventTiming[] | FirstInputPolyfillEntry[];\n  navigation: PerformanceNavigationTiming[] | NavigationTimingPolyfillEntry[];\n  resource: PerformanceResourceTiming[];\n  longtask: PerformanceEntry[];\n}\n\n/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nexport const observe = <K extends keyof PerformanceEntryMap>(\n  type: K,\n  callback: (entries: PerformanceEntryMap[K]) => void,\n  opts?: PerformanceObserverInit,\n): PerformanceObserver | undefined => {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      const po = new PerformanceObserver(list => {\n        callback(list.getEntries() as PerformanceEntryMap[K]);\n      });\n      po.observe(\n        Object.assign(\n          {\n            type,\n            buffered: true,\n          },\n          opts || {},\n        ) as PerformanceObserverInit,\n      );\n      return po;\n    }\n  } catch (e) {\n    // Do nothing.\n  }\n  return;\n};\n"],"mappings":"AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,OAAA,GAAUA,CACrBC,IAAI,EACJC,QAAQ,EACRC,IAAI,KACgC;EACpC,IAAI;IACF,IAAIC,mBAAmB,CAACC,mBAAmB,CAACC,QAAQ,CAACL,IAAI,CAAC,EAAE;MAC1D,MAAMM,EAAG,GAAE,IAAIH,mBAAmB,CAACI,IAAA,IAAQ;QACzCN,QAAQ,CAACM,IAAI,CAACC,UAAU,GAA6B;MAC7D,CAAO,CAAC;MACFF,EAAE,CAACP,OAAO,CACRU,MAAM,CAACC,MAAM,CACX;QACEV,IAAI;QACJW,QAAQ,EAAE;MACtB,CAAW,EACDT,IAAA,IAAQ,EAClB,CACA,CAAO;MACD,OAAOI,EAAE;IACf;EACA,CAAI,QAAOM,CAAC,EAAE;IACd;EAAA;EAEE;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}